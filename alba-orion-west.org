#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:{} arch:headline
#+OPTIONS: author:t c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Notes on creating spectral maps from Orion West slit spectra
#+AUTHOR: William Henney
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+PROPERTY: header-args    :exports both

* Weekly meetings


** [2016-03-04 Fri] 
+ Will is going to make figures of the isovelocity maps
  + Alba suggested showing pairs of maps, one annotated (or just annotations)
+ Alba is going to revise the positions of the sample regions for bowshock and background
  + Take bg either side of shock where possible
  + Use slit as close to perpendicular to shock as possible
  + Estimate uncertainty in background
+ Alba will revise line color choice in Figure 6
  + Maybe use histogram for the observed profile

** [2016-03-08 Tue]
+ We discussed the different options for figure 6 that Alba had generated
  + We decided to use the thin blue lines for the individual components
  + For the observed profile, Will prefers the steps
    + But Alba needs to adjust it so that the data points are at the step centers, not edges
    + Also invesigate if the steps can be shown as a filled area (light gray) with no outline
+ We discussed the BG subtraction for the red bow shock profiles
  + Avoid the region around LL2 because the LL2 bowshock dominates the spectra
  + Use only those BG regions that are "outside" the bow shock where possible
  + Try to construct a mean +/- variation BG profile from various slits and apply it to all spectra in a given region
  + For the southern bow shock arcs, use BG from horizontal slits
+ Will still needs to do the isovelocity figures



** [2016-03-15 Tue]
+ Alba has redone the fits to the red bow shocks, taking larger sample regions
  + All are now fine except for the NW shock, where she needs to use a BG sample to the W of the source sample, even though the blue knots there may make it impossible to do a good subtraction on the blue side of the line
+ Most of the red bow shock samples have peak velocities close to 25 km/s heliocentric
  + This is close to the systemic velocity of the star cluster and molecular cloud
  + One explanation could be that the bow shocks are moving in the plane of the sky
  + But since we are looking at the limb-brightened edge of a spatially resolved bow shock, the relative radial velocity should always be roughly zero, even if the bow shock axis is inclined to the plane of the sky
+ We are provisionally accepting Will's brown color scheme for nebular core in the figure that shows the slits - maybe revisit later
+ Will still needs to finish the isovelocity image annotations
  + Alba will send the final sample regions used for the knots



** [2016-03-29 Tue]

** [2016-04-05 Tue]
+ Task for Will: write to Tere about correction to 6716/31 ratio
+ Alba: will investigate knots in [S II] and [O III] spectra
  + [O III]: only if we see some emission that is not also in Ha
  + [S II]: calculate knot and nebula densities once we have the photometric correction to the 6716/6731 ratio

** [2016-04-08 Fri]
+ Will has to read latest draft
+ Will should look at [O III] calibration
+ Alba will measure the (uncalibrated) line ratios for [O III] and [S II], with the idea of fixing the photometric calibration later 



** [2016-04-12 Tue]
+ We measured the position of one of the [O III] slits
  + spec228-oiii.fits has delta of 61.7 pixels between image and slit spectrum
  + With luck, the same solution will work for the [S II] spectrum taken at the same time
+ In the [O III] slit from the LL1 position, there is a blue knot in the far north
  + Alba to check if this corrsponds to one of our identified knots
+ We still haven't found the line ration correction factors
  + Will must carry on looking

** [2016-04-15 Fri]
+ We now have the correction factors for the 6716/6731 ratio
+ We also have a correction factor for the [O III]/Ha ratio
  + But we don't have a clear idea of how we can do a reliable calibration of the [O III] line
+ We extended the table of slits to include four sii slits and two oiii slits
+ We modified the program =slit-calibration.py= so it can deal with spectra that are not Ha+NII
  + But in such cases it misses out the flux calibration part
+ We have run the program on the sii and oiii slits, so we now have FITS files in the homogeneous 3D format that the other programs expect
+ Immediate remaining tasks:
  + [X] *Will* Re-try the background fit and subtraction
  + [ ] *Will* Run =spec_augment_wcs.py= on the sii and oiii spectra to put them in heliocentric velocity and map pixels
  + [ ] *Alba* Finish analysing the knots in [S II] and [O III]

* Slits we haven't used

** Spatial alignment of [O III] slit in W region
+ spec228-oiii.fits
  + Peak brightness at y = 401.6
+ spm231.fits (image + slit in [O III] filter)
  + Peak brightness at y = 339.9
  + Declination: -5:24:05.49
  + 
+ Difference: 61.7

** Message from Alba [2016-04-04 Mon]
#+BEGIN_QUOTE
ya revisé todas las observaciones que tenemos. Tengo algunas dudas de
posiciones que no han sido usadas para los cubos de Ha y [NII] y no
sé porqué. Te resumo:

-En observaciones de 2007a hay 9 posiciones si usar:
spec014-transf.fits
spec016-transf.fits
spec021-transf.fits
spec025-transf.fits
spec029-transf.fits
spec036-transf.fits
spec040-transf.fits
spec044-transf.fits
spec078-transf.fits

-En 2007b solo una sin usar (spec023-transf.fits) que es horizontal y todas
las demas son verticales. Imagino que es por eso que no se usó?

-En 2013b sin usa la spm087_bcrx.fits.



Respecto a las observaciones en [OIII] y [SII] hay 6 espectros tomados
en la zona del oeste que nos pueden ser útiles. Son estas:

-Del 2007a
spec060-transf.fits en [OIII]
spec065-transf.fits en [SII]

-Del 2010:
spm082-083h.fits en SII
spm086-088h.fits en SII
spm225-226h.fits en SII
spm228-229h.fits en OIII

No son suficientes como para hacer un cubo, pero los espectros si pueden ser
últiles para el analisis de los knots (de los red bow shocks no porque ninguno
cruza esas posiciones). Te mando un .reg con las seis las posiciones (algunas
se solapan!).


Qué opinas? Lo miras y lo discutimos mañana?

#+END_QUOTE
* New figures for the paper

** The calibration figures
+ Alba didn't like the color scheme (all pinks and purples)
+ But to change it I need to re-run the calibration program
  + Although I only need to do it for the slits that we are going to show
  + [ ] So find out from Alba what they are 



** The isovelocity images
+ Use Aplpy to make 3-color plots
+ This seems to be more involved than I remember it, but never mind


*** Get file names and brightness limits from ds9
:PROPERTIES:
:ID:       AC163DBA-B745-4115-BBCE-B2AAE1C6FAAE
:END:
+ These are the ones that I have saved in [[file:velmaps-2015-10-16.bck]]

**** Utility script for getting info from DS9 about current frame
#+name: get-rgb-info-from-ds9
#+BEGIN_SRC sh
for chan in red green blue; do
    echo "#### $chan channel ####"
    xpaset -p ds9 rgb $chan
    xpaget ds9 file
    xpaget ds9 scale limits
done
#+END_SRC

**** Ha line core 
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha+030+050-multibin.fits[SCALED]
: 0.5 2.3659673
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha+010+030-multibin.fits[SCALED]
: 1 6.4149385
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-010+010-multibin.fits[SCALED]
: 0.4 3.9079967

**** [N II] line core 
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii+030+050-multibin.fits[SCALED]
: 0.1 0.77765025
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii+010+030-multibin.fits[SCALED]
: 0.4 3.5500289
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-010+010-multibin.fits[SCALED]
: 0.06 1.0112845


**** H a near blue 
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-030-010-multibin.fits[SCALED]
: 0.05 0.95784455
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-050-030-multibin.fits[SCALED]
: 0.004 0.29859652
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-070-050-multibin.fits[SCALED]
: 0.003 0.21029883


**** H a far blue
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-070-050-multibin.fits[SCALED]
: 0.0097773644 0.24906631
: #### green channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-090-070-multibin.fits[SCALED]
: 0.0042288617 0.16265318
: #### blue channel ####
: /Users/will/Dropbox/orionwest/new-slits-ha-110-090-multibin.fits[SCALED]
: 0.00070055394 0.022560317


**** H a wide blue
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-040-010-multibin.fits[SCALED]
: 0.05 1.2033879
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-070-040-multibin.fits[SCALED]
: 0 0.5
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-ha-120-070-multibin.fits[SCALED]
: 0 0.12073733


**** [N II] wide blue
#+RESULTS:
: #### red channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-040-010-multibin.fits[SCALED]
: 0 0.4
: #### green channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-070-040-multibin.fits[SCALED]
: 0 0.2
: #### blue channel ####
: /Users/will/Dropbox/OrionWest/new-slits-nii-120-070-multibin.fits[SCALED]
: 0 0.05

*** DONE Make RGB isovelocity image with AplPy
CLOSED: [2016-03-09 Wed 11:44]

+ Center of FOV convert to degrees: 
  + RA src_calc[]{deg(15*(5@34'45"))} {{{results(=83.6875=)}}}
  + Dec src_calc[]{deg(-5@25'00")} {{{results(=-5.41666666667=)}}}
+ Box size
  + RA 1 minute: src_calc[]{deg(15*(0@1'0"))} {{{results(=0.25=)}}}
  + Dec 10 arcmin: src_calc[]{deg(0@10'0")} {{{results(=0.166666666667=)}}}


#+name: rgb-isovel-map
#+header: :var RANGES="+030+050 +010+030 -010+010"
#+header: :var LIMTAB=rgb-limits-nii-core
#+header: :var SPECIES="nii" SUFFIX="core" STRETCH="linear"
#+BEGIN_SRC python
from astropy.io import fits
import aplpy
figfile = 'rgb-isovel-{}-{}.pdf'.format(SPECIES, SUFFIX)
rgbfiles = ['new-slits-{}{}-multibin.fits'.format(SPECIES, vrange)
            for vrange in RANGES.split()]

# Unpack the channel brightness limits from table
[r1, r2], [g1, g2], [b1, b2] = LIMTAB

# aplpy can only deal with the primary headers, so sort that out first
template = 'rgb-for-aplpy-{}.fits'
channels = ['red', 'green', 'blue']
newfiles = [template.format(chan) for chan in channels]
for newfn, fn in zip(newfiles, rgbfiles):
    hdu = fits.open(fn)['SCALED']
    hdu.writeto(newfn, clobber=True)

aplpy.make_rgb_image(newfiles, 'rgb-for-aplpy.png',
                     vmin_r=r1, vmin_g=g1, vmin_b=b1,
                     vmax_r=r2, vmax_g=g2, vmax_b=b2,
                     stretch_r=STRETCH, stretch_g=STRETCH, stretch_b=STRETCH, 
                     make_nans_transparent=True)
f = aplpy.FITSFigure(newfiles[0])
f.show_rgb('rgb-for-aplpy.png')
f.recenter(83.6875, -5.4167, width=0.25, height=0.167)
f.add_grid()
f.grid.set_color('white')
f.grid.set_alpha(0.2)
f.save(figfile)
#+END_SRC


#+name: rgb-limits-nii-core
| 0.075 | 0.7 |
|   0.3 | 3.3 |
| 0.045 | 1.5 |

#+RESULTS:
[[file:rgb-isovel-nii-core.pdf]]

Now we have a sqrt stretch on the intensity
#+name: rgb-limits-ha-core
| 0.55 |  4 |
|  1.2 | 12 |
| 0.45 |  7 |

Old limits when we had a linear stretch
| 0.5 | 2.4 |
| 1.0 | 6.4 |
| 0.4 | 3.9 |

#+RESULTS:
[[file:rgb-isovel-ha-core.pdf]]

#+RESULTS:
[[file:rgb-isovel-ha-blue.pdf]]

#+RESULTS:
[[file:rgb-isovel-nii-blue.pdf]]

#+RESULTS:
[[file:rgb-isovel-ha-far-blue.pdf]]

#+RESULTS:
[[file:rgb-isovel-nii-far-blue.pdf]]

#+name: rgb-limits-ha-wide-blue
| 0.05 | 1.0 |
|  0.0 | 0.3 |
|  0.0 | 0.1 |

#+RESULTS:
[[file:rgb-isovel-ha-wide-blue.pdf]]

#+name: rgb-limits-nii-wide-blue
|  0.01 |  0.3 |
| 0.002 | 0.12 |
| 0.001 | 0.05 |

#+RESULTS:
[[file:rgb-isovel-nii-wide-blue.pdf]]


#+name: rgb-limits-ha-near-red
| 0.0 | 0.1 |
| 0.0 | 0.2 |
| 0.1 | 0.6 |

#+RESULTS:
[[file:rgb-isovel-ha-near-red.pdf]]

#+name: rgb-limits-ha-wide-red
| 0.0 | 0.03 |
| 0.0 |  0.1 |
| 0.1 |  0.6 |

#+RESULTS:
[[file:rgb-isovel-ha-wide-red.pdf]]

#+name: rgb-limits-nii-wide-red
|  0.0 | 0.02 |
|  0.0 | 0.05 |
| 0.02 |  0.2 |

#+RESULTS:
[[file:rgb-isovel-nii-wide-red.pdf]]





*** Figure showing the slit positions
#+BEGIN_SRC python
import matplotlib
matplotlib.use("Agg")
from astropy.io import fits
from astropy.wcs import WCS
import aplpy
import numpy as np
from matplotlib import cm, colors

def extract_window_hdu(hdu, x1=0.0, x2=0.6, y1=0.3, y2=1.0):
    """Extract a window from the image in `hdu`

    The window is specified by corners `x1`, `x2`, `y1`, `y2` in
    fractional coordinates. 
    Returns a new `astropy.io.fits.ImageHDU`

    """
    ny, nx = hdu.data.shape
    xslice = slice(int(x1*nx), int(x2*nx))
    yslice = slice(int(y1*ny), int(y2*ny))
    w = WCS(hdu.header)
    newdata = hdu.data[yslice, xslice]
    newheader = w.slice((yslice, xslice)).to_header()
    return fits.ImageHDU(data=newdata, header=newheader)



fn = 'WFI-Images/Orion_H_A_deep.fits'
slit_fn = 'new-slits-ha-allvels.fits'
# cmap = cm.PuRd
# cmap = cm.magma_r
cmap = cm.copper_r
slit_hdu = fits.open(slit_fn)['scaled']
shallow_hdu = fits.open(fn.replace('deep', 'shallow'))[0]
m = np.isfinite(slit_hdu.data)
slit_hdu.data[m] = 1.0
slit_hdu.data[~m] = 0.0
figfile = 'fov-with-slits.pdf'
f = aplpy.FITSFigure(fn)
f.recenter(83.7375, -5.4167, width=0.35, height=0.25)
f.show_grayscale(pmin=65.0, pmax=95, stretch='sqrt')
f.show_contour(extract_window_hdu(shallow_hdu),
               levels=[20.0, 30.0, 40.0, 50.0,
                       70.0, 100.0, 200.0, 400.0, 800.0],
               norm=colors.LogNorm(), vmin=0.3, vmax=1000.0,
               cmap=cmap, filled=True, alpha=0.5, overlap=True)
f.show_contour(slit_hdu,
               levels=[0.01, 10.0],
               filled=True, alpha=0.4, colors='#00a0ff', overlap=True)
f.add_grid()
f.grid.set_color('white')
f.grid.set_alpha(0.2)
f.save(figfile)
f.save(figfile.replace('.pdf', '.jpg'), dpi=300, format='jpeg')
print(figfile)
#+END_SRC

Run this in the shell since it can take 2 minutes if using filled contours
#+BEGIN_SRC sh
time python fov-with-slits.py
#+END_SRC

+ Resulting figure file: [[file:fov-with-slits.pdf]]
+ Also a jpg version [[file:fov-with-slits.jpg]]



* Large scale structures in Orion

** TODO The giant red bow
+ Connection with red-shifted "bar" to the S of LL 1?
  + You can sort of imagine the continuation of the lower wing of the bow raching this feature
  + But to be honest I do not think they are related
    + So far in the wing of the bowshock, the verlocities should not be significantly redshifted anyway
+ Connection to foreground scattering clouds
  + There is a bright line of scattering cloud that runs parallel to the N wing of the bow, but offset to the east by a few arc minutes
  + Perhaps it is related
  + We could maybe do an image of F435W / F555W to highlight the scattering 

* Knot measurements by Alba
[2016-01-14 Thu]

** Plan of things to do 
:LOGBOOK:
CLOCK: [2016-01-26 Tue 09:41]--[2016-01-26 Tue 10:41] =>  1:00
:END:

*** DONE Tasks for will
CLOSED: [2016-01-26 Tue 14:16]
+ [X] Move all the original spectra to somewhere that Alba can find them
+ [X] Show Alba where to find the HST images



*** TODO More tasks for Will
DEADLINE: <2016-02-12 Fri>
+ [X] Check positions of red bowshock from Alba region files
+ [ ] Look for previous mentions of the "wall"
+ [X] Look into Alba's other region files, such as the new_X.reg files
+ [ ] try out google hangouts


*** Identify coherent structures in the map
+ [ ] Plot positions of Alba's knots

** New tables [2016-01-19 Tue]



*** Dealing with the ajustes files
**** Clean up and rationalize the data
First convert it to tab-separated and strip out the anomalous lines with metadata about each knot's fit
#+BEGIN_SRC python
for emline in 'nii', 'ha':
    rslt = []
    print('Cleaning', emline, 'ajustes data')
    with open('ajustes_{}.dat'.format(emline)) as f:
        stanzas = f.read().split('\n\n')
        print('Found {} stanzas'.format(len(stanzas)))
        col_labels = stanzas[0].split('\n')[0].split()
        rslt.append('\t'.join(col_labels))
        for stanza in stanzas[1:]:
            # skip first line since it is only metadata
            lines = stanza.split('\n') 
            for line in lines[1:]:
                values = line.split()
                # pad short lines
                values += '-'*(len(col_labels) - len(values))
                rslt.append('\t'.join(values))

    with open('ajustes_{}_cleaned.tab'.format(emline), 'w') as f:
        f.write('\n'.join(rslt))

#+END_SRC


#+BEGIN_SRC sh
python clean_ajustes_data.py
#+END_SRC

#+RESULTS:
: Cleaning nii ajustes data
: Found 49 stanzas
: Cleaning ha ajustes data
: Found 49 stanzas



#+BEGIN_SRC python
import numpy as np
from matplotlib import pyplot as plt
from astropy.table import Table
import seaborn as sns
hatab = Table.read('ajustes_ha_cleaned.tab',
                 format='ascii.tab'
)
niitab = Table.read('ajustes_nii_cleaned.tab',
                 format='ascii.tab'
)
outtab = [
    ['knot', 'knot flux Ha', 'BG flux Ha', 'knot flux N II', 'BG flux N II'], None,
]
knots = set(hatab['KNOT'])
for knot in knots:
    haflux = 0.0
    bghaflux = 0.0
    niiflux = 0.0
    bgniiflux = 0.0
    for _, zona, _, _, flux, _, _ in hatab[hatab['KNOT']==knot]:
        if zona.startswith('Core'):
            bghaflux += flux
        else:
            haflux += flux
    for _, zona, _, _, flux, _, _ in niitab[niitab['KNOT']==knot]:
        if zona.startswith('Core'):
            bgniiflux += flux
        else:
            niiflux += flux
    outtab.append([knot, haflux, bghaflux, niiflux, bgniiflux])

#+END_SRC

#+RESULTS:
|     knot | knot flux Ha |         BG flux Ha | knot flux N II |       BG flux N II |       |      |
|----------+--------------+--------------------+----------------+--------------------+-------+------|
| 4263-460 |       1.3588 |            57.7649 |         0.2424 |            17.2145 |  0.18 | 0.30 |
| 4407-229 |       0.1892 | 29.302300000000002 |         0.0317 |             7.6536 |  0.17 | 0.26 |
| 4261-656 |       0.4853 |            23.0215 |         0.1612 |             7.2204 |  0.33 | 0.31 |
| 4285-444 |       0.5878 |            36.6088 |         0.1095 |            10.3281 |  0.19 | 0.28 |
| 4242-458 |       4.2138 |            98.3981 |         0.8054 |            32.2823 |  0.19 | 0.33 |
| 4292-323 |       3.3026 |  76.91850000000001 |         2.0242 | 22.334300000000002 |  0.61 | 0.29 |
| 4405-349 |       0.1418 |            36.1288 |           -1.0 |             8.1387 | -7.05 | 0.23 |
| 4376-329 |       0.5184 |             38.721 |         0.0892 |            10.7959 |  0.17 | 0.28 |
| 4377-526 |       0.5161 |            33.6894 |         0.0646 |             7.3681 |  0.13 | 0.22 |
| 4252-608 |       0.9948 |            42.2221 |         0.3858 |            15.5666 |  0.39 | 0.37 |
| 4331-453 |       1.6284 | 47.637299999999996 |         0.3117 | 12.999500000000001 |  0.19 | 0.27 |
| 4280-658 |       0.4228 |            21.7694 |          0.093 |             7.4916 |  0.22 | 0.34 |
| 4383-411 |       0.3926 |            37.1354 |         0.0388 |            10.0222 |  0.10 | 0.27 |
| 4273-625 |        2.516 |            32.3538 |         0.7795 |            10.3756 |  0.31 | 0.32 |
| 4402-400 |       0.5359 |            55.5127 |         0.1018 | 12.140799999999999 |  0.19 | 0.22 |
| 4396-541 |       0.8658 |            74.3514 |           -1.0 | 14.561900000000001 | -1.16 | 0.20 |
| 4389-327 |       0.5929 |             68.137 |         0.0766 | 17.901799999999998 |  0.13 | 0.26 |
| 4252-616 |      10.1904 |  80.24680000000001 |         6.3896 |             30.289 |  0.63 | 0.38 |
| 4378-414 |       0.4446 | 25.253800000000002 |         0.0465 |             6.1492 |  0.10 | 0.24 |
| 4378-434 |         0.22 | 43.789500000000004 |           -1.0 | 11.189999999999998 | -4.55 | 0.26 |
| 4406-330 |       0.2391 | 39.373599999999996 |         0.0313 |             9.0138 |  0.13 | 0.23 |
| 4254-551 |       6.4058 |            70.5725 |         1.9869 |            23.2922 |  0.31 | 0.33 |
|  050-422 |       2.1393 |           186.6282 |           -1.0 |            17.7898 | -0.47 | 0.10 |
| 4456-324 |       0.7383 |            79.3227 |           -1.0 |            18.9889 | -1.35 | 0.24 |
| 4277-539 |        0.981 |            22.4463 |         0.2061 |             5.8046 |  0.21 | 0.26 |
| 4335-207 |      94.2334 |           179.3345 |        22.5891 | 54.301300000000005 |  0.24 | 0.30 |
| 4293-557 |       1.1065 |            27.2858 |         0.2163 |             8.0494 |  0.20 | 0.30 |
| 4385-243 |       0.3274 |            36.7762 |           -1.0 |             9.1083 | -3.05 | 0.25 |
| 4260-624 |      18.6275 |           175.8452 |         8.1063 |            74.6607 |  0.44 | 0.42 |
| 4266-615 |      18.4401 |            77.6757 |         5.7799 | 23.886000000000003 |  0.31 | 0.31 |
| 4359-521 |       1.8995 |            52.0681 |         0.3119 |            14.2165 |  0.16 | 0.27 |
| 4245-742 |       0.4682 |            21.4576 |          0.119 |  7.282400000000001 |  0.25 | 0.34 |
| 4258-744 |       2.0145 |            36.6321 |         0.5822 |            12.4359 |  0.29 | 0.34 |
| 4320-626 |       1.5381 |            39.6796 |         0.2394 |            11.4282 |  0.16 | 0.29 |
| 4261-633 |       6.1393 |            149.561 |         3.2686 |              65.72 |  0.53 | 0.44 |
| 4272-628 |       0.4786 |            18.3472 |         0.0762 |             6.0577 |  0.16 | 0.33 |
| 4265-637 |       5.9998 | 39.859899999999996 |         1.7996 |  9.818200000000001 |  0.30 | 0.25 |
| 4244-554 |      12.3319 |           163.0686 |        10.0035 |            54.4345 |  0.81 | 0.33 |
| 4289-524 |       0.8159 | 52.039199999999994 |         0.2217 |             16.668 |  0.27 | 0.32 |
| 4280-551 |       5.4685 |            44.5027 |         1.6875 |            12.2959 |  0.31 | 0.28 |
| 4274-439 |       1.1424 |            54.9133 |         0.1434 |             15.706 |  0.13 | 0.29 |
| 4332-401 |       0.1471 |            24.8198 |         0.0576 |  6.321400000000001 |  0.39 | 0.25 |
| 4409-243 |       0.1811 |            48.4771 |           -1.0 |             14.116 | -5.52 | 0.29 |
| 4374-457 |       1.8445 |            34.7106 |         0.4808 |             8.4502 |  0.26 | 0.24 |
| 4272-545 |       3.6588 |  69.81309999999999 |         0.9764 | 23.448800000000002 |  0.27 | 0.34 |
| 4284-308 |       3.4198 |            73.5304 |          1.458 | 21.023699999999998 |  0.43 | 0.29 |
| 4268-413 |        1.258 |            68.8095 |         0.3597 |            22.6789 |  0.29 | 0.33 |
#+TBLFM: $6=$4/$2;f2::$7=$5/$3;f2

*** Original files
+ [[file:ajustes_ha.dat]]
+ [[file:ajustes_nii.dat]]
+ [[file:tamagno.dat]]
*** Message from Alba [2016-01-18 Mon]
#+BEGIN_QUOTE
te mando todos los ajustes (diferenciando Ha y [NII]). En cada knot especifico
si ajusto knot junto con el core (cuando están cerca en v) o si los ajusto por
separado. También el numero total de gaussianas usadas.

Te mando también el fichero con los tamaños. Los he calculado teniendo en
cuenta la apertura utilizada y la resolución indicada en las cabeceras de cada
espectro 2D. La tercera columna indica si la redija está en vertical u
horizontal.

Por cierto, se me olvidó comentarte que hay dos knots medio conflictivos:
   4272-628 que tiene velocidad muy diferente en Ha y [NII] y quizás no esté
midiendo lo mismo en ambos
   4335-207 donde el knot y el core no se resuelven y el ajuste de lo que
considera el knot en cada linea es muy diferente. No me parece muy bueno
comparar las dos líneas

Por último el programa que uso para ajustar los parametros no da como salida
los errores de los parametros,solo el chi2.
#+END_QUOTE
** Things that are missing
+ [X] Error estimates
  + /not available/
+ [X] Sizes of knots
  + How many pixels were taken along slit?
  + Do any cross multiple slits?
    + only measured in brightest slit
+ [X] Background brightness
** Table of velocity, fwhm, flux
:PROPERTIES:
:TABLE_EXPORT_FILE: alba-knots-cleaned.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:ID:       B1C1A90E-0640-49F4-BAA6-88E9E7D0007F
:END:

+ Original data is [[file:alba_resultado_final.txt]]
+ But best to use the export of this table
  + Regenerate with (=C-c t e=)
  + [[file:alba-knots-cleaned.tab]]


|     KNOT |   V Ha | V [NII] |  W Ha | W [NII] |  F Ha |   F [NII] | NOTAS:    | [N II]/Ha |
|----------+--------+---------+-------+---------+-------+-----------+-----------+-----------|
|  050-422 | -38.91 |         | 27.06 |         |  2.14 | 7.47E-004 | [NII]=ms  |    3.5e-4 |
| 4242-458 | -20.90 |  -22.54 | 30.59 |   17.71 |  4.21 |      0.81 |           |      0.19 |
| 4244-554 | -20.02 |  -12.31 | 27.03 |   23.53 | 12.33 |     10.00 |           |      0.81 |
| 4245-742 | -61.27 |  -62.00 | 32.27 |   14.96 |  0.47 |      0.12 |           |      0.26 |
| 4252-608 | -80.00 |  -82.25 | 29.17 |   19.31 |  0.99 |      0.39 |           |      0.39 |
| 4252-616 | -21.62 |  -18.73 | 28.24 |   28.24 | 10.19 |      6.39 |           |      0.63 |
| 4254-551 | -68.29 |  -68.67 | 26.12 |   17.48 |  6.41 |      1.99 |           |      0.31 |
| 4258-744 | -59.53 |  -62.18 | 33.56 |   27.97 |  2.01 |      0.58 |           |      0.29 |
| 4260-624 | -58.57 |  -60.41 | 35.15 |   33.22 | 18.63 |      8.11 |           |      0.44 |
| 4261-633 | -59.68 |  -60.86 | 31.01 |   26.47 |  6.14 |      3.27 |           |      0.53 |
| 4261-656 | -58.25 |  -64.69 | 25.29 |   18.58 |  0.49 |      0.16 |           |      0.33 |
| 4263-460 | -31.88 |  -32.05 | 32.94 |   23.53 |  1.36 |      0.24 |           |      0.18 |
| 4265-637 | -53.71 |  -55.21 | 37.65 |   21.99 |  6.00 |      1.80 |           |      0.30 |
| 4266-615 | -57.04 |  -57.68 | 31.83 |   23.17 | 18.44 |      5.78 |           |      0.31 |
| 4268-413 | -63.15 |  -64.41 | 28.02 |   16.38 |  1.26 |      0.36 |           |      0.29 |
| 4272-545 | -71.89 |  -73.00 | 28.32 |   19.28 |  3.66 |      0.98 |           |      0.27 |
| 4272-628 | -65.06 |  -75.11 | 32.94 |   18.28 |  0.48 |      0.08 |           |      0.17 |
| 4273-625 | -53.35 |  -55.76 | 28.24 |   27.47 |  2.52 |      0.78 |           |      0.31 |
| 4274-439 | -37.60 |  -44.98 | 28.24 |   12.59 |  1.14 |      0.14 |           |      0.12 |
| 4277-539 | -77.01 |  -77.05 | 28.24 |   14.41 |  0.98 |      0.21 |           |      0.21 |
| 4280-551 | -64.00 |  -64.11 | 30.26 |   20.76 |  5.47 |      1.69 |           |      0.31 |
| 4280-658 | -61.88 |  -63.76 | 28.24 |   24.65 |  0.42 |      0.09 |           |      0.21 |
| 4284-308 | -36.73 |  -39.87 | 28.24 |   20.12 |  3.42 |      1.46 |           |      0.43 |
| 4285-444 | -60.10 |  -60.23 | 25.87 |   22.01 |  0.59 |      0.11 |           |      0.19 |
| 4289-524 | -71.51 |  -73.52 | 25.16 |   17.25 |  0.82 |      0.22 |           |      0.27 |
| 4292-323 | -54.91 |  -56.00 | 28.58 |   23.53 |  3.30 |      2.02 |           |      0.61 |
| 4293-557 | -40.98 |  -41.06 | 32.94 |   18.83 |  1.11 |      0.22 |           |      0.20 |
| 4320-626 | -64.73 |  -65.89 | 27.27 |   12.33 |  1.54 |      0.24 |           |      0.16 |
| 4331-453 | -30.21 |  -32.39 | 28.24 |   18.83 |  1.63 |      0.31 |           |      0.19 |
| 4332-401 | -70.99 |  -69.93 | 15.27 |   13.83 |  0.15 |      0.06 |           |      0.40 |
| 4335-207 | -19.36 |  -21.52 | 27.50 |   15.61 | 94.23 |     22.59 |           |      0.24 |
| 4359-521 | -37.00 |  -38.58 | 31.18 |   16.00 |  1.90 |      0.31 |           |      0.16 |
| 4374-457 | -20.08 |  -16.17 | 23.53 |   18.86 |  1.84 |      0.48 |           |      0.26 |
| 4376-329 | -63.16 |  -66.86 | 32.94 |   19.15 |  0.52 |      0.09 |           |      0.17 |
| 4377-526 | -70.96 |  -71.50 | 28.24 |   13.30 |  0.52 |      0.06 |           |      0.12 |
| 4378-414 | -67.13 |  -69.64 | 31.14 |   17.17 |  0.44 |      0.05 |           |      0.11 |
| 4378-434 | -68.21 |         | 28.24 |         |  0.22 |      0.01 | [NII]=FBL |      0.05 |
| 4383-411 | -60.48 |  -62.30 | 37.26 |   11.48 |  0.39 |      0.04 |           |      0.10 |
| 4385-243 | -77.62 |         | 31.38 |         |  0.33 |      0.02 | [NII]=FBL |      0.06 |
| 4389-327 | -63.34 |         | 34.58 |         |  0.59 | 5.68E-004 | [NII]=ms  |    9.6e-4 |
| 4396-541 | -90.00 |  -91.25 | 23.59 |   13.72 |  0.87 |      0.10 |           |      0.11 |
| 4402-400 | -75.26 |  -78.97 | 23.53 |   13.15 |  0.54 |      0.10 |           |      0.19 |
| 4405-349 | -78.13 |         | 20.73 |         |  0.14 | 7.93E-004 | [NII]=ms  |    5.7e-3 |
| 4406-330 | -74.93 |  -77.70 | 23.53 |   10.03 |  0.24 |      0.03 |           |      0.13 |
| 4407-229 | -78.61 |  -80.39 | 25.93 |   11.72 |  0.19 |      0.03 |           |      0.16 |
| 4409-243 | -67.17 |         | 22.16 |         |  0.18 | 5.41E-004 | [NII]=ms  |    3.0e-3 |
| 4456-324 | -68.95 |         | 19.23 |         |  0.74 | 8.39E-004 | [NII]=ms  |    1.1e-3 |
#+TBLFM: $9=$7/$6;f2::

** Key to Notes column
+ [NII]=FBL :: Flujo bajo línea
+ [NII]=ms :: ¿límite superior?


** Graphs of Alba's knots
*** Plot Ha width versus [N II] width
#+BEGIN_SRC python
import numpy as np
from matplotlib import pyplot as plt
from astropy.table import Table
import seaborn as sns
tab = Table.read('alba-knots-cleaned.tab',
                 format='ascii', delimiter='\t',
)
figfile = 'alba-knots-widths.pdf'
sns.set_palette("Oranges_r")
fig, ax = plt.subplots(1, 1)
w0 = np.linspace(0.0, 40.0)
for w1 in [0, 10, 20, 30]:
    ax.plot(w0, np.sqrt(w0**2 + w1**2), label='W(therm) = {} km/s'.format(w1))
s = 10 + 30*np.sqrt(tab['F Ha'])
# cmap = sns.diverging_palette(240, 10, as_cmap=True)
cmap = 'coolwarm'
ax.scatter(tab['W [NII]'], tab['W Ha'], s=s, c=tab['V Ha'], vmin=-90, vmax=0, cmap=cmap, zorder=100, alpha=0.8)
ax.set_xlim(0, 40)
ax.set_ylim(0, 40)
ax.set_xlabel('[N II] FWHM, km/s')
ax.set_ylabel('Ha FWHM, km/s')
ax.legend(loc='lower right')
fig.set_size_inches(6, 6)
fig.tight_layout()
fig.savefig(figfile)
#+END_SRC

#+RESULTS:
[[file:alba-knots-widths.pdf]]


* TODO Yet more datasets to look at
** Orion S horizontal slits
+ These are the =os000.fits= files from 2007-01-11
+ In [[file:~/Work/SPM2007/][file:~/Work/SPM2007/]]
+ I think these are ha+nii
** LL Ori later slits
+ [[file:~/Work/SPM2007/2009/TereReduce/bitacora::LL%20Ori]]
+ Seem to be 3 positions spm060, 064, 069
+ From 2009-01-15
+ How far N do they go?
* Final products of calibration

** Spectral images
+ =new-slits-*.fits=
** Calibrated slit spectra
+ =Calibrated/BGsub/{XX,YY}*-vhel.fits=


* DONE New general version of the slit flux calibration and astrometry
CLOSED: [2015-10-06 Tue 23:02]
+ It would be better to use the [[file:~/Work/OrionTreasury/wfi/][WFI images]] to flux calibrate the spectra
  + As well as being more reliable, this is necessary in the case of some of the LL2 slits, since the Image+slit was taken in [S II] instead of H alpha
+ We will apply it first to the LL2 slits, plus any other odd slits that are lying around
  + With the plan being to add in the original horizontal and vertical slits afterwards
+ As well as flux calibration, it will also help with the offset along the slit


** General policy for the workflow                                 :noexport:
+ The previous version had used org-babel source blocks that read directly from org-mode tables.
  - This is convenient for rapid development
  - But it makes the overall logic hard to follow
  - And hard to share with anyone not using emacs
+ So for this implementation I plan to do the following:
  1. Tangle all python scripts to files
  2. Write all data tables to files
     - Initial input table can be written as TSV from org table
     - Read in with astropy tables 

** Outline of steps

1. We use the image+slit in order to find the slit reference position
   + The image-spectrum offset along the slit has to be found iteratively through a later step
2. Compare the spectrum profile (=spec=) with a synthetic slit (=image=) on the WFI image
   + Similar to [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][Application to the vertical slits]] and [[id:6CE33437-BC17-49AA-B048-5BACCBB8C99B][Repeat for the horizontal slits]]
   + Find the =jshift= value that best matches up the profiles
   + Find brightness normalization
     + Check for calibration gradients along the slit by plotting =spec/image= against =s= (distance along slit)
       + [2015-09-08 Tue] It appears that the trends are not linear.  They tend to either curve down near the left hand edge, or curve up at the right hand edge, combined with a more linear increase from left to right
       + A cubic would probably capture the behavior well
       + [X] Fit a chebychev polynomial to the ratio
     + Check for zero point errors by plotting  =spec= against =image=
     + [X] One problem will be disentangling the above two effects, because if there is a strong systematic brightness gradient along the slit then their effects will be degenerate
       + It turns out this is not too difficult in most cases, so long as we assume that the along-slit variation is a low-order polynomial
       + Some slits have a compact region with strong brightness gradients near the middle of the slit, which allows one to clearly see if a zero-point offset is present
   + Write out the slit astrometry and flux calibration to a table, similar to how we did [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][here]] for the vertical slits and [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]] for the horizontal slits 
3. Project the calibrated spectra onto a common spatial grid
   + For different velocity ranges
     + This requires finding the heliocentric correction
   + This is what we already did for the [[id:23C29E96-4471-454E-A463-D365731119C0][vertical]] and [[id:60833550-A462-4F18-86DE-895625FF3E7A][horizontal]] slits
     + We need to generalise this slightly so we can treat any PA (maybe that will work out of the box) and both cases for the dimension order of the spectra files (Y-V, or V-Y)

** Table of all slits 
:PROPERTIES:
:TABLE_EXPORT_FILE: all-slits-input.tab
:TABLE_EXPORT_FORMAT: orgtbl-to-tsv
:ID:       38EBF0CA-1CA6-4420-A9D8-F784FEB57BCC
:END:
:LOGBOOK:
- Note taken on [2015-09-01 Tue 15:20] \\
  I haven't quite decide what is going into this table yet.  
  + It will at least have the dataset (YYYY-MM) and the ids for the image+slit and/or the spectrum.
  + Currently it also has a column for notes, so I can remember what is what.
  + Do I want to add the values if we determine them by hand?
    + Position of slit on image
    + Offset image-spectrum
    + Flux calibration
  + Or alternatively, could we determine all of those automatically?
    + Probably not
:END:
+ This does not have all the slits yet, but it will eventually (I hope)
  + [2015-09-16 Wed] Adding the original horizontal slits 
+ The Notes column is just to remind us of stuff
+ After editing, remember to export the table to file with =C-c t e=
+ [2015-09-04 Fri] Added some new columns:
  - saxis :: dimension along the slit length in IMAGE coordinates (1 for x-axis; 2 for y-axis)
    + This is checked by hand in DS9
  - islit :: pixel position of slit along the perpendicular axis (y-axis for saxis=1, x-axis for saxis=2)
    + This is measured by hand in DS9
  - shift :: pixel offset along the slit between image+slit and spectrum
    + This has to be found by trial and error (from plotting slit profile from spectrum and comparing with synthetic slit)
  - norm :: the factor we divide the spectrum by so that it is equal to the flux calibration image
    + This is for the center of the slit, since we will need to include a polynomial correction term later
    + Also found by trial and error - it does not need to be exact since any inaccuracy will get compensated by the leading term of the Chebyshev fit
  - zero :: Correction to the zero point of the spectra
    - Found by looking at the background in the ha and nii spectra, and a little bit of trial and error so that the upper graph panel of spectrum versus image passes through the origin

|   Dataset | imid |    specid | saxis | islit | shift | norm | zero | r(nii) | Notes                |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2006-02 |  326 |       324 |     2 | 283.5 |   74. | 1000 |  1.0 |    1.8 | LL2 first epoch      |
|   2006-02 |  318 |       319 |     2 | 280.0 |   78. | 3300 |    3 |    1.8 | LL2 first epoch      |
|   2006-02 |  260 |       261 |     2 | 251.4 |   55. | 3600 |    1 |    1.8 | LL2 first epoch      |
|   2006-02 |  270 |       271 |     2 | 253.5 |   60. | 6500 |    4 |    1.8 | LL2 first epoch      |
|   2006-02 |  276 |       277 |     2 | 256.0 |   60. | 7000 |    6 |    1.8 | LL2 first epoch      |
|   2006-02 |  281 |       282 |     2 | 257.7 |   64. | 3600 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  286 |       287 |     2 | 261.0 |   64. | 4000 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  291 |       292 |     2 | 262.7 |   65. | 6000 |    6 |    1.8 | LL2 first epoch      |
|   2006-02 |  296 |       297 |     2 | 267.0 |   66. | 3000 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  303 |       304 |     2 | 270.5 |   70. | 3300 |    8 |    1.8 | LL2 first epoch      |
|   2006-02 |  313 |       312 |     2 | 278.0 |   70. | 2600 |    6 |    1.8 | Image follows spec!  |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2007-01b | 2061 |    2062-c |     2 | 256.0 |   65. | 7000 |   20 |    1.8 | LL2 second epoch     |
|  2007-01b | 2037 | 2038-2040 |     2 | 249.0 |   60. | 7000 |   16 |    1.8 | LL2 second epoch     |
|  2007-01b | 2041 | 2042-2044 |     2 | 250.0 |   63. | 7000 |   21 |    1.8 | LL2 second epoch     |
|  2007-01b | 2045 | 2046-2048 |     2 | 251.5 |   64. | 6500 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2049 | 2050-2052 |     2 | 253.0 |   65. | 7000 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2053 | 2054-2056 |     2 | 254.5 |   68. | 7000 |   25 |    1.8 | LL2 second epoch     |
|  2007-01b | 2057 | 2058-2060 |     2 | 254.5 |   66. | 7000 |   25 |    1.8 | LL2 second epoch     |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2007-01 |  054 |       055 |     2 | 262.5 |   68. | 5000 |   10 |    1.9 | LL1 extreme N        |
|   2007-01 |  067 |       068 |     2 | 273.0 |   72. | 5000 |   10 |    1.9 | LL1 extreme N        |
|   2007-01 |  072 |       073 |     2 | 277.5 |   74. | 5200 |   10 |    1.8 | LL1 extreme N        |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2010-01 |  078 |   079-080 |     2 | 248.0 |   62. | 5500 |  2.0 |    1.8 | Vertical W of LL2    |
|   2010-01 |  202 |   203-204 |     2 | 233.6 |  52.5 | 6500 |  2.0 |    1.8 | Vertical Far West    |
|   2010-01 |  124 |   125-127 |     2 | 235.5 |  54.5 | 3400 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  206 |   207-208 |     2 | 234.6 |    54 | 7700 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  128 |   129-130 |     2 | 237.5 |    57 | 3500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  133 |   134-135 |     2 | 239.4 |    58 | 5500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  210 |   211-212 |     2 | 236.4 |    55 | 7000 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  137 |   138-139 |     2 | 241.3 |    60 | 3600 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  214 |   215-216 |     2 | 238.4 |    60 | 7500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  145 |   146-147 |     2 | 244.3 |    65 | 1000 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  248 |   249-250 |     2 | 254.9 |    68 | 3300 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  219 |   220-221 |     2 | 240.0 |  57.5 | 7700 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  157 |   158-159 |     2 | 252.2 |    65 | 1600 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  236 |   237-238 |     2 | 247.0 |    63 | 7200 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  240 |   241-242 |     2 | 249.5 |    65 | 5500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  244 |   245-246 |     2 | 251.6 |    64 | 4500 |   2. |    1.8 | Vertical Far West    |
|   2010-01 |  252 |   253-254 |     2 | 258.2 |    69 | 5700 |   2. |    1.8 | Vertical Far West    |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2013-02 |  024 |       025 |     1 | 465.0 |  -73. | 1500 |  4.5 |    1.8 | Horizontal LL2       |
|   2013-02 |  165 |   166-167 |     1 | 468.5 |  -67. | 3500 |  5.5 |    1.8 | Horizontal West      |
|   2013-02 |  169 |   170-171 |     1 | 468.5 |  -65. | 3200 |  5.5 |    1.8 | Horizontal West      |
|   2013-02 |  237 |   238-239 |     1 | 467.0 |  -74. | 4500 |    7 |    1.8 | Horizontal West      |
|   2013-02 |  232 |   233-234 |     1 | 468.5 |  -78. | 4800 |    9 |    1.8 | Horizontal West      |
|   2013-02 |  226 |   227-228 |     1 | 468.5 |  -75. | 4200 |   10 |    1.8 | Horizontal West      |
|   2013-02 |  149 |   150-151 |     1 | 468.0 |  -70. | 3600 |  3.5 |    1.8 | Horizontal West      |
|   2013-02 |  154 |   155-156 |     1 | 467.2 |  -67. | 3600 |  4.5 |    1.8 | Horizontal West      |
|   2013-02 |  159 |   160-161 |     1 | 467.5 |  -70. | 3600 |  5.0 |    1.8 | Horizontal West      |
|   2013-02 |  033 |   034-035 |     1 | 467.0 |  -70. | 3800 |  6.0 |    1.8 | Horizontal West      |
|   2013-02 |  029 |   030-031 |     1 | 465.2 |  -76. | 3800 |  4.5 |    1.8 | Horizontal West      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2013-12 |  116 |   117-118 |     1 | 395.0 | -160. |  400 | 10.5 |    1.8 | Horizontal below LL2 |
|   2013-12 |  086 |       088 |     1 | 404.0 | -155. |  300 | 11.0 |    1.8 | W of HH269           |
|   2013-12 |  090 |       089 |     1 | 404.5 | -160. |  400 | 10.5 |    1.8 | Image follows spec   |
|   2013-12 |  102 |   103-104 |     1 | 402.5 | -150. |  350 | 10.5 |    1.8 | V faint image        |
|   2013-12 |  111 |   112-113 |     1 | 400.0 | -145. |  400 | 10.5 |    1.8 | W of HH269           |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|   2015-02 | 0003 |      0004 |     1 | 463.0 |  -80. | 1300 |    0 |    1.8 |                      |
|   2015-02 | 0012 |      0013 |     1 | 464.0 |  -60. | 1300 |    0 |    1.8 |                      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2007-sii |  063 |       065 |     2 | 269.0 |  70.5 | 5000 |    0 |   1.17 | [S II] LL1           |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
|  2010-sii |  078 |       082 |     2 |   248 |    63 | 5500 |    0 |   1.17 | [S II] west          |
|  2010-sii |  085 |       086 |     2 | 252.7 |    66 | 5500 |    0 |   1.17 |                      |
|  2010-sii |  224 |       225 |     2 |   243 |    61 | 7700 |    0 |   1.17 |                      |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
| 2007-oiii |  059 |       060 |     2 |   265 |    71 | 5000 |    0 |    1.6 | [O III] LL1          |
|-----------+------+-----------+-------+-------+-------+------+------+--------+----------------------|
| 2010-oiii |  224 |       228 |     2 |   243 |    62 | 7700 |    0 |    1.6 | [O III] west         |


Run it for a single slit
#+BEGIN_SRC sh
python slit-calibration.py 2015-02 # 1>&2
#+END_SRC

#+RESULTS:
#+begin_example
<Row 54 of table
 values=(2015-02, 0003, 0004, 1, 463.0, -80.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0003-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0004o_sub-nii.fits
iarr = [  80.  180.  280.  380.  480.  580.  680.  780.  880.  980.] jarr = [ 463.  463.  463.  463.  463.  463.  463.  463.  463.  463.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76300486, -5.38914842), (83.75317756, -5.38920898),
     (83.74335024, -5.38926939), (83.73352293, -5.38932964),
     (83.72369561, -5.38938973), (83.71386829, -5.38944967),
     (83.70404097, -5.38950944), (83.69421365, -5.38956906),
     (83.68438632, -5.38962852), (83.674559, -5.38968782)]>
Binning along slit: image = 2 spectrum = 2
[ 83.7629988   83.75317149  83.74334418  83.73351686  83.72368954
  83.71386222  83.7040349   83.69420758  83.68438026  83.67455293] [-5.3891432  -5.38920377 -5.38926417 -5.38932442 -5.38938451 -5.38944445
 -5.38950422 -5.38956384 -5.3896233  -5.38968261]
[ 4255.  4403.  4551.  4699.  4847.  4995.  5143.  5291.  5439.  5587.] [ 5222.  5221.  5220.  5219.  5218.  5218.  5217.  5216.  5215.  5214.]
Wav: [6559.29, 6566.29] Pixel: [  12.45186057  134.32298985]
Wav: [6579.95, 6586.95] Pixel: [  10.14579358  132.01692287]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2                c3       
    -------------- ---------------- ---------------- -----------------
    0.968088496551 -0.0353020238319 -0.0368421106332 0.000390521891842
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.7629988, -5.3891432), (83.75317148, -5.389203),
     (83.74334417, -5.38926263), (83.73351686, -5.38932211),
     (83.72368954, -5.38938143), (83.71386223, -5.3894406),
     (83.70403492, -5.3894996), (83.6942076, -5.38955845),
     (83.6843803, -5.38961714), (83.67455299, -5.38967568)]>
Displacements in arcsec: [  8.58749764e-12   2.77185864e-03   5.54373697e-03   8.31565447e-03
   1.10876306e-02   1.38596848e-02   1.66318366e-02   1.94041055e-02
   2.21765108e-02   2.49490722e-02]
<Row 55 of table
 values=(2015-02, 0012, 0013, 1, 464.0, -60.0, 1300, 0.0, 1.8, --)
 dtype=[('Dataset', '<U8'), ('imid', '<U4'), ('specid', '<U9'), ('saxis', '<i8'), ('islit', '<f8'), ('shift', '<f8'), ('norm', '<i8'), ('zero', '<f8'), ('r(nii)', '<f8'), ('Notes', '<U20')]>
~/Dropbox/SPMFEB15/archivos/spm0012-ardec.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-ha.fits
~/Dropbox/SPMFEB15/archivos/spm0013o_sub-nii.fits
iarr = [  60.  160.  260.  360.  460.  560.  660.  760.  860.  960.] jarr = [ 464.  464.  464.  464.  464.  464.  464.  464.  464.  464.]
coords = <SkyCoord (FK5: equinox=J2000.000): (ra, dec) in deg
    [(83.76323814, -5.3929956), (83.75342282, -5.39306366),
     (83.7436075, -5.39313156), (83.73379217, -5.3931993),
     (83.72397685, -5.39326688), (83.71416152, -5.39333431),
     (83.70434619, -5.39340158), (83.69453086, -5.39346869),
     (83.68471553, -5.39353565), (83.6749002, -5.39360244)]>
Binning along slit: image = 2 spectrum = 2
[ 83.76323207  83.75341675  83.74360143  83.73378611  83.72397078
  83.71415545  83.70434012  83.69452479  83.68470946  83.67489413] [-5.39299038 -5.39305844 -5.39312634 -5.39319408 -5.39326167 -5.39332909
 -5.39339636 -5.39346348 -5.39353043 -5.39359723]
[ 4252.  4399.  4547.  4695.  4843.  4991.  5138.  5286.  5434.  5582.] [ 5164.  5163.  5162.  5161.  5160.  5159.  5158.  5157.  5156.  5155.]
Wav: [6559.29, 6566.29] Pixel: [  13.23643219  135.38568331]
Wav: [6579.95, 6586.95] Pixel: [   3.75122191  125.90047303]
Model: Chebyshev1D
Inputs: ('x',)
Outputs: ('y',)
Model set size: 1
Degree: 3
Parameters:
          c0              c1               c2               c3      
    -------------- ---------------- ---------------- ---------------
    0.910890984261 -0.0345993965867 -0.0231613499696 0.0155135592095
Saving ha calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
Saving nii calibrated spectrum
New coords: <SkyCoord (ICRS): (ra, dec) in deg
    [(83.76323207, -5.39299038), (83.75341675, -5.39305767),
     (83.74360142, -5.3931248), (83.7337861, -5.39319178),
     (83.72397078, -5.39325859), (83.71415545, -5.39332525),
     (83.70434013, -5.39339175), (83.69452481, -5.39345809),
     (83.68470949, -5.39352428), (83.67489417, -5.39359031)]>
Displacements in arcsec: [  2.28999937e-11   2.76707470e-03   5.53416590e-03   8.30128974e-03
   1.10684626e-02   1.38357006e-02   1.66030200e-02   1.93704370e-02
   2.21379680e-02   2.49056291e-02]
#+end_example




*** Different binning between image and spectrum
+ Note that binning along the slit axis differs between image+slit and spectrum for these 2013-12 datasets:
  + 086
  + 090
  + 102
  + 111
+ It is x2 for the image+slit, but x3 for the spectrum
+ This is now dealt with in the [[id:1D9200A9-45BA-4128-894B-4D4DF84FC2F2][find_slit_coords]] function


*** DONE Allow for offsets perpendicular to slit
CLOSED: [2015-10-06 Tue 23:02]
+ In some cases, the pointing may have drifted in between the image+slit exposure and the spectrum exposure
+ I suspect this is happening with the 2013-12 spectra at least
+ [2015-10-06 Tue] *Cancel* this since it is not that important
*** DONE Problems with the flux zero-point of the spectra
CLOSED: [2015-09-10 Thu 18:00]
:LOGBOOK:
CLOCK: [2015-09-10 Thu 10:37]--[2015-09-10 Thu 18:00] =>  7:23
:END:
+ The original way I was dealing with this was to use the =zero= column in the table to finesse things by hand so that the "calib image" versus "integrated spectrum" plot goes through the origin
  + However, I don't like this approach because there is no check that the "continuum" parts of the spectrum (in between the emission lines) still have a sensible value (at the very least, non-negative!)
+ We can do better.  By looking at vignetted edge of the untrimmed spectra exposures, we can see whether the "continuum" values are real continuum or not.
  + In many cases, it is obvious that there is still a residual constant value that needs to be subtracted
  + For instance, with 2013-12-086 dataset:
    + [[file:~/Dropbox/papers/LL-Objects/SPMDIC13/][file:~/Dropbox/papers/LL-Objects/SPMDIC13/]]
    + The raw spectrum is spm088.fits
    + The reduced spectrum is spm088_bcrx.fits, spec088-ha.fits, spec088-nii.fits
    + Unfortunately, they are not all the same
      + spm088_bcrx.fits looks like its flux zero point is 16
      + spec088-ha.fits looks like its flux zero point is 11
      + spec088-nii.fits looks like its flux zero point is 12
    + We will try using 11.0
+ So plan is to re-use the =zero= column to be the value that we subtract from the ha and nii spectra pixels *before* summing in wavelength.
+ This works more or less well for 2013-12 and 2010
+ [X] Linear trend in zero-point for 2007-01 LL1 slits
  + The "continuum" goes negative at the N end of the slits
  + This would be best dealt with by modifying the images before using them
  + The problem is seen in all the spectra - it seems to be due to having subtracted the image in superbias.fits, which is obviously wrong, since it has a linear gradient from 1150 to 1230, which is a delta of 80
    + I thing the real value should be about 1160 to 1170
    + So if we map the y-axis onto [0, 1], then we need to add 80*y - 10
    + This is done [[id:4335A38B-52C8-4F0E-8F92-308DC4DBC4F6][below]]
+ Now that we have fixed up the LL1 slits, we still get reasonable calibrations, even when we determine =zero= directly from the spectral images
  + The only problem is that the Bright Bar is slightly less prominent on the spectra than it is on the calibration image
  + It can be largely fixed by pushing =zero= up to about 10
  + This is fine for Ha, but is a bit low for nii in the S end of the slit
  + But the high vel components are in the N end and not seen in nii, so it doesn't matter

**** Script to fix the 2007 bias subtractions
:PROPERTIES:
:dir:      /Users/will/Work/SPM2007/Reduced
:ID:       4335A38B-52C8-4F0E-8F92-308DC4DBC4F6
:END:
#+BEGIN_SRC python
import glob
import numpy as np
from astropy.io import fits
fnlist = glob.glob('spec*-ha.fits') + glob.glob('spec*-nii.fits')
for fn in fnlist:
    print(fn)
    hdu, = fits.open(fn)
    ny, nx = hdu.data.shape
    y = np.linspace(0.0, 1.0, ny).reshape((ny, 1))
    hdu.data += 0.5*(80*y - 5.0)
    hdu.writeto(fn.replace('.fits', '-fix.fits'), clobber=True)
#+END_SRC

#+RESULTS:
#+begin_example
spec014-ha.fits
spec016-ha.fits
spec021-ha.fits
spec025-ha.fits
spec029-ha.fits
spec036-ha.fits
spec040-ha.fits
spec044-ha.fits
spec055-ha.fits
spec068-ha.fits
spec073-ha.fits
spec078-ha.fits
spec016-nii.fits
spec021-nii.fits
spec025-nii.fits
spec029-nii.fits
spec036-nii.fits
spec040-nii.fits
spec044-nii.fits
spec055-nii.fits
spec068-nii.fits
spec073-nii.fits
spec078-nii.fits
#+end_example




**** DONE Script to cut out the ha and nii spectra from the 2015 slits
CLOSED: [2015-09-11 Fri 08:32]
:PROPERTIES:
:dir:      /Users/will/Dropbox/SPMFEB15/archivos
:END:

+ We only have a lamp spectrum for the 0013 setting
  + So I calculate an offset by hand for the 0004 exposure
  + 656.76 - 529.148 = 127.612
  + 654.275 - 525.139 = 129.136
  + Tweaked it by hand by aligning on WCS in ds9
    + Strangely, the shift was slightly different for nii and ha


#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
jwin = 160
for slitid, lineid, j0 in  [['0004', 'ha', 570], ['0004', 'nii', 930],
                            ['0013', 'ha', 440], ['0013', 'nii', 810],]:
    fn = 'spm{}o_sub.fits'.format(slitid)
    hdu, = fits.open(fn)
    hdu.data = hdu.data[j0:j0+jwin]
    hdu.header['CRPIX2'] -= j0
    # if (slitid, lineid) == ('0004', 'nii'):
    #     hdu.data *= 3.0         # forced to use weaker doublet component
    if (slitid, lineid) == ('0004', 'ha'):
        hdu.header['CRPIX2'] += 127.0
    if (slitid, lineid) == ('0004', 'nii'):
        hdu.header['CRPIX2'] += 125.0
    hdu.writeto(                                                                
        fn.replace('.fits', '-{}.fits'.format(lineid)),
        clobber=True
    )

#+END_SRC

#+RESULTS:

** Program to perform flux calibration: slit-calibration.py
:PROPERTIES:
:header-args: :tangle slit-calibration.py :comments link
:END:

*** Imports
#+name: slit-calib-imports
#+BEGIN_SRC python
import os
import sys
import numpy as np
import astropy
from astropy.table import Table
from astropy.io import fits
from astropy.wcs import WCS
from astropy.wcs.utils import pixel_to_skycoord
from matplotlib import pyplot as plt
import seaborn as sns
from astropy import units as u
from astropy.coordinates import SkyCoord
from astropy.modeling import models, fitting
#+END_SRC

*** Read in the table of all slits
+ We want the ID columns to be read as strings since they contain leading zeros in some cases, which need to be preserved
+ This was not happening automatically for the =imid= column so I use a custom converter
#+name: read-slit-table
#+BEGIN_SRC python
converters = {'imid': [astropy.io.ascii.convert_numpy(np.str)]}
tab = Table.read('all-slits-input.tab',
                 format='ascii.tab', converters=converters)
#+END_SRC

*** Fits files for the spectra and image+slit
+ These are kept in nested dicts of dicts of template formats, which are keyed
  1. By the file type (see below)
  2. By the date of observations (YYYY-MM)
     - with a suffix b to distinguish different sets from same temporada
+ The file types are:
  + fullspec :: The original full spectrum file, which includes ha and nii
    - This is only used for the flux calibration and positioning, summing up in the wavelength direction
    - [2015-09-11 Fri] /UPDATE: I don't use these any more/
    - So it doesn't matter that it isn't rectified
    - [X] Ideally it will be CR-rejected and bias-subtracted, but I am not sure I have those for all datasets
      - [2015-09-11 Fri] This wasn't important since I have ended up using the ha and nii spectra instead
    - Note that some of the datasets where two exposures are summed use a format like =117-118= for the file name for the full spectrum
    - Also note that for the 2013-02 dataset I have made symbolic links into the =WesternShocks/= folder for the full spectrum files, so that we don't have to know about the individual night folders (=150213/= and =160213/=) any more. 
  + ha :: The extracted Ha line
    - In cases where the full spectrum has form like =117-118=, then the extracted H\alpha spectrum just uses =117=
    - This is implemented in the function =find_fits_filepath()=
  + nii :: The extracted [N II] line
    - Same as for H\alpha
  + image :: The image+slit exposure
    - I only use this for finding the ra, dec of the slit center
#+name: slit-calib-filenames
#+BEGIN_SRC python
file_templates = {
    'fullspec' : {
        '2006-02': 'Work/SPM2005/pp{}.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2007-oiii': 'Work/SPM2007/Reduced/spec{}-transf.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/spm{}h.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spm{}_bcr.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spm{}_bcrx.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_bcrx.fits',
    },
    'siis' : {
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-siis.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spec{}-siis.fits',
    },
    'siil' : {
        '2007-sii': 'Work/SPM2007/Reduced/spec{}-siil.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/spec{}-siil.fits',
    },
    'oiii' : {
        '2007-oiii': 'Work/SPM2007/Reduced/spec{}-oiii.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/spec{}-oiii.fits',
    },
    'ha' : {
        '2006-02': 'Work/SPM2007/Reduced/HH505/slits/SPMha/spec{}-halpha.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}-ha.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-ha-fix.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spec{}-ha.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spec{}-ha.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spec{}-ha.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_sub-ha.fits',
    },
    'nii' : {
        '2006-02': 'Work/SPM2007/Reduced/HH505/slits/SPMnii/spec{}-nii.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spec{}-nii.fits',
        '2007-01': 'Work/SPM2007/Reduced/spec{}-nii-fix.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/spec{}-nii.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spec{}-nii.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spec{}-nii.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}o_sub-nii.fits',
    },
    'image' : {
        '2006-02': 'Dropbox/Papers/LL-Objects/feb2006/pp{}-ardec.fits',
        '2007-01b': 'Work/SPM2007/Reduced/HH505/slits/reducciones/spm{}-ardec.fits',
        '2007-01': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2007-sii': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2007-oiii': 'Work/SPM2007/Reduced/spm{}-ardec.fits',
        '2010-01': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2010-sii': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2010-oiii': 'Dropbox/SPMJAN10/reducciones/posiciones/spm{}-ardec.fits',
        '2013-02': 'Dropbox/SPMFEB13/WesternShocks/spm{}_ardec.fits',
        '2013-12': 'Dropbox/papers/LL-Objects/SPMDIC13/spm{}-ardec.fits',
        '2015-02': 'Dropbox/SPMFEB15/archivos/spm{}-ardec.fits',
    },
}

def find_fits_filepath(db, filetype):
    """Return path to the FITS file for an image or spectrum 
    """
    id_ = db['imid'] if filetype == 'image' else db['specid']
    id_ = str(id_)
    if filetype in ('ha', 'nii') and db['Dataset'] not in ['2013-12']:
        id_ = id_.split('-')[0]
    template = file_templates[filetype][db['Dataset']]
    path = template.format(id_)
    print('~/'+path)
    homedir = os.path.expanduser('~')
    return os.path.join(homedir, path)
#+END_SRC


*** Construct the synthetic slit from the reference image
:PROPERTIES:
:ID:       28077E60-1BFE-4AD4-8DDE-5C292C252564
:END:
A function to trace the profile of a slit
+ Input are arrays of RA and Dec coordinates
+ Together with the image itself and its WCS object
+ Output is an array of the profile along the slit
  + Although the function makes no assumption about the geometry of the coordinate arrays, so it doesn't /need/ to be a slit
+ [ ] Currently the output profile is simply calculated from the nearest pixel, but I have grander plans for this eventually:
  - I should construct a logical mask for each slit pixel, based on the pixel size, and then average all the image pixels for which the mask is True
  - This will be pretty slow if I am using the entire reference image array every time
  - So I should first extract a sub-image, given by the limits of the slit
#+BEGIN_SRC python
def slit_profile(ra, dec, image, wcs):
    """
    Find the image intensity for a list of positions (ra and dec)
    """
    xi, yj = wcs.all_world2pix(ra, dec, 0)
    # Find nearest integer pixel
    ii, jj = np.floor(xi + 0.5), np.floor(yj + 0.5)
    print(ra[::100], dec[::100])
    print(ii[::100], jj[::100])
    return np.array([image[j, i] for i, j in zip(ii, jj)])
#+END_SRC

The actual photometric standard image we are going to use.  This is from Massimo's ground-based program.  The pixel size is 0.238 arcsec 
#+BEGIN_SRC python
wfi_dir = '/Users/will/Work/OrionTreasury/wfi'
photom, = fits.open(os.path.join(wfi_dir, 'Orion_H_A_deep.fits'))
wphot = WCS(photom.header)
#+END_SRC


*** Find the world coordinates of each pixel along the slit 
:PROPERTIES:
:ID:       1D9200A9-45BA-4128-894B-4D4DF84FC2F2
:END:
+ [2015-09-06 Sun] To make this more useful, I will return the entire array of RA and Dec for each pixel along the slit (instead of just RA0, Dec0 for the slit center)
  + This means that the =ds= and =PA= parameters will no longer be needed, but I will leave them in anyway. 
+ Similar to what I did [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][here]] and [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]]
  + But simpler really
+ We need to find the following:
  + (=RA0=, =Dec0=) of the slit center
    + This comes from the WCS header of the image+slit, together with the =islit= and =shift= values from the [[id:38EBF0CA-1CA6-4420-A9D8-F784FEB57BCC][table above]]
  + Pixel scale along the slit =ds=
  + =PA= of the slit
+ Note that we do the conversion to ICRS frame.  Some of the earlier images are in FK4, which is 1950 epoch!
  + We fix this using =astropy.coordinates.SkyCoord= with the coordinate frame taken from the =radesys= WCS parameter. 

#+BEGIN_SRC python
def find_slit_coords(db, hdr, shdr):
    """Find the coordinates of all the pixels along a spectrograph slit

    Input arguments are a dict-like 'db' of hand-measured values (must
    contain 'saxis', 'islit' and 'shift') and a FITS headers 'hdr' from
    the image+slit exposure and 'shdr' from a spectrum exposure

    Returns a dict of 'ds' (slit pixel scale), 'PA' (slit position
    angle), 'RA' (array of RA values in degrees along slit), 'Dec'
    (array of Dec values in degrees along slit)

    """
    jstring = str(db['saxis'])  # which image axis lies along slit
    dRA_arcsec = hdr['CD1_'+jstring]*3600*np.cos(np.radians(hdr['CRVAL2']))
    dDEC_arcsec = hdr['CD2_'+jstring]*3600
    ds = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))

    # Pixel coords of each slit pixel on image (in 0-based convention)
    if jstring == '1':
        # Slit is horizontal in IMAGE coords
        ns = shdr['NAXIS1']
        iarr = np.arange(ns) - float(db['shift'])
        jarr = np.ones(ns)*float(db['islit'])
        try:
            image_binning = hdr['CBIN']
            spec_binning = shdr['CBIN']
        except KeyError:
            image_binning = hdr['CCDXBIN']
            spec_binning = shdr['CCDXBIN']

        # correct for difference in binning between the image+slit and the spectrum
        iarr *= spec_binning/image_binning
    elif jstring == '2':
        # Slit is vertical in IMAGE coords
        ns = shdr['NAXIS2']
        iarr = np.ones(ns)*float(db['islit'])
        jarr = np.arange(ns) - float(db['shift'])
        try:
            image_binning = hdr['RBIN']
            spec_binning = shdr['RBIN']
        except KeyError:
            image_binning = hdr['CCDYBIN']
            spec_binning = shdr['CCDYBIN']

        jarr *= spec_binning/image_binning
    else:
        raise ValueError('Slit axis (saxis) must be 1 or 2')

    print('iarr =', iarr[::100], 'jarr =', jarr[::100])
    # Also correct the nominal slit plate scale
    ds *= spec_binning/image_binning

    # Convert to world coords, using the native frame
    w = WCS(hdr)
    observed_frame = w.wcs.radesys.lower()
    # Note it is vital to ensure the pix2world transformation returns
    # values in the order (RA, Dec), even if the image+slit may have
    # Dec first
    coords = SkyCoord(*w.all_pix2world(iarr, jarr, 0, ra_dec_order=True),
                      unit=(u.deg, u.deg), frame=observed_frame)
    print('coords =', coords[::100])
    print('Binning along slit: image =', image_binning, 'spectrum =', spec_binning)
    # Make sure to return the coords in the ICRS frame
    return {'ds': ds, 'PA': PA,
            'RA': coords.icrs.ra.value,
            'Dec': coords.icrs.dec.value}
#+END_SRC


*** Package up the slit coordinates for use in a FITS header
:PROPERTIES:
:ID:       B59C08A8-8FE0-4A36-B55C-97CC92A25A69
:END:
We also need to create the WCS keywords so that the slit coordinates can be reconstructed from a FITS header.  The general approach is as follows: 

+ We use the standard FITS notation for axes: i, j
  + i = 1, 2, ... are the world coordinate axes
  + j = 1, 2, ... are the image (data array) coordinate axes
  + Python arrays have the order reversed
  + Reference pixel has =CRPIXj= and =CRVALi=
  + Scale is specified with =CDELTi= and =PCi_j=
    + =CDELTi= has the pixel scale in arcsec and wavelength
    + =PCi_j= just has the rotation matrix according to the PA of the slit
+ The calibrated FITS spectra will be regularized so that the image x-axis (j=1 in FITS parlance) is wavelength, and the image y-axis (j=2) is displacement along slit.
  - Any necessary transpose of the data array is done [[id:C7D141C2-85FF-427D-AF2D-DCC34B14E1A4][in the main loop]]
  - [ ] We could also have a degenerate third image axis that is perpendicular to the slit (dimension of 1 along this axis).  Is this necessary? Is it wise?
+ We use 3 world coordinate axes, even though there are only two true image axes, so we can specify the variation of both RA and Dec along the slit
  - The /provisional/ order of the axes is
    - i = 1 :: Wavelength
    - i = 2 :: RA
    - i = 3 :: Dec
  - This is to have the best mapping between the i and j axis orderings
+ We get all the wavelength info directly from the WCS of the original spectrum
  + [ ] Later, we will want to put it in velocity units, possibly as an alternate WCS axis 
+ We get the celestial coordinate info from the list of =slit_coords=
  + We convert these to =astropy.coord.SkyCoord= form and use the =separation()= and =position_angle()= methods between each pair of adjacent pixels
  + We then check that each pair has the same separation and PA as for the first pair
    + This works fine for the separations using the =np.allclose= default relative tolerance of 1e-5, but for the PAs I had to relax it to 1e-4
    + Then we use the separation to set =CDELTi= values and the PA to set elements of the =PCi_j= matrix
+ We set a load of extra WCS keywords
  + The coordinate types and units
  + The reference frame and date of observations
+ At the end, we calculate the coordinates of the slit pixels using this WCS that we have created
  + In theory these should be the same as the =slit_coords= values that were fed in
  + I see differences of order 0.01 arcsec by the end of the slit
    + Not sure why, but I'm not too worried

#+BEGIN_SRC python
def make_slit_wcs(db, slit_coords, spechdu):
    # Input WCS from original spectrum
    wspec = WCS(spechdu.header)
    wspec.fix()

    #
    # First find wavelength scale from the spectrum  
    #

    # For original spectrum, the wavelength and slit axes are 0-based,
    # but in FITS axis order instead of python access order, since
    # that is the way that that the WCS object likes to do it
    ospec_wavaxis = 2 - db['saxis']
    ospec_slitaxis = db['saxis'] - 1

    # The rules are that CDi_j is used if it is present, and only if
    # it is absent should CDELTi be used
    if wspec.wcs.has_cd():
        dwav = wspec.wcs.cd[ospec_wavaxis, ospec_wavaxis]
        # Check that the off-diagonal terms are zero
        assert(wspec.wcs.cd[0, 1] == wspec.wcs.cd[1, 0] == 0.0)
    else:
        dwav = wspec.wcs.cdelt[ospec_wavaxis]
        if wspec.wcs.has_pc():
            # If PCi_j is also present, make sure it is identity matrix
            assert(wspec.wcs.pc == np.eye(2))
    wav0 = wspec.wcs.crval[ospec_wavaxis]
    wavpix0 = wspec.wcs.crpix[ospec_wavaxis]

    #
    # Second, find the displacement scale and ref point from the slit_coords
    #
    # The slit_coords should already be in ICRS frame
    c = SkyCoord(slit_coords['RA'], slit_coords['Dec'], unit=u.deg)
    # Find vector of separations between adjacent pixels
    seps = c[:-1].separation(c[1:])
    # Ditto for the position angles
    PAs = c[:-1].position_angle(c[1:])
    # Check that they are all the same as the first one
    assert(np.allclose(seps/seps[0], 1.0))
    # assert(np.allclose(PAs/PAs[0], 1.0, rtol=1.e-4))
    # Then use the first one as the slit pixel size and PA
    ds, PA, PA_deg = seps[0].deg, PAs.mean().rad, PAs.mean().deg
    # And for the reference values too
    RA0, Dec0 = c[0].ra.deg, c[0].dec.deg

    #
    # Now make a new shiny output WCS, constructed from scratch
    #
    w = WCS(naxis=3)

    # Make use of all the values that we calculated above
    w.wcs.crpix = [wavpix0, 1, 1]
    w.wcs.cdelt = [dwav, ds, ds]
    w.wcs.crval = [wav0, RA0, Dec0]
    # PC order is i_j = [[1_1, 1_2, 1_3], [2_1, 2_2, 2_3], [3_1, 3_2, 3_3]]
    w.wcs.pc = [[1.0, 0.0, 0.0],
                [0.0, np.sin(PA), -np.cos(PA)],
                [0.0, np.cos(PA), np.sin(PA)]]

    #
    # Finally add in auxillary info
    #
    w.wcs.radesys = 'ICRS'
    w.wcs.ctype = ['AWAV', 'RA---TAN', 'DEC--TAN']
    w.wcs.specsys = 'TOPOCENT'
    w.wcs.cunit = [u.Angstrom, u.deg, u.deg]
    w.wcs.name = 'TopoWav'
    w.wcs.cname = ['Observed air wavelength', 'Right Ascension', 'Declination']
    w.wcs.mjdobs = wspec.wcs.mjdobs
    w.wcs.datfix()              # Sets DATE-OBS from MJD-OBS

    # Check the new pixel values
    npix = len(slit_coords['RA'])
    check_coords = pixel_to_skycoord(np.arange(npix), [0]*npix, w, 0)
    # These should be the same as the ICRS coords in slit_coords
    print('New coords:', check_coords[::100])
    print('Displacements in arcsec:', check_coords.separation(c).arcsec[::100])
    # 15 Sep 2015: They seem to be equal to within about 1e-2 arcsec

    return w
#+END_SRC

Unfortunately, DS9 does not understand this lovely conformant and informative WCS structure that we have devised, so we need to dumb it down:
+ Actually I don't use this any more
#+BEGIN_SRC python
def fixup4ds9(w):
    w.wcs.ctype  = ['LINEAR', 'LINEAR', 'LINEAR']
    # w.wcs.cdelt[1:] *= 3600
    # w.wcs.units[1:] = 'arcsec', 'arcsec'
    w.wcs.crval[1], w.wcs.crval[2] = 0.0, 0.0
    w.wcs.name = 'TopoWavDS9'
    return w
#+END_SRC

*** Fit Chebyshev polynomials to along-slit variation
#+BEGIN_SRC python
def fit_cheb(x, y, npoly=3, mask=None):
   """Fits a Chebyshev poly to y(x) and returns fitted y-values"""
   fitter = fitting.LinearLSQFitter()
   p_init = models.Chebyshev1D(npoly, domain=[x.min(), x.max()])
   if mask is None:
       mask = np.ones_like(x).astype(bool)
   p = fitter(p_init, x[mask], y[mask])
   print(p)
   return p(x)
#+END_SRC
*** Make some useful and pretty plots
+ Three-pane plot that we use for manually adjusting the calibration parameters
+ [2015-09-22 Tue] Add the nii/ha ratio to third pane
#+BEGIN_SRC python
sns.set_palette('RdPu_d', 3)
def make_three_plots(spec, calib, prefix, niirat=None):
    assert spec.shape == calib.shape
    fig, axes = plt.subplots(3, 1)

    vmin, vmax = 0.0, np.median(calib) + 5*calib.std()

    ypix = np.arange(len(calib))
    ratio = spec/calib
    mask = (ypix > 10.0) & (ypix < ypix.max() - 10.0) \
           & (ratio > np.median(ratio) - 2*ratio.std()) \
           & (ratio < np.median(ratio) + 2*ratio.std()) 
    try:
        ratio_fit = fit_cheb(ypix, ratio, mask=mask)
    except:
        ratio_fit = np.ones_like(ypix)

    alpha = 0.8

    # First, plot two profiles against each other to check for zero-point offsets
    axes[0].plot(calib, spec/ratio_fit, '.', alpha=alpha)
    axes[0].plot([vmin, vmax], [vmin, vmax], '-', alpha=alpha)
    axes[0].set_xlim(vmin, vmax)
    axes[0].set_ylim(vmin, vmax)
    axes[0].set_xlabel('Calibration Image')
    axes[0].set_ylabel('Corrected Integrated Spectrum')

    # Second, plot each against slit pixel to check spatial offset
    axes[1].plot(ypix, calib, alpha=alpha, label='Calibration Image')
    axes[1].plot(ypix, spec/ratio_fit, alpha=alpha, lw=1.0, label='Corrected Integrated Spectrum')
    axes[1].plot(ypix, spec, alpha=alpha, lw=0.5, label='Uncorrected Integrated Spectrum')
    axes[1].set_xlim(0.0, ypix.max())
    axes[1].set_ylim(vmin, vmax)
    axes[1].legend(fontsize='xx-small', loc='lower right')
    axes[1].set_xlabel('Slit pixel')
    axes[1].set_ylabel('Profile')

    # Third, plot ratio to look for spatial trends
    axes[2].plot(ypix, ratio, alpha=alpha)
    axes[2].plot(ypix, ratio_fit, alpha=alpha)
    if niirat is not None:
        axes[2].plot(ypix, niirat, 'b')
    axes[2].set_xlim(0.0, ypix.max())
    axes[2].set_ylim(0.0, 1.5)
    axes[2].set_xlabel('Slit pixel')
    axes[2].set_ylabel('Ratio: Spec / Calib')


    fig.set_size_inches(5, 8)
    fig.tight_layout()
    fig.savefig(prefix+'.png', dpi=300)

    return ratio_fit
#+END_SRC

*** Use command line argument to restrict which datasets are processed
+ Read a single command line argument to choose which datasets to process
  + It can be as specific as a single position:
    + E.g, 2006-02-281
  + Or all positions from one set:
    + E.g, 2007-01b
  + Or all from one year:
    + E.g, 2013
  + Or whatever
+ The purpose of this is to speed things up when iterating to find the offsets and norms
#+BEGIN_SRC python
if len(sys.argv) > 1:
    selector_pattern = sys.argv[1]
else:
    selector_pattern = ''
#+END_SRC

*** DONE Remove background and sum over wavelength across line
CLOSED: [2015-10-06 Tue 23:01]
:PROPERTIES:
:ID:       2A668A05-2A03-401C-A0D9-441821699E60
:END:
:LOGBOOK:
CLOCK: [2015-09-22 Tue 21:52]--[2015-09-28 Mon 11:53] => 134:01
:END:
+ Although in principal some of the "background" is real continuum, most of it is not
+ We can get better results by simply removing it, as I did [[id:74998E9B-988D-4378-9465-DAC5EE6E15A0][down here]]
+ But for the time being we will stick to the original simple version
#+BEGIN_SRC python
def extract_profile(data, wcs, wavrest, dw=7.0):
    data = remove_bg_and_regularize(data, wcs, wavrest)
    # pixel limits for line extraction
    lineslice = wavs2slice([wavrest-dw/2, wavrest+dw/2], wcs)
    return data[:, lineslice].sum(axis=1)
#+END_SRC

New version, adapted from what I did in the ratio section

#+BEGIN_SRC python
def wavs2slice(wavs, wcs):
    """Convert a wavelength interval `wavs` (length-2 sequence) to a slice of the relevant axis`"""
    assert len(wavs) == 2
    isT = row['saxis'] == 1
    if isT:
        _, xpixels = wcs.all_world2pix([0, 0], wavs, 0)
    else:
        xpixels, _ = wcs.all_world2pix(wavs, [0, 0], 0)
    print('Wav:', wavs, 'Pixel:', xpixels)
    i1, i2 = np.maximum(0, (xpixels+0.5).astype(int))
    return slice(min(i1, i2), max(i1, i2))

def remove_bg_and_regularize(data, wcs, wavrest, dwbg_in=7.0, dwbg_out=10.0):
    '''
    Transpose data if necessary, and then subtract off the background (blue and red of line)
    '''
    isT = row['saxis'] == 1
    # Make sure array axis order is (position, wavelength)
    if isT:
        data = data.T
    if row['Dataset'] == '2015-02':
        # Don't try this for the newest data, I already removed the BG
        return data
    # pixel limits for blue, red bg extraction
    bslice = wavs2slice([wavrest-dwbg_out/2, wavrest-dwbg_in/2], wcs)
    rslice = wavs2slice([wavrest+dwbg_in/2, wavrest+dwbg_out/2], wcs)
    # extract backgrounds on blue and red sides
    bgblu = data[:, bslice].mean(axis=1)
    bgred = data[:, rslice].mean(axis=1)
    # take weighted average, accounting for cases where the bg region
    # does not fit in the image
    weight_blu = data[:, bslice].size
    weight_red = data[:, rslice].size
    print('Background weights:', weight_blu, weight_red)
    bg = (bgblu*weight_blu + bgred*weight_red)/(weight_blu + weight_red)
    return data - bg[:, None]



#+END_SRC


**** Original version
#+BEGIN_SRC python
def extract_profile(data):
    return remove_background(data).sum(axis=wavaxis)


def remove_background(data):
    return data - row['zero']
#+END_SRC


*** Loop over the slit positions and do the stuff
:PROPERTIES:
:ID:       C7D141C2-85FF-427D-AF2D-DCC34B14E1A4
:END:
#+BEGIN_SRC python
# Emission lines included in each type of full spectrum
linesets  = {
    'sii' : ['siil', 'siis'],
    'oiii': ['oiii'],
    'default': ['ha', 'nii'],
}

restwavs = {
    'ha': 6562.79,
    'nii': 6583.45,
    'siis': 6716.44,
    'siil': 6730.816,
    'oiii': 5006.84,
}

for row in tab:
    if row['Dataset'].endswith('sii'):
        lineset = linesets['sii']
    elif row['Dataset'].endswith('oiii'):
        lineset = linesets['oiii']
    else:
        lineset = linesets['default']

    full_id = row['Dataset'] + '-' + row['imid']
    if not full_id.startswith(selector_pattern):
        continue
    print(row)
    imslitfile = find_fits_filepath(row, 'image')


    line_hdus = []
    for line_id in lineset:
        line_hdus.append(fits.open(find_fits_filepath(row, line_id))[0])

    imhdu = fits.open(imslitfile)[0]

    # World coordinates along slit
    slit_coords = find_slit_coords(row, imhdu.header, line_hdus[0].header)

    # Find synthetic profile from calibration image
    calib_profile = slit_profile(slit_coords['RA'], slit_coords['Dec'],
                                 photom.data, wphot)

    ratio = None
    if lineset == ['ha', 'nii']:
        # This part is too difficult to generalise to other lines for the moment
        hahdu, niihdu = line_hdus
        # Find actual profile along slit from spectrum
        wavaxis = row['saxis'] - 1  # This always seems to be true
        ha_profile = extract_profile(hahdu.data, WCS(hahdu.header), 6562.79)
        # Take the nii/ha calibration correction factor  from the table
        nii_profile = row['r(nii)']*extract_profile(niihdu.data, WCS(niihdu.header), 6583.45)
        spec_profile = (ha_profile+1.333*nii_profile)/row['norm']
        plt_prefix = 'plots/{:03d}-{}-calib'.format(row.index, full_id)
        ratio = make_three_plots(spec_profile, calib_profile, plt_prefix, niirat=nii_profile/ha_profile)

    #
    # Save calibrated spectra to files
    #

    for lineid, hdu in zip(lineset, line_hdus):
        restwav = restwavs[lineid]
        print('Saving', lineid, 'calibrated spectrum')
        # Apply basic calibration zero-point and scale
        hdu.data = remove_bg_and_regularize(hdu.data, WCS(hdu.header), restwav)/row['norm']
        # Regularize spectral data so that wavelength is x and pos is y
        # This is now done by the bg subtraction function

        # Apply polynomial correction along slit
        if ratio is not None:
            hdu.data /= ratio[:, None]
        # Extend in the third dimension (degenerate axis perp to slit)
        hdu.data = hdu.data[None, :, :]

        # Create the WCS object for the calibrated slit spectra
        wslit = make_slit_wcs(row, slit_coords, hdu)
        # Set the rest wavelength for this line
        wslit.wcs.restwav = (restwav*u.Angstrom).to(u.m).value
        # # Remove WCS keywords that might cause problems
        # for i in 1, 2:
        #     for j in 1, 2:
        #         kwd = 'CD{}_{}'.format(i, j)
        #         if kwd in hdu.header:
        #             hdu.header.remove(kwd) 
        # Then update the header with the new WCS structure as the 'A'
        # alternate transform
        hdu.header.update(wslit.to_header(key='A'))
        # Also save the normalization factor as a per-slit weight to use later
        hdu.header['WEIGHT'] = row['norm']

        # And better not to change the original WCS at all
        # Unless we have transposed the array, which we have to compensate for
        if row['saxis'] == 1:
            for k in ['CRPIX{}', 'CRVAL{}', 'CDELT{}', 'CD{0}_{0}']:
                hdu.header[k.format('1')], hdu.header[k.format('2')] = hdu.header[k.format('2')], hdu.header[k.format('1')] 
        # # And write a bowdlerized version that DS9 can understand as the main WCS
        # hdu.header.update(fixup4ds9(wslit).to_header(key=' '))
        calibfile = 'Calibrated/{}-{}.fits'.format(full_id, lineid)
        hdu.writeto(calibfile, clobber=True)

#+END_SRC
*** Test what is going on 
#+BEGIN_SRC python
# print(wphot.wcs)
# for row in tab:
#     print([row[x] for x in ('Dataset', 'imid', 'specid', 'Notes')])
#+END_SRC

** Run slit-calibration.py
+ For debugging we can redirect stdout to stderr with =1>&2=
  + This means that the normal output (e.g., print statements) will show up in the =*Org-Babel Error Output*= buffer 

#+BEGIN_SRC sh
python slit-calibration.py  # 1>&2
#+END_SRC



* Fix the issue with the [N II]/Ha ratio
:LOGBOOK:
CLOCK: [2015-09-20 Sun 22:00]--[2015-09-22 Tue 21:52] => 47:52
:END:

** DONE [1/1] Program to check the [N II]/Ha ratios: slit-ratio-check.py
CLOSED: [2015-09-22 Tue 13:33]
:PROPERTIES:
:header-args: :tangle slit-ratio-check.py :comments both :noweb yes
:END:
:LOGBOOK:
CLOCK: [2015-09-17 Thu 14:19]--[2015-09-17 Thu 16:19] =>  2:00
:END:
+ We want to check the individual ha and nii images we are using
+ And also double check against the full spectrum image wherever possible
*** Re-use stuff from slit-calibration.py
#+BEGIN_SRC python
  <<slit-calib-imports>>
from astropy.convolution import convolve_fft, Box1DKernel
  <<read-slit-table>>
  <<slit-calib-filenames>>
#+END_SRC
*** Convert wavelength to pixel
#+BEGIN_SRC python
def wav2pix(wav, wcs, nwav, isT):
    if isT:
        _, (xpix,) = wcs.all_world2pix([0], [wav], 0)
    else:
        (xpix,), _ = wcs.all_world2pix([wav], [0], 0)
#    print(wcs.wcs.crpix, wcs.wcs.crval, wcs.wcs.get_cdelt(), wcs.wcs.get_pc())
    print('Wav:', wav, 'Pixel:', xpix)
    return max(0, min(nwav, int(xpix+0.5)))
#+END_SRC

#+RESULTS:

*** Make a sensible WCS (even if wavelength info missing)
0.0994382022472

#+BEGIN_SRC python
wcs_extra = {
    '2007-01': (440, 6583.45, 0.1),
    '2006-02': (446, 6583.45, 0.1),
    ('2006-02', '323'): (442, 6583.45, 0.1),
    ('2006-02', '318'): (442, 6583.45, 0.1),
    ('2006-02', '260'): (491, 6583.45, 0.1),
    '2007-01b': (440, 6583.45, 0.1),
    '2010-01': (440, 6583.45, 0.1),
    '2013-02': (167, 6583.45, -0.056),
    ('2015-02', '0003'): (1015, 6583.45, 0.05775),
    ('2015-02', '0012'): (888, 6583.45, 0.05775),
}
def makeWCS(hdr, dset, imid, jwav):
    w = WCS(hdr)
    dwav = w.wcs.get_cdelt()[jwav]*w.wcs.get_pc()[jwav, jwav]
    if dwav == 1.0:
        # No WCS info from header, so fix it by hand
        extras =  wcs_extra.get((dset, imid)) or wcs_extra.get(dset)
        if w.wcs.has_cd():
            w.wcs.crpix[jwav], w.wcs.crval[jwav], w.wcs.cd[jwav, jwav] = extras
        else:
            w.wcs.crpix[jwav], w.wcs.crval[jwav], w.wcs.cdelt[jwav] = extras
        print('Fixing WCS to CRPIX = {}, CRVAL = {}, CDELT = {}'.format(*extras) )
        print('Confirmation CRPIX = {}, CRVAL = {}, CDELT = {}'.format(w.wcs.crpix[jwav],
                                                                       w.wcs.crval[jwav],
                                                                       w.wcs.get_cdelt()[jwav]) )
    return w
#+END_SRC
*** DONE Extract profile along slit for an isolated line
CLOSED: [2015-09-22 Tue 10:34]
:PROPERTIES:
:ID:       74998E9B-988D-4378-9465-DAC5EE6E15A0
:END:
#+name: extract-profile-with-bg-subtraction
#+BEGIN_SRC python
def extract_profile(hdu, wavrest, dset, imid,
                    dw=4.0, dwbg_in=6.0, dwbg_out=8.0,
                    isT=False, smooth=10):
    jwav = 1 if isT else 0
    w = makeWCS(hdu.header, dset, imid, jwav)
    # Make sure array axis order is (position, wavelength)
    data = hdu.data.T if isT else hdu.data
    nslit, nwav = data.shape
    dwav = w.wcs.get_cdelt()[jwav]*w.wcs.get_pc()[jwav, jwav]
    sgn = np.sign(dwav)         # Need to take slices backwards if this is negative
    print('Check: wavrest = {}, dwav = {}, nslit = {}, nwav = {}'.format(wavrest, dwav, nslit, nwav))
    # pixel limits for line extraction
    i1 = wav2pix(wavrest-dw/2, w, nwav, isT)
    i2 = wav2pix(wavrest+dw/2, w, nwav, isT)
    # pixel limits for blue bg extraction
    iblu1 = wav2pix(wavrest-dwbg_out/2, w, nwav, isT)
    iblu2 = wav2pix(wavrest-dwbg_in/2, w, nwav, isT)
    # pixel limits for red bg extraction
    ired1 = wav2pix(wavrest+dwbg_in/2, w, nwav, isT)
    ired2 = wav2pix(wavrest+dwbg_out/2, w, nwav, isT)
    print(iblu1, iblu2, i1, i2, ired1, ired2)
    # extract backgrounds on blue and red sides
    bgblu = data[:, iblu1:iblu2:sgn].mean(axis=1)
    bgred = data[:, ired1:ired2:sgn].mean(axis=1)
    # take weighted average, accounting for cases where the bg region
    # does not fit in the image
    weight_blu = data[:, iblu1:iblu2:sgn].size
    weight_red = data[:, ired1:ired2:sgn].size
    bg = (bgblu*weight_blu + bgred*weight_red)/(weight_blu + weight_red)
    data -= bg[:, None]

    profile = data[:, i1:i2:sgn].sum(axis=1)
    if smooth is not None:
        profile = convolve_fft(profile, Box1DKernel(smooth))
    return profile
#+END_SRC
*** Find the celestial coordinates along the slit by using the WCS of the calibrated spectrum
#+BEGIN_SRC python
def slit_coords_from_wcs(w, isT, nslit):
    """Input arguments: `w` a WCS object with 3 dimensions and i axis
order (wav, ra, dec) and with j axis order (wav, parallel, perp);
`isT` flag that is True for horizontal slits; `nslit`, is number of
pixels along the slit.  Returns: `coords`, `coord_label` where `coord`
is array of major coordinate for each slit pixel and `coord_label` is
its coordinate name (RA or Dec)

    """
    # Note that j axis order is always wavelength, then along slit,
    # then across slit
    wav, ra, dec = w.all_pix2world([0]*nslit, range(nslit), [0]*nslit, 0)
    if isT:
        # Slit axis mainly along RA
        coord_label = w.wcs.cname[1]
        coords = ra
    else:
        # Slit axis mainly along Dec
        coord_label = w.wcs.cname[2]
        coords = dec
    print('Major coordinate:', coord_label)
    print(coords[::100])
    return coords, coord_label
#+END_SRC
*** Loop over all the slits and check the ratios
#+BEGIN_SRC python
datasets = set(tab['Dataset'])
MAXLINES = 18
sns.set_palette("deep", 6)
# sns.set_palette(sns.husl_palette(MAXLINES//3, l=0.4))
# sns.set_palette(sns.diverging_palette(10, 220, sep=80, n=MAXLINES/2, center='dark'))
ratio_types = 'nii-ha', 'nii-ha-full', 'nii-nii-full'
fig_ax_dict = {(ds, rtype): plt.subplots(1, 1)
               for ds in datasets for rtype in ratio_types}
def get_plot_dict(iline):
    """Lines get thicker and fainter as iline increases"""
    x = iline/MAXLINES
    return {"lw": 0.8 + 1.2*x, "alpha": 1.0 - 0.6*x}

for row in tab:
    print(row['Dataset'], row['imid'], row['specid'])
    full_id = row['Dataset'] + '-' + row['imid']
    specfile = find_fits_filepath(row, 'fullspec')
    hafile = find_fits_filepath(row, 'ha')
    niifile = find_fits_filepath(row, 'nii')
    calibfile = 'Calibrated/{}-{}.fits'.format(full_id, 'ha')
    spechdu = fits.open(specfile)[0]
    hahdu = fits.open(hafile)[0]
    niihdu = fits.open(niifile)[0]
    calhdu = fits.open(calibfile)[0]
    calw = WCS(calhdu.header, key='A')

    isT = row['saxis'] == 1
    dset = row['Dataset']
    imid = row['imid']

    # First use the extracted ha and nii spectra, plotted against RA or Dec
    ha = extract_profile(hahdu, 6562.79, dset, imid, isT=isT)
    nii = extract_profile(niihdu, 6583.45, dset, imid, isT=isT)
    fig, ax = fig_ax_dict[(dset, 'nii-ha')]
    coords, coord_label = slit_coords_from_wcs(calw, isT, len(ha))
    ax.plot(coords, nii/ha, label=str(row['imid']), **get_plot_dict(len(ax.lines)))
    ax.set_xlabel(coord_label)
    if coord_label == 'Declination':
        ax.set_xlim(-5.51, -5.33)
    else:
        ax.set_xlim(83.85, 83.55)  # RA should increase right-to-left

    # Then use the full spectrum, just plotted against pixel
    ha = extract_profile(spechdu, 6562.79, dset, imid, isT=isT)
    nii = extract_profile(spechdu, 6583.45, dset, imid, isT=isT)
    niib = extract_profile(spechdu, 6548.05, dset, imid, isT=isT)
    fig, ax = fig_ax_dict[(dset, 'nii-ha-full')]
    ax.plot(nii/ha, label=str(row['imid']), **get_plot_dict(len(ax.lines)))
    fig, ax = fig_ax_dict[(dset, 'nii-nii-full')]
    ax.plot(niib/nii, label=str(row['imid']), **get_plot_dict(len(ax.lines)))


for (ds, rtype), (fig, ax) in fig_ax_dict.items():
    ax.legend()
    ax.set_ylim(0.0, 0.5)
    if not rtype == 'nii-ha':
        ax.set_xlabel('Pixel')
    if 'ha' in rtype:
        ax.set_ylabel('6583 / 6563')
    else:
        ax.set_ylabel('6548 / 6583')
    fig.savefig('plots/{}-check-{}.png'.format(rtype, ds), dpi=300)
#+END_SRC

#+RESULTS:

** Check the pixel bounds for bg and line
*** Script to check the grating angles and other observational parameters
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: observational-parameters
#+BEGIN_SRC python
  <<slit-calib-imports>>
  <<read-slit-table>>
  <<slit-calib-filenames>>
outtab = [['ID', 'Spec', 'Date', 'Detector', 'Grating', 'Aperture', 'Gain'], None]
for row in tab:
    full_id = row['Dataset'] + '-' + row['imid']
    specfile = find_fits_filepath(row, 'fullspec')
    hdr = fits.open(specfile)[0].header
    outtab.append([full_id, row['specid'], hdr.get('DATE-OBS'),
                   hdr.get('DETECTOR') or hdr.get('CAMERA'),
                   hdr.get('APERTURE'), hdr.get('GRATING'), hdr.get('GAIN')])
#+END_SRC

#+RESULTS: observational-parameters
|            ID |      Spec |       Date | Detector | Grating     | Aperture | Gain |
|---------------+-----------+------------+----------+-------------+----------+------|
|   2006-02-326 |       324 | 2006-02-05 | SITE3    | 150 microns |      -11 |    4 |
|   2006-02-318 |       319 | 2006-02-05 | SITE3    | 150 microns |      -11 |    4 |
|   2006-02-260 |       261 | 2006-02-05 | SITE3    | 150 microns |       -7 |    4 |
|   2006-02-270 |       271 | 2006-02-05 | SITE3    | 150 microns |       -4 |    4 |
|   2006-02-276 |       277 | 2006-02-05 | SITE3    | 150 microns |       -4 |    4 |
|   2006-02-281 |       282 | 2006-02-05 | SITE3    | 150 microns |       -6 |    4 |
|   2006-02-286 |       287 | 2006-02-05 | SITE3    | 150 microns |       -7 |    4 |
|   2006-02-291 |       292 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-296 |       297 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-303 |       304 | 2006-02-05 | SITE3    | 150 microns |       -8 |    4 |
|   2006-02-313 |       312 | 2006-02-05 | SITE3    | 150 microns |      -10 |    4 |
| 2007-01b-2061 |    2062-c | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2037 | 2038-2040 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2041 | 2042-2044 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2045 | 2046-2048 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2049 | 2050-2052 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2053 | 2054-2056 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
| 2007-01b-2057 | 2058-2060 | 2007-01-13 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-054 |       055 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-067 |       068 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2007-01-072 |       073 | 2007-01-10 | SITE3    | 150 microns |        0 |    4 |
|   2010-01-078 |   079-080 | 2010-01-15 | SITE3    | 150 micron  |       -8 |    4 |
|   2010-01-202 |   203-204 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-124 |   125-127 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-206 |   207-208 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-128 |   129-130 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-133 |   134-135 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-210 |   211-212 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-137 |   138-139 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-214 |   215-216 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-145 |   146-147 | 2010-01-16 | SITE3    | 150 micron  |       -1 |    4 |
|   2010-01-248 |   249-250 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-219 |   220-221 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-157 |   158-159 | 2010-01-16 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-236 |   237-238 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-240 |   241-242 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-244 |   245-246 | 2010-01-17 | SITE3    | 150 micron  |        1 |    4 |
|   2010-01-252 |   253-254 | 2010-01-17 | SITE3    | 150 micron  |        0 |    4 |
|   2013-02-024 |       025 | 2013-02-16 | e2vm2    | 70 micron   |       -4 |  2.2 |
|   2013-02-165 |   166-167 | 2013-02-18 | e2vm2    | 150 micron  |       13 |  2.2 |
|   2013-02-169 |   170-171 | 2013-02-18 | e2vm2    | 150 micron  |       10 |  2.2 |
|   2013-02-237 |   238-239 | 2013-02-19 | e2vm2    | 150 micron  |       11 |  2.2 |
|   2013-02-232 |   233-234 | 2013-02-19 | e2vm2    | 150 micron  |        9 |  2.2 |
|   2013-02-226 |   227-228 | 2013-02-19 | e2vm2    | 150 micron  |        9 |  2.2 |
|   2013-02-149 |   150-151 | 2013-02-18 | e2vm2    | 150 micron  |        4 |  2.2 |
|   2013-02-154 |   155-156 | 2013-02-18 | e2vm2    | 150 micron  |        7 |  2.2 |
|   2013-02-159 |   160-161 | 2013-02-18 | e2vm2    | 150 micron  |        8 |  2.2 |
|   2013-02-033 |   034-035 | 2013-02-16 | e2vm2    | 150 micron  |       -5 |  2.2 |
|   2013-02-029 |   030-031 | 2013-02-16 | e2vm2    | 150 micron  |       -4 |  2.2 |
|   2013-12-116 |   117-118 | 2013-12-11 | e2vm2    | 150         |        0 |  2.2 |
|   2013-12-086 |       088 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-090 |       089 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-102 |   103-104 | 2013-12-11 | e2vm2    | 150         |       -2 |  2.2 |
|   2013-12-111 |   112-113 | 2013-12-11 | e2vm2    | 150         |        0 |  2.2 |
|  2015-02-0003 |      0004 | 2015-02-03 | e2vm2    | 70 microns  |        9 |  2.2 |
|  2015-02-0012 |      0013 | 2015-02-03 | e2vm2    | 70 microns  |        2 |  2.2 |
*** 2006-02 dataset
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Work/SPM2005/pp324.fits
#+END_SRC

+ Measurements of X at top of image for blue component of 6583
+ Pixel difference between 6583 and 6548 is 356 => dwav = 0.1
+ A ::
  + X = 442
  + Grating = -11
  + 324, 319
+ B :: 
  + X = 491
  + Grating = -7
  + 261
+ C ::
  + X = 446
  + Grating = -4, -8, -7 (!!!), -10
    + 287 has grating of -7, which is the same as 261
    + but the position of the spectrum on the chip is the same as for all the others
    + So we can't use the Grating value for anything
  + 271, 277, 282, 287, 292, 297, 304, 312


*** 2007-01b dataset
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Work/SPM2007/Reduced/HH505/slits/reducciones/spec2058-2060.fits
#+END_SRC
+ All the same
+ X = 440
+ 2062, 2038, 2042, 2046, 2050, 2054, 2058
+ Grating = 0 


*** 2007-01 dataset
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Work/SPM2007/Reduced/spec055-transf.fits
#+END_SRC
+ All the same
+ X = 440



*** 2010-01 dataset
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Dropbox/SPMJAN10/reducciones/spm079-080h.fits
#+END_SRC
+ Only tiny changes in position between X=440 and X=443

*** 2013-02
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Dropbox/SPMFEB13/WesternShocks/spm025_bcr.fits
#+END_SRC
+ dwav = -0.056
+ Y = 167 (6583), Y = 799 (6548)
+ Changes to Y = 165 in 238, 233


*** 2013-12
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Dropbox/papers/LL-Objects/SPMDIC13/spm112-113_bcrx.fits
#+END_SRC
+ dwav = 0.05664
+ Y = 843 (6583), Y = 218 (6548)
+ But this already has a decent WCS


*** 2015-02
#+BEGIN_SRC sh
xpaset -p ds9 fits ~/Dropbox/SPMFEB15/archivos/spm0013o_bcrx.fits
#+END_SRC
+ 0004 ::
  + Y = 1015 (6583), Y = 402 (6548)
  + dwav = 0.05775
+ 0013 ::
  + Y = 888 (6583), Y = 271 (6548)

*** Looking at the calibrated spectra
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/Calibrated/2006-02-303-ha.fits
#+END_SRC

So it seems like all the trouble was due to differences in the zero-level between the nii and the ha spectra! 

** Run slit-ratio-check.py
#+BEGIN_SRC sh
python slit-ratio-check.py # 1>&2
#+END_SRC







** Looking for more external constraints on the [N II]/Ha ratios
We have the ODH values, but they are for large areas.  We could do with some actual images of the [N II]/Ha ratio.


*** WFPC2 mosaic
+ We have the f658n and f656n images
+ We ought to work out the difference in efficiency - use nebulio
  + This would require use of the f547m image too

**** Inferences from the mosaic
+ LL1 region needs correction factor of 1.8
+ Horizontal E slits also have correction factor of about 1.8, once we fix the zero-point problem
  + Unfortunately, we can't continue to the W end of the slit because the mosaic has fill-in data there

**** Make a ratio map from f658n and f656n
#+BEGIN_SRC python
from astropy.io import fits
template = '/Users/will/Dropbox/JorgeBowshocks/HST/mosaicf{}-fixw-align.fits'

nii, = fits.open(template.format(658))
ha, = fits.open(template.format(656))
tnii = nii.header['EXPTIME']
tha = ha.header['EXPTIME']
nii.data *= tha/(tnii*ha.data)
nii.writeto('wfpc2-mosaic-f658-over-f656.fits', clobber=True)
#+END_SRC
* DONE [2/2] Final tweaks to the zero level - fit 2D Chebyshev
CLOSED: [2015-09-30 Wed 19:26]
:LOGBOOK:
CLOCK: [2015-09-29 Tue 09:16]--[2015-09-29 Tue 11:16] =>  2:00
:END:
+ Some spectra still have strangenesses in the background levels, especially the 2013 runs
+ Plan is to fit a 2D Chebyshev surface to the regions away from the lines
+ [X] First a pilot program that works on the calibrated spectra
  + 
+ [X] If that works, then incorporate it directly into the calibration process
  + Finally decided not to do this - we keep it as a separate step
  + Application to all the slits is [[id:41519B0D-E285-4BD1-929E-763BE12298F8][down here]]
  + Corrected spectra are saved to [[file:Calibrated/BGsub/]]


** Program to fit 2D Chebyshev to so-called continuum: chebfit2d.py 
:PROPERTIES:
:header-args: :tangle chebfit2d.py :comments link
:END:

Zeroth, the imports
#+BEGIN_SRC python
import sys
import numpy as np
from astropy.io import fits
from astropy.modeling import models, fitting
#+END_SRC

First the function to fit the background to the data 
#+BEGIN_SRC python

def fit_background(data, mask, npx=4, npy=4):
    """Fit a polynomial surface to all elements of a 2D `data` array where
the corresponding `mask` is True.  Return the fit evaluated at each
point of the original data array.

    """
    assert data.shape == mask.shape
    ny, nx = data.shape
    # y = np.arange(ny).reshape((ny,1))
    # x = np.arange(nx).reshape((1,nx))
    y, x = np.mgrid[:ny, :nx]
    p_init = models.Chebyshev2D(x_degree=npx, y_degree=npy)
    fit_p = fitting.LevMarLSQFitter()
    p = fit_p(p_init, x[mask], y[mask], data[mask])
    return p(x, y)
#+END_SRC

Second, how to set the mask for the BG fitting:
+ Region strategy (harder)
  1. We need to be outside a given wavelength range
  2. At this level of precision, heliocentric correction is unnecessary
     - WRONG, we do need helio correction
     - We also need to avoid stars
+ Threshold strategy (easy)
  1. Just set mask true when intensity is below a certain amount
  2. That's it!
     - Threshold intensity of 0.001 looks like it might work
     - Possible problem is that it might give a downward bias if noise > threshold
     - Or could give upward bias if signal < threshold
     - Hopefully they will cancel out
+ Now I have decided we need to use both
  + The threshold strategy to distinguish high velocity knots from the noise
  + But then also the region strategy to ensure we do not go to close to the line core, even if it is noisy
  + For this we use an excluded velocity window of -10 to +40 in Vhel
#+BEGIN_SRC python
from astropy.wcs import WCS
from astropy import units as u
from helio_utils import vels2waves

def find_mask_for_hdu(hdu, threshold=0.001, v1=-100.0, v2=100.0):
    mask = hdu.data < threshold

    # Cut out a window around line center
    w = WCS(hdu.header, key='A')
    waves = vels2waves([v1, v2], w.wcs.restwav, hdu.header)
    [i1, i2], _, _ = w.all_world2pix(waves, [0, 0], [0, 0], 0)
    i1, i2 = int(i1), int(i2) + 1
    mask[:, :, i1:i2] = False

    return mask
#+END_SRC

Third, a function to take a FITS file and fit the BG, saving both the BG and the BG-subtracted data

#+BEGIN_SRC python
def estimate_pixel_noise(data, size=50):
    # Slices for each corner of the image and one in the middle somewhere
    lo, hi, mid = slice(None, 50), slice(-50, None), slice(300, 350)
    corners = [data[lo, lo], data[lo, hi],
               data[hi, lo], data[hi, hi],
               data[mid, lo], data[mid, hi]]
    sigmas = [np.nanstd(corner) for corner in corners]
    means = [np.nanmean(corner) for corner in corners]
    sigma = np.nanmedian(sigmas)
    mean = np.nanmedian(means)
    print('Corner sigmas:', sigmas, 'Median =', sigma)
    print('Corner means:', means, 'Median =', mean)
    return sigma

def remove_bg(filename, olddir='Calibrated/', newdir='Calibrated/BGsub/'):
    assert olddir in filename
    hdu = fits.open(filename)[0]      # always use first HDU in file


    sigma = estimate_pixel_noise(hdu.data[0])
    mask = find_mask_for_hdu(hdu, threshold=2*sigma)
    if '2015-02-0003-nii' in filename:
        # Low order of x-polynomial for this one
        bg = fit_background(hdu.data[0], mask[0], npx=1, npy=4)
    else:
        # FITS data is 3d, so take 2d slice for fitting...
        bg = fit_background(hdu.data[0], mask[0])
    # ...and then add back 3rd dimension
    bg = bg[None, :, :]

    # Save BG-subtracted data
    hdu.data -= bg
    subfilename = filename.replace(olddir, newdir)
    hdu.writeto(subfilename, clobber=True)

    # And save fitted BG itself
    hdu.data = bg
    bgfilename = subfilename.replace('.fits', '-bg.fits')
    hdu.writeto(bgfilename, clobber=True)

    # And save the mask
    hdu.data = mask.astype(float)
    maskfilename = subfilename.replace('.fits', '-mask.fits')
    hdu.writeto(maskfilename, clobber=True)

#+END_SRC

Fourth, read a file from the command line if called interactively

#+BEGIN_SRC python
if __name__ == '__main__':
    try:
        fn = sys.argv[1]
    except:
        print('Usage:', sys.argv[0], 'FITSFILE')
        sys.exit()

    remove_bg(fn)
#+END_SRC

** Test the chebyshev fitting
#+BEGIN_SRC sh
mkdir -p Calibrated/BGsub
#+END_SRC

#+BEGIN_SRC sh
python chebfit2d.py Calibrated/2015-02-0003-ha.fits # 1>&2
#+END_SRC

#+RESULTS:
: Corner sigmas: [0.0092039052, 0.009207556, 0.0060184905, 0.0061931033, 0.0081476336, 0.0079773115] Median = 0.00806247
: Corner means: [0.00040226532, 0.0058213449, -0.00010916856, 0.0014264929, 0.00077906274, 0.0030811126] Median = 0.00110278

#+BEGIN_SRC sh
python chebfit2d.py Calibrated/2007-oiii-059-oiii.fits
#+END_SRC

#+RESULTS:
: Corner sigmas: [0.0048541185, 0.0050180876, 0.0051069264, 0.0055564386, 0.0049691969, 0.0052101794] Median = 0.00506251
: Corner means: [0.00043441783, -0.00016663372, 0.00039929626, -0.00039510179, 0.00037490504, -0.00026487189] Median = 0.000104136



#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/Calibrated/BGsub/2010-01-236-nii.fits
xpaset -p ds9 zoom to fit frame
#+END_SRC

Note that 2015-02-0003 is a pathological case because we have no BG to right of line, so we can't stop the polynomial from blowing up there.  One solution would be to reflect the line profile. 


** Apply to all the slits
:PROPERTIES:
:ID:       41519B0D-E285-4BD1-929E-763BE12298F8
:END:
+ At the same time, we will change wavelength to Vhel in the FITS headers
+ And we could try and add pixel coordinates for the output image array too. 

#+BEGIN_SRC python
import glob
import chebfit2d

filenames = glob.glob('Calibrated/*.fits')

for fn in filenames:
    chebfit2d.remove_bg(fn)

#+END_SRC


* DONE Back-propagate the heliocentric velocities to the spectra
CLOSED: [2015-10-05 Mon 08:16]
+ This will allow better cross-referencing between the isovelocity images and the spectra
+ We will also try and add a better spatial coordinate WCS
  + One possibility would be to use the pixels of the output grid from the spectral maps

** Program to add a better wcs to the spectra: spec_augment_wcs.py
:PROPERTIES:
:header-args: :tangle spec_augment_wcs.py :comments link
:END:

The imports
#+BEGIN_SRC python
import sys
from astropy.io import fits
from astropy import units as u
from astropy.wcs import WCS
from helio_utils import waves2vels
#+END_SRC


This is the WCS for the spectral maps, which is copied from down [[id:20ADFA6F-DE49-454E-B433-D684CF3FB826][here]]. The idea is that we can use this to define the spatial WCS for our slit spectrum that gives the corresponding pixel of the map. 
#+BEGIN_SRC python
def get_specmap_wcs():
    pixel_scale = 0.5               # arcsec
    NX, NY = 2048, 2048
    dRA, dDec = -pixel_scale/3600., pixel_scale/3600.
    RA0, Dec0 = 83.69, -5.429
    w = WCS(naxis=2)
    w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
    w.wcs.cdelt = [dRA, dDec]
    w.wcs.crval = [RA0, Dec0]
    w.wcs.ctype = ['RA---TAN', 'DEC--TAN']
    w.wcs.cunit = ['deg', 'deg']
    return w
#+END_SRC

Function to fix up a single fits file
#+BEGIN_SRC python
def velocity_world2pix(wcs, vels, iaxis=0):
    """Convert velocities `vels` to pixels by hand using the CDELT, CRPIX
and CRVAL from `wcs`.  The velocity axis in the wcs is given by
`iaxis`

    """
    crval = wcs.wcs.crval[iaxis]
    crpix = wcs.wcs.crpix[iaxis]
    cdelt = wcs.wcs.cdelt[iaxis]
    cunit = wcs.wcs.cunit[iaxis]
    print('CRVAL, CRPIX, CDELT, CUNIT', crval, crpix, cdelt, cunit)
    pixels = crpix + (vels - crval)/cdelt
    # return fractional pixel coordinates on 0-based scale
    return pixels - 1

def fix_up_some_new_wcs(filename, old_new=('.fits', '-vhel.fits')):
    hdu = fits.open(filename)[0]  # Always use first HDU in file
    # Start with the Wav, RA, Dec WCS
    wold = WCS(hdu.header, key='A')

    # This is where we will put the new stuff
    wnew = wold.deepcopy()

    # First do the velocity part
    wav0, dwav = wold.wcs.crval[0], wold.wcs.cdelt[0]
    vel0, vel1 = waves2vels([wav0, wav0 + dwav]*u.m,
                            wold.wcs.restwav*u.m, hdu.header)
    dvel = vel1 - vel0
    wnew.wcs.crval[0] = vel0.to('m/s').value
    wnew.wcs.cdelt[0] = dvel.to('m/s').value
    wnew.wcs.cunit[0] = u.m/u.s
    wnew.wcs.ctype[0] = 'VOPT'
    wnew.wcs.cname[0] = 'Heliocentric velocity'
    wnew.wcs.specsys = 'HELIOCEN'
    wnew.wcs.name = "VHELIO"

    # Now do the spatial part
    wim = get_specmap_wcs()
    RAs, Decs = wold.celestial.all_pix2world([0, 1, 0], [0, 0, 1], 0)
    # print('First two pixels RA and Dec:', RAs, Decs)
    [X0, X1, X2], [Y0, Y1, Y2] = wim.all_world2pix(RAs, Decs, 0)
    # print('First two pixels X and Y:', [X0, X1, X2], [Y0, Y1, Y2])
    wnew.wcs.crval[1:] = [X0, Y0]
    wnew.wcs.cdelt[1:] = [1., 1.]
    wnew.wcs.pc[1:, 1:] = [[X1 - X0, Y1 - Y0], [X2 - X0, Y2 - Y0]]
    wnew.wcs.ctype[1], wnew.wcs.ctype[2] = ['LINEAR']*2
    wnew.wcs.cname[1], wnew.wcs.cname[2] = ['X', 'Y']
    wnew.wcs.cunit[1], wnew.wcs.cunit[2] = [u.dimensionless_unscaled]*2

    # Cut off the velocity range in the data array to [-150..200] km/s
    wnew.fix()                  # Make sure we know it is in SI units
    print(wnew.sub([1]).wcs)
    vwindow = [-150, 200]*u.km/u.s
    print('Velocity window (m/s)', vwindow.to('m/s').value)
    [j1, j2] = velocity_world2pix(wnew, vwindow.to('m/s').value)
    view = slice(None), slice(None), slice(int(j1), int(j2) + 2)
    print('Pixel limits for slice', j1, j2)
    # Apply slice to data and to the WCS
    hdu.data = hdu.data[:, :, j1:j2]
    wnew = wnew.slice(view)
    wold = wold.slice(view)

    # Update header with a new WCS called V
    hdu.header.update(wnew.to_header(key='V'))
    # And re-write 'A' too since we have changed it
    hdu.header.update(wold.to_header(key='A'))

    # Now, sort out the default header

    # New blank wcs with only 2 dimensions
    wdef = WCS(naxis=2)
    # Copy over the velocity part 
    for k in 'crval', 'crpix', 'cdelt', 'cunit', 'ctype', 'cname':
        getattr(wdef.wcs, k)[0] = getattr(wnew.wcs, k)[0]
    wdef.wcs.pc[0, 0] = wnew.wcs.pc[0, 0]

    # Check for orientation
    slit_center = hdu.header['NAXIS2']/2
    if abs(wnew.wcs.pc[1, 1]) > abs(wnew.wcs.pc[1, 2]):
        # largely horizontal slit - use X-axis
        jslit = 1
        _, _, [Ycent] = wnew.all_pix2world([0], [slit_center], [0], 0) 
        wdef.wcs.name = 'YY{:04d}'.format(int(Ycent))
    else:
        # largely vertical slit - use Y-axis
        jslit = 2
        _, [Xcent], _ = wnew.all_pix2world([0], [slit_center], [0], 0) 
        wdef.wcs.name = 'XX{:04d}'.format(int(Xcent))

    # Copy over spatial part (X or Y, depending on orientation)
    for k in 'crval', 'crpix', 'cunit', 'ctype', 'cname':
        getattr(wdef.wcs, k)[1] = getattr(wnew.wcs, k)[jslit]
    # More intuitive to use CDELT instead of PC
    wdef.wcs.cdelt[1] = wnew.wcs.pc[1, jslit]

    # Update header with new default WCS
    hdu.header.update(wdef.to_header(key=' '))
    # Convert from m/s to km/s
    hdu.header['CUNIT1'] = 'km/s'
    hdu.header['CRVAL1'] /= 1000.
    hdu.header['CDELT1'] /= 1000.
    # Remove the pesky CD keywords
    for ij in '1_1', '1_2', '2_2', '1_1':
        if 'CD'+ij in hdu.header:
            hdu.header.remove('CD'+ij)

    # And flatten data array to 2-dimensions
    assert(len(hdu.data.shape) == 3)
    print('Original data array shape:', hdu.data.shape)
    hdu.data, = hdu.data
    print('New data array shape:', hdu.data.shape)

    # Write a new file 
    newfilename = filename.replace(*old_new).replace('BGsub/',
                                                     'BGsub/' + wdef.wcs.name + '-')
    print('Writing', newfilename)
    hdu.writeto(newfilename, clobber=True)
#+END_SRC


Read file from command line if called interactively

#+BEGIN_SRC python
if __name__ == '__main__':
    try:
        fn = sys.argv[1]
    except:
        print('Usage:', sys.argv[0], 'FITSFILE')
        sys.exit()

    fix_up_some_new_wcs(fn)
#+END_SRC

** Test the addition of the =V= WCS
#+BEGIN_SRC sh
python spec_augment_wcs.py Calibrated/BGsub/2013-12-111-ha.fits
#+END_SRC

#+RESULTS:
: Writing Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits

#+BEGIN_SRC sh
xpaset -p test zoom 4 1
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
xpaset -p test fits $PWD/Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits
xpaset -p test zoom to fit
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
open -n -a SAOImage\ DS9 --args -title test
#+END_SRC



** Add the VHEL and pixel WCS to all the spectra


#+BEGIN_SRC sh
for f in Calibrated/BGsub/*-{ha,nii}.fits; do
    python spec_augment_wcs.py $f
done
#+END_SRC

#+RESULTS:
#+begin_example
Writing Calibrated/BGsub/XX1162-2006-02-260-ha-vhel.fits
Writing Calibrated/BGsub/XX1166-2006-02-270-ha-vhel.fits
Writing Calibrated/BGsub/XX1170-2006-02-276-ha-vhel.fits
Writing Calibrated/BGsub/XX1176-2006-02-281-ha-vhel.fits
Writing Calibrated/BGsub/XX1180-2006-02-286-ha-vhel.fits
Writing Calibrated/BGsub/XX1182-2006-02-291-ha-vhel.fits
Writing Calibrated/BGsub/XX1189-2006-02-296-ha-vhel.fits
Writing Calibrated/BGsub/XX1197-2006-02-303-ha-vhel.fits
Writing Calibrated/BGsub/XX1259-2006-02-313-ha-vhel.fits
Writing Calibrated/BGsub/XX1156-2006-02-318-ha-vhel.fits
Writing Calibrated/BGsub/XX1150-2006-02-326-ha-vhel.fits
Writing Calibrated/BGsub/XX0430-2007-01-054-ha-vhel.fits
Writing Calibrated/BGsub/XX0443-2007-01-067-ha-vhel.fits
Writing Calibrated/BGsub/XX0447-2007-01-072-ha-vhel.fits
Writing Calibrated/BGsub/XX1154-2007-01b-2037-ha-vhel.fits
Writing Calibrated/BGsub/XX1189-2007-01b-2041-ha-vhel.fits
Writing Calibrated/BGsub/XX1204-2007-01b-2045-ha-vhel.fits
Writing Calibrated/BGsub/XX1218-2007-01b-2049-ha-vhel.fits
Writing Calibrated/BGsub/XX1232-2007-01b-2053-ha-vhel.fits
Writing Calibrated/BGsub/XX1251-2007-01b-2057-ha-vhel.fits
Writing Calibrated/BGsub/XX1141-2007-01b-2061-ha-vhel.fits
Writing Calibrated/BGsub/XX1389-2010-01-078-ha-vhel.fits
Writing Calibrated/BGsub/XX1540-2010-01-124-ha-vhel.fits
Writing Calibrated/BGsub/XX1558-2010-01-128-ha-vhel.fits
Writing Calibrated/BGsub/XX1557-2010-01-133-ha-vhel.fits
Writing Calibrated/BGsub/XX1575-2010-01-137-ha-vhel.fits
Writing Calibrated/BGsub/XX1595-2010-01-145-ha-vhel.fits
Writing Calibrated/BGsub/XX1616-2010-01-157-ha-vhel.fits
Writing Calibrated/BGsub/XX1523-2010-01-202-ha-vhel.fits
Writing Calibrated/BGsub/XX1549-2010-01-206-ha-vhel.fits
Writing Calibrated/BGsub/XX1568-2010-01-210-ha-vhel.fits
Writing Calibrated/BGsub/XX1585-2010-01-214-ha-vhel.fits
Writing Calibrated/BGsub/XX1609-2010-01-219-ha-vhel.fits
Writing Calibrated/BGsub/XX1620-2010-01-236-ha-vhel.fits
Writing Calibrated/BGsub/XX1633-2010-01-240-ha-vhel.fits
Writing Calibrated/BGsub/XX1646-2010-01-244-ha-vhel.fits
Writing Calibrated/BGsub/XX1601-2010-01-248-ha-vhel.fits
Writing Calibrated/BGsub/XX1656-2010-01-252-ha-vhel.fits
Writing Calibrated/BGsub/YY1401-2013-02-024-ha-vhel.fits
Writing Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits
Writing Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
Writing Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
Writing Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
Writing Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
Writing Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
Writing Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
Writing Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
Writing Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
Writing Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
Writing Calibrated/BGsub/YY1314-2013-12-086-ha-vhel.fits
Writing Calibrated/BGsub/YY1289-2013-12-090-ha-vhel.fits
Writing Calibrated/BGsub/YY1312-2013-12-102-ha-vhel.fits
Writing Calibrated/BGsub/YY1295-2013-12-111-ha-vhel.fits
Writing Calibrated/BGsub/YY1287-2013-12-116-ha-vhel.fits
Writing Calibrated/BGsub/YY1308-2015-02-0003-ha-vhel.fits
Writing Calibrated/BGsub/YY1280-2015-02-0012-ha-vhel.fits
Writing Calibrated/BGsub/XX1162-2006-02-260-nii-vhel.fits
Writing Calibrated/BGsub/XX1166-2006-02-270-nii-vhel.fits
Writing Calibrated/BGsub/XX1170-2006-02-276-nii-vhel.fits
Writing Calibrated/BGsub/XX1176-2006-02-281-nii-vhel.fits
Writing Calibrated/BGsub/XX1180-2006-02-286-nii-vhel.fits
Writing Calibrated/BGsub/XX1182-2006-02-291-nii-vhel.fits
Writing Calibrated/BGsub/XX1189-2006-02-296-nii-vhel.fits
Writing Calibrated/BGsub/XX1197-2006-02-303-nii-vhel.fits
Writing Calibrated/BGsub/XX1259-2006-02-313-nii-vhel.fits
Writing Calibrated/BGsub/XX1156-2006-02-318-nii-vhel.fits
Writing Calibrated/BGsub/XX1150-2006-02-326-nii-vhel.fits
Writing Calibrated/BGsub/XX0430-2007-01-054-nii-vhel.fits
Writing Calibrated/BGsub/XX0443-2007-01-067-nii-vhel.fits
Writing Calibrated/BGsub/XX0447-2007-01-072-nii-vhel.fits
Writing Calibrated/BGsub/XX1154-2007-01b-2037-nii-vhel.fits
Writing Calibrated/BGsub/XX1189-2007-01b-2041-nii-vhel.fits
Writing Calibrated/BGsub/XX1204-2007-01b-2045-nii-vhel.fits
Writing Calibrated/BGsub/XX1218-2007-01b-2049-nii-vhel.fits
Writing Calibrated/BGsub/XX1232-2007-01b-2053-nii-vhel.fits
Writing Calibrated/BGsub/XX1251-2007-01b-2057-nii-vhel.fits
Writing Calibrated/BGsub/XX1141-2007-01b-2061-nii-vhel.fits
Writing Calibrated/BGsub/XX1389-2010-01-078-nii-vhel.fits
Writing Calibrated/BGsub/XX1540-2010-01-124-nii-vhel.fits
Writing Calibrated/BGsub/XX1558-2010-01-128-nii-vhel.fits
Writing Calibrated/BGsub/XX1557-2010-01-133-nii-vhel.fits
Writing Calibrated/BGsub/XX1575-2010-01-137-nii-vhel.fits
Writing Calibrated/BGsub/XX1595-2010-01-145-nii-vhel.fits
Writing Calibrated/BGsub/XX1616-2010-01-157-nii-vhel.fits
Writing Calibrated/BGsub/XX1523-2010-01-202-nii-vhel.fits
Writing Calibrated/BGsub/XX1549-2010-01-206-nii-vhel.fits
Writing Calibrated/BGsub/XX1568-2010-01-210-nii-vhel.fits
Writing Calibrated/BGsub/XX1585-2010-01-214-nii-vhel.fits
Writing Calibrated/BGsub/XX1609-2010-01-219-nii-vhel.fits
Writing Calibrated/BGsub/XX1620-2010-01-236-nii-vhel.fits
Writing Calibrated/BGsub/XX1633-2010-01-240-nii-vhel.fits
Writing Calibrated/BGsub/XX1646-2010-01-244-nii-vhel.fits
Writing Calibrated/BGsub/XX1601-2010-01-248-nii-vhel.fits
Writing Calibrated/BGsub/XX1656-2010-01-252-nii-vhel.fits
Writing Calibrated/BGsub/YY1401-2013-02-024-nii-vhel.fits
Writing Calibrated/BGsub/YY1120-2013-02-029-nii-vhel.fits
Writing Calibrated/BGsub/YY1112-2013-02-033-nii-vhel.fits
Writing Calibrated/BGsub/YY1058-2013-02-149-nii-vhel.fits
Writing Calibrated/BGsub/YY1068-2013-02-154-nii-vhel.fits
Writing Calibrated/BGsub/YY1085-2013-02-159-nii-vhel.fits
Writing Calibrated/BGsub/YY0936-2013-02-165-nii-vhel.fits
Writing Calibrated/BGsub/YY0955-2013-02-169-nii-vhel.fits
Writing Calibrated/BGsub/YY1019-2013-02-226-nii-vhel.fits
Writing Calibrated/BGsub/YY1000-2013-02-232-nii-vhel.fits
Writing Calibrated/BGsub/YY0971-2013-02-237-nii-vhel.fits
Writing Calibrated/BGsub/YY1314-2013-12-086-nii-vhel.fits
Writing Calibrated/BGsub/YY1289-2013-12-090-nii-vhel.fits
Writing Calibrated/BGsub/YY1312-2013-12-102-nii-vhel.fits
Writing Calibrated/BGsub/YY1295-2013-12-111-nii-vhel.fits
Writing Calibrated/BGsub/YY1287-2013-12-116-nii-vhel.fits
Writing Calibrated/BGsub/YY1308-2015-02-0003-nii-vhel.fits
Writing Calibrated/BGsub/YY1280-2015-02-0012-nii-vhel.fits
#+end_example

** Displaying the new calibrated spectra in DS9

*** Delete all exisiting frames
:PROPERTIES:
:ID:       795D79F6-A9F0-4E94-ADBD-18D540713A8C
:END:
#+BEGIN_SRC sh
xpaset -p ds9 frame delete all
#+END_SRC

#+name: new-blank-ds9
#+BEGIN_SRC sh
open -n -a SAOImage\ DS9 --args -title $DS9
sleep 1
xpaset -p $DS9 view buttons no
xpaset -p $DS9 frame delete all
#+END_SRC


*** General function for displaying a bunch of spectra

+ Passing glob patterns to shell scripts is really fraught.
+ I am reduced to using =find= instead

#+BEGIN_SRC sh
files=$(find $PWD/Calibrated/BGsub -name "$1-vhel.fits")
ds9=${2:-ds9}
for path in $files; do
    f=${path##/*/} # just the filename
    if [ ${f:0:1} == "Y" ]; then
        orient=horizontal
    else
        orient=vertical
    fi
    xpaset -p $ds9 frame new
    xpaset -p $ds9 fits $path
    xpaset -p $ds9 zoom to 3 1
    xpaset -p $ds9 grid load $PWD/$orient-axes.grd
    xpaset -p $ds9 cmap bb
    xpaset -p $ds9 scale sqrt
    xpaset -p $ds9 scale limits -0.0003 0.05
    xpaset -p $ds9 contour no
    xpaset -p $ds9 contour method smooth
    xpaset -p $ds9 contour smooth 2
    xpaset -p $ds9 contour color blue
    xpaset -p $ds9 contour loadlevels $PWD/ha-contours.lev
    xpaset -p $ds9 contour yes
done
xpaset -p $ds9 contour close
xpaset -p $ds9 frame 1
xpaset -p $ds9 match frame wcs
xpaset -p $ds9 lock frame wcs
#+END_SRC

#+name: test-sh-args
#+BEGIN_SRC sh
files=$(find $PWD/Calibrated/BGsub -name "$1-vhel.fits")
for f in $files; do
    ls -l $f
done
#+END_SRC

+ Testing contour setting
+ Important thing is to turn it off while fiddling, then turn it back on at the end
#+BEGIN_SRC sh
ds9=spectra
xpaset -p $ds9 contour no
xpaset -p $ds9 contour method smooth
xpaset -p $ds9 contour smooth 4
xpaset -p $ds9 contour color blue
xpaset -p $ds9 contour loadlevels $PWD/ha-contours.lev
xpaset -p $ds9 contour yes
#+END_SRC


*** Trying out the spectra display

**** Horizontal western slits
#+BEGIN_SRC sh
bash display-vel-spectra.sh YY[01][019]*-ha ha-horiz
#+END_SRC

#+BEGIN_SRC sh
bash display-vel-spectra.sh YY[01][019]*-nii nii-horiz
#+END_SRC

**** Vertical western slits
#+BEGIN_SRC sh
bash display-vel-spectra.sh XX1[56]??-2010-01-*-ha ha-vert
#+END_SRC

#+BEGIN_SRC sh
bash display-vel-spectra.sh XX1[56]??-2010-01-*-nii nii-vert
#+END_SRC

**** LL2 vertical slits
Ha line

#+BEGIN_SRC sh
bash display-vel-spectra.sh XX1[12]*-ha ha-ll2
#+END_SRC

#+BEGIN_SRC sh
bash display-vel-spectra.sh XX1[123]*-nii nii-ll2
#+END_SRC

**** More eastern horizontal slits

#+BEGIN_SRC sh
bash display-vel-spectra.sh YY1[234]*-ha ha-east
#+END_SRC

#+BEGIN_SRC sh
bash display-vel-spectra.sh YY1[234]*-nii nii-east
#+END_SRC


*** Testing passing glob patterns to a shell script
For debugging use =-x= option to bash and redirect stderr to stout
#+BEGIN_SRC sh
bash -x test-sh-args.sh YY[01][019]*-ha 2>&1
#+END_SRC

#+RESULTS:
#+begin_example
++ find /Users/will/Dropbox/OrionWest/Calibrated/BGsub -name 'YY[01][019]*-ha-vhel.fits'
+ files='/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
/Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits'
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0936-2013-02-165-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0955-2013-02-169-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY0971-2013-02-237-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1000-2013-02-232-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1019-2013-02-226-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1058-2013-02-149-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1068-2013-02-154-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1085-2013-02-159-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1112-2013-02-033-ha-vhel.fits
+ for f in '$files'
+ ls -l /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits
-rw-r--r--@ 1 will  staff  763200 Oct  1 13:27 /Users/will/Dropbox/OrionWest/Calibrated/BGsub/YY1120-2013-02-029-ha-vhel.fits
#+end_example




*** Earlier stuff
Western vertical slits
#+BEGIN_SRC sh
for f in $PWD/Calibrated/BGsub/XX1[56]??-2010-01-*-ha-vhel.fits; do
    xpaset -p ds9 frame new
    xpaset -p ds9 fits $f
done
xpaset -p ds9 zoom to fit
xpaset -p ds9 match frame wcs
#+END_SRC

Western horizontal slits
#+BEGIN_SRC sh
for f in $PWD/Calibrated/BGsub/YY{09,10,11}*-nii-vhel.fits; do
    xpaset -p ds9 frame new
    xpaset -p ds9 fits $f
    xpaset -p ds9 zoom to 3 1
    xpaset -p ds9 grid load $PWD/horizontal-axes.grd
    xpaset -p ds9 cmap bb
    xpaset -p ds9 scale limits -0.0003 0.05
    xpaset -p ds9 contour loadlevels $PWD/ha-contours.lev
    xpaset -p ds9 contour yes
    xpaset -p ds9 contour color blue
done
xpaset -p ds9 match frame wcs
#+END_SRC

#+BEGIN_SRC sh
xpaget ds9 cmap
#+END_SRC

#+RESULTS:
: bb

* TODO New version of spectral map
** Convert wavelengths to velocities
:PROPERTIES:
:header-args: :tangle wavs2vels.py :comments link
:END:
+ The main difficulty here is calculating the heliocentric correction
  + I had to install pyslalib from github
  + The observatory ID for the SPM 2m telescope is 'SANPM83'

*** Module to find heliocentric correction: helio_utils.py
:PROPERTIES:
:header-args: :tangle helio_utils.py :comments link
:END:

#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy import coordinates as coord
from astropy import units as u
from astropy import constants as const
from astropy.wcs import WCS
from pyslalib.slalib import sla_dcs2c, sla_evp, sla_rverot, sla_obs

OBSERVATORY_ALIASES = {
    'SPM': 'SANPM83',
    'VLT': 'VLT1',
}

def ra_dec_from_header(hdr):
    """This trusts the nominal RA, Dec given in the header"""
    ra = coord.Longitude(hdr['RA'], u.hour)
    dec = coord.Latitude(hdr['DEC'], u.deg)
    return ra, dec

def ra_dec_from_header_wcs(hdr, wcskey):
    """This uses the RA, Dec of the WCS reference pixel"""
    w = WCS(hdr, key=wcskey).celestial
    ra = coord.Longitude(w.wcs.crval[0], u.deg)
    dec = coord.Latitude(w.wcs.crval[1], u.deg)
    return ra, dec

def mjd_from_header(hdr):
    return float(hdr.get('MJD-OBS'))

def obs_lat_from_name(observatory):
    if observatory in OBSERVATORY_ALIASES:
        obs_string = OBSERVATORY_ALIASES[observatory]
    else:
        obs_string = observatory
    obs_id, obs_name, obs_long, obs_lat, obs_height = sla_obs(0, obs_string)
    return coord.Latitude(obs_lat, u.radian)

def st_from_header(hdr):
    if 'ST' in hdr:
        # SPM observations have ST measured in hours
        st = coord.Longitude(hdr['ST'], u.hour)
    elif 'LST' in hdr:
        # MUSE observations have LST measured in seconds
        st = coord.Longitude(hdr['LST'], u.hour)/3600.0
    else:
        return KeyError('Neither ST nor LST found in header')
    return st

def helio_topo_from_header(hdr, usewcs=None, observatory='SPM'):
    if usewcs is None:
        ra, dec = ra_dec_from_header(hdr)
    else:
        # Set usewcs='' to use default WCS
        ra, dec = ra_dec_from_header_wcs(hdr, wcskey=usewcs)
    mjd = mjd_from_header(hdr)
    st = st_from_header(hdr)
    obs_lat = obs_lat_from_name(observatory)
    return helio_topo_correction(ra, dec, mjd, st, obs_lat)

def helio_topo_correction(ra, dec, mjd, st, obs_lat):
    """Find radial velocity correction in km/s due to transformation
    between topocentric and heliocentric frame.  Positive when
    observatory is moving away from source in heliocentric frame.

    Parameters
    ----------
    ra : :class:`~astropy.coordinates.Longitude` 
        Right ascension of source
    dec : :class:`~astropy.coordinates.Latitude` 
        Declination of source
    mjd : float
        Modified Julian Date of observation
    st : :class:`~astropy.coordinates.Angle`
        Sideral Time of observation
    obs_lat : :class:`~astropy.coordinates.Latitude` 
        Latitude of observatory

    """
    return helio_geo_correction(ra, dec, mjd, st) + geo_topo_correction(ra, dec, st, obs_lat)

def helio_geo_correction(ra, dec, mjd, st):
    """Motion of earth's center in heliocentric frame"""
    # line-of-sight unit vector to astronomical object
    k_los = sla_dcs2c(ra.radian, dec.radian)
    # Velocity and position of earth in barycentric and heliocentric frames
    # Units are AU and AU/s
    vel_bary, pos_bary, vel_hel, pos_hel = sla_evp(mjd, 2000.0)
    # Radial velocity correction (km/s) due to helio-geocentric transformation  
    # Positive when earth is moving away from object
    return u.AU.to(u.km, -np.dot(vel_hel, k_los))

def geo_topo_correction(ra, dec, st, obs_lat):
    """Motion of telescope in geocentric frame"""
    return sla_rverot(obs_lat.radian, ra.radian, dec.radian, st.radian)


LIGHT_SPEED_KMS = const.c.to('km/s').value
def vels2waves(vels, restwav, hdr, usewcs=None, observatory='SPM'):
    """Heliocentric radial velocity (in km/s) to observed wavelength (in
    m, or whatever units restwav is in)

    """
    # Heliocentric correction
    vels = np.array(vels) + helio_topo_from_header(hdr, usewcs=usewcs,
                                                   observatory=observatory)
    waves = restwav*(1.0 + vels/LIGHT_SPEED_KMS)
    return waves


def waves2vels(waves, restwav, hdr, usewcs=None, observatory='SPM'):
    """Observed wavelength to Heliocentric radial velocity (in km/s) 

    """
    vels = const.c*(waves - restwav)/restwav
    # Heliocentric correction
    vels -= helio_topo_from_header(hdr, usewcs=usewcs,
                                   observatory=observatory)*u.km/u.s

    return vels

#+END_SRC
*** Script to test obtaining heliocentric correction from spectrum headers
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: more-observational-parameters
#+BEGIN_SRC python
import glob
from astropy.io import fits
from helio_utils import helio_topo_from_header
outtab = [['File', 'Date', 'JD', 'ST', 'RA', 'Dec', 'Helio'], None]
speclist = glob.glob('Calibrated/*-ha.fits')
for fn in speclist:
    hdr = fits.open(fn)[0].header
    id_ = fn.split('/')[-1].split('.')[0]
    outtab.append([id_, hdr.get('DATE-OBS'),
                   hdr.get('MJD-OBS') or hdr.get('JD'),
                   hdr.get('ST'), hdr.get('RA'), hdr.get('DEC'),
                   '{:.2f}'.format(helio_topo_from_header(hdr, usewcs='A'))
    ])
#+END_SRC

#+RESULTS: more-observational-parameters
| File             |       Date |      JD |         ST |         RA |        Dec | Helio |
|------------------+------------+---------+------------+------------+------------+-------|
| 2006-02-260-ha   | 2006-02-05 | 53771.0 |   03:42:12 |   05:34:53 |  -05:21:09 | 20.87 |
| 2006-02-270-ha   | 2006-02-05 | 53771.0 |   04:40:33 |   05:34:55 |  -05:21:11 | 20.97 |
| 2006-02-276-ha   | 2006-02-05 | 53771.0 |   05:15:29 |   05:34:56 |  -05:21:11 | 21.03 |
| 2006-02-281-ha   | 2006-02-05 | 53771.0 |   05:46:32 |   05:34:56 |  -05:21:11 | 21.08 |
| 2006-02-286-ha   | 2006-02-05 | 53771.0 |   06:18:13 |   05:34:57 |  -05:21:10 | 21.14 |
| 2006-02-291-ha   | 2006-02-05 | 53771.0 |   06:50:25 |   05:34:57 |  -05:21:10 | 21.19 |
| 2006-02-296-ha   | 2006-02-05 | 53771.0 |   07:21:26 |   05:34:58 |  -05:21:09 | 21.24 |
| 2006-02-303-ha   | 2006-02-05 | 53771.0 |   08:00:43 |   05:34:57 |  -05:21:06 | 21.30 |
| 2006-02-313-ha   | 2006-02-05 | 53771.0 |   08:50:24 |   05:34:56 |  -05:20:58 | 21.37 |
| 2006-02-318-ha   | 2006-02-05 | 53771.0 |   09:27:04 |   05:35:02 |  -05:20:47 | 21.40 |
| 2006-02-326-ha   | 2006-02-05 | 53771.0 |   09:57:26 |   05:35:04 |  -05:20:34 | 21.42 |
| 2007-01-054-ha   | 2007-01-10 | 54110.0 |   07:06:37 |   05:35:27 |  -05:24:59 | 11.87 |
| 2007-01-067-ha   | 2007-01-10 | 54110.0 |   08:42:40 |   05:35:29 |  -05:24:45 | 12.01 |
| 2007-01-072-ha   | 2007-01-10 | 54110.0 |   09:15:23 |   05:35:30 |  -05:24:37 | 12.05 |
| 2007-01b-2037-ha | 2007-01-13 | 54113.0 |   03:52:24 |   05:34:59 |  -05:21:44 | 12.83 |
| 2007-01b-2041-ha | 2007-01-13 | 54113.0 |   04:26:32 |   05:34:59 |  -05:21:45 | 12.89 |
| 2007-01b-2045-ha | 2007-01-13 | 54113.0 |   04:58:44 |   05:34:59 |  -05:21:46 | 12.95 |
| 2007-01b-2049-ha | 2007-01-13 | 54113.0 |   05:31:17 |   05:34:59 |  -05:21:46 | 13.00 |
| 2007-01b-2053-ha | 2007-01-13 | 54113.0 |   06:08:30 |   05:34:59 |  -05:21:25 | 13.07 |
| 2007-01b-2057-ha | 2007-01-13 | 54113.0 |   06:42:14 |   05:34:59 |  -05:21:24 | 13.13 |
| 2007-01b-2061-ha | 2007-01-13 | 54113.0 |   07:17:30 |   05:35:04 |  -05:21:23 | 13.18 |
| 2010-01-078-ha   | 2010-01-15 | 55211.0 |   06:52:49 | 05:35:07.3 |  -05:22:10 | 14.06 |
| 2010-01-124-ha   | 2010-01-16 | 55212.0 |   03:40:00 | 05:34:57.6 |  -05:24:10 | 14.13 |
| 2010-01-128-ha   | 2010-01-16 | 55212.0 |   04:12:20 | 05:34:58.1 |  -05:24:12 | 14.19 |
| 2010-01-133-ha   | 2010-01-16 | 55212.0 |   04:46:47 | 05:34:59.0 |  -05:23:54 | 14.24 |
| 2010-01-137-ha   | 2010-01-16 | 55212.0 |   05:16:29 | 05:34:59.4 |  -05:23:54 | 14.30 |
| 2010-01-145-ha   | 2010-01-16 | 55212.0 |   06:00:23 | 05:34:59.6 |  -05:23:51 | 14.37 |
| 2010-01-157-ha   | 2010-01-16 | 55212.0 |   07:18:44 | 05:35:00.3 |  -05:23:52 | 14.50 |
| 2010-01-202-ha   | 2010-01-17 | 55213.0 |   02:42:07 | 05:34:56.3 |  -05:23:19 | 14.44 |
| 2010-01-206-ha   | 2010-01-17 | 55213.0 |   03:11:47 | 05:34:56.5 |  -05:23:23 | 14.48 |
| 2010-01-210-ha   | 2010-01-17 | 55213.0 |   03:40:46 | 05:34:57.2 |  -05:23:27 | 14.53 |
| 2010-01-214-ha   | 2010-01-17 | 55213.0 |   04:11:15 | 05:34:57.5 |  -05:23:30 | 14.58 |
| 2010-01-219-ha   | 2010-01-17 | 55213.0 |   04:46:31 | 05:34:57.6 |  -05:23:34 | 14.64 |
| 2010-01-236-ha   | 2010-01-17 | 55213.0 |   06:31:24 | 05:34:59.7 |  -05:23:34 | 14.82 |
| 2010-01-240-ha   | 2010-01-17 | 55213.0 |   07:00:20 | 05:34:59.7 |  -05:23:33 | 14.86 |
| 2010-01-244-ha   | 2010-01-17 | 55213.0 |   07:29:14 | 05:34:59.6 |  -05:23:33 | 14.91 |
| 2010-01-248-ha   | 2010-01-17 | 55213.0 |   07:59:47 | 05:35:01.1 |  -05:23:29 | 14.95 |
| 2010-01-252-ha   | 2010-01-17 | 55213.0 |   08:29:45 | 05:34:59.7 |  -05:23:26 | 15.00 |
| 2013-02-024-ha   | 2013-02-16 | 56339.0 |   05:57:04 | 05:35:07.5 | -5:21:27.0 | 23.80 |
| 2013-02-029-ha   | 2013-02-16 | 56339.0 |   06:18:25 | 05:34:57.1 | -5:23:45.0 | 23.84 |
| 2013-02-033-ha   | 2013-02-16 | 56339.0 |   06:47:54 | 05:34:57.9 | -5:23:47.0 | 23.89 |
| 2013-02-149-ha   | 2013-02-18 | 56341.0 |   07:16:44 | 05:35:15.7 | -5:25:16.0 | 24.31 |
| 2013-02-154-ha   | 2013-02-18 | 56341.0 |   07:50:00 | 05:35:15.7 |  -5:25:8.0 | 24.36 |
| 2013-02-159-ha   | 2013-02-18 | 56341.0 |   08:20:58 | 05:35:15.9 | -5:24:55.0 | 24.40 |
| 2013-02-165-ha   | 2013-02-18 | 56341.0 |   08:59:40 | 05:35:14.4 |  -5:26:3.0 | 24.44 |
| 2013-02-169-ha   | 2013-02-18 | 56341.0 |   09:28:04 | 05:35:15.2 | -5:25:30.0 | 24.47 |
| 2013-02-226-ha   | 2013-02-19 | 56342.0 |   04:54:51 | 05:35:08.6 |  -5:25:7.0 | 24.24 |
| 2013-02-232-ha   | 2013-02-19 | 56342.0 |   05:16:09 | 05:35:11.5 | -5:25:17.0 | 24.28 |
| 2013-02-237-ha   | 2013-02-19 | 56342.0 |   05:48:30 | 05:35:12.2 | -5:25:30.0 | 24.33 |
| 2013-12-086-ha   | 2013-12-11 | 56637.0 |   06:04:43 | 05:35:43.1 | -5:22:47.0 | -1.59 |
| 2013-12-090-ha   | 2013-12-11 | 56637.0 |   06:15:11 | 05:35:43.2 | -5:22:49.0 | -1.57 |
| 2013-12-102-ha   | 2013-12-11 | 56637.0 |   07:25:18 | 05:35:37.0 | -5:22:39.0 | -1.44 |
| 2013-12-111-ha   | 2013-12-11 | 56637.0 |   08:13:33 | 05:35:48.4 | -5:22:41.0 | -1.39 |
| 2013-12-116-ha   | 2013-12-11 | 56637.0 |   08:49:55 | 05:35:28.9 | -5:22:39.0 | -1.30 |
| 2015-02-0003-ha  | 2015-02-03 | 57056.0 | 6:09:40.70 | 05:35:42.2 | -5:22:55.0 | 20.43 |
| 2015-02-0012-ha  | 2015-02-03 | 57056.0 | 6:57:37.56 | 05:35:42.9 |  -5:23:7.0 | 20.51 |

** Program to generate spectral map: spectral-map.py
:PROPERTIES:
:ID:       20ADFA6F-DE49-454E-B433-D684CF3FB826
:header-args: :tangle spectral-map.py :comments link
:END:
+ This based on previous versions for the [[id:23C29E96-4471-454E-A463-D365731119C0][vertical]] and [[id:60833550-A462-4F18-86DE-895625FF3E7A][horizontal]] slits
+ We will start off with bigger pixels and same pixel dims, so bigger area
+ It is much more general than the earlier versions since the spectra are already flux-calibrated and all the WCS info comes from the spectrum files themselves, instead of from tables
+ It is also much simpler and more efficient:
+ [2015-09-22 Tue] Now extracts a 7 Angstrom window around each line
+ [2015-09-23 Wed] Now cuts off vignetted sections at ends of slit

#+BEGIN_SRC python
import glob
import sys
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from astropy.wcs.utils import pixel_to_skycoord, skycoord_to_pixel
import astropy.units as u
from helio_utils import helio_topo_from_header, vels2waves

if len(sys.argv) == 3:
    line_id = sys.argv[1]
    vrange = sys.argv[2]
elif len(sys.argv) == 2:
    line_id = sys.argv[1]
    vrange = None
else:
    print('Usage: {} LINE_ID [VRANGE]'.format(sys.argv[0]))

def waves2pixels(waves, w):
    n = len(waves)
    pixels, _, _ = w.all_world2pix(waves, [0]*n, [0]*n, 0)
    return pixels

# First set up WCS for the output image
#
pixel_scale = 0.5               # arcsec
NX, NY = 2048, 2048
dRA, dDec = -pixel_scale/3600., pixel_scale/3600.
RA0, Dec0 = 83.69, -5.429
w = WCS(naxis=2)
w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
w.wcs.cdelt = [dRA, dDec]
w.wcs.crval = [RA0, Dec0]
w.wcs.ctype = ['RA---TAN', 'DEC--TAN']
w.wcs.cunit = ['deg', 'deg']

# Arrays to hold the output image
outimage = np.zeros((NY, NX))
outweights = np.zeros((NY, NX))

slit_width = 2.0                # width in arcsec of 150 micron slit
slit_pix_width = slit_width/pixel_scale

speclist = glob.glob('Calibrated/BGsub/*-{}.fits'.format(line_id))

# Window widths for line and BG
dwline = 7.0*u.Angstrom

# Limits of non-vignetted portion of the slit
good_pixels = {
    '2006-02': (5, None),
    '2007-01': (10, None),
    '2010-01': (10, None),
    '2013-02': (None, -20),
    '2013-12': (None, -10),
    '2015-02-0003': (None, -80),
    '2015-02-0012': (None, -15),
}

for fn in speclist:
    print('Processing', fn)
    spechdu, = fits.open(fn)
    wspec = WCS(spechdu.header, key='A')

    # Trim to good portion of the slit
    goodslice = slice(None, None)
    for k, v in good_pixels.items():
        if k in fn:
            goodslice = slice(*v)

    # Find per-slit weight
    slit_weight = spechdu.header['WEIGHT']

    # Find sign of delta wavelength
    dwav = wspec.wcs.get_cdelt()[0]*wspec.wcs.get_pc()[0, 0]
    sgn = np.sign(dwav)         # Need to take slices backwards if this is negative

    # Eliminate degenerate 3rd dimension from data array and trim off bad bits
    spec2d = spechdu.data[0]

    # Rest wavelength from FITS header is in meters
    wavrest = wspec.wcs.restwav*u.m

    # Find wavelength limits for line extraction window
    if vrange is None:
        # Original case: use a window of wavelength full width dwline
        waves =  wavrest + np.array([-0.5, 0.5])*dwline
    else:
        # Extract velocity limits from the vrange command line argument
        # vrange should be of a form like '-100+100' or '+020+030'
        v1, v2 = float(vrange[:4]), float(vrange[-4:])
        print('Velocity window:', v1, 'to', v2)
        waves = vels2waves([v1, v2], wavrest,  spechdu.header)
    print('Wavelength window: {:.2f} to {:.2f}'.format(*waves.to(u.Angstrom)))

    # Find pixel indices for line extraction window
    i1, i2 = waves2pixels(waves, wspec)
    print('Pixel window:', i1, 'to', i2)

    # Extract profile for this wavelength or velocity window
    profile = spec2d[:, i1:i2:sgn].sum(axis=-1)

    # Find celestial coordinates for each pixel along the slit
    NS = len(profile)
    slit_coords = pixel_to_skycoord(range(NS), [0]*NS, wspec, 0)

    # Trim off bad parts of slit
    profile = profile[goodslice]
    slit_coords = slit_coords[goodslice]

    # Convert to pixel coordinates in output image
    xp, yp = skycoord_to_pixel(slit_coords, w, 0)

    for x, y, bright in zip(xp, yp, profile):
        # Find output pixels corresponding to corners of slit pixel
        # (approximate as square)
        i1 = int(0.5 + x - slit_pix_width/2)
        i2 = int(0.5 + x + slit_pix_width/2)
        j1 = int(0.5 + y - slit_pix_width/2)
        j2 = int(0.5 + y + slit_pix_width/2)
        # Make sure we don't go outside the output grid
        i1, i2 = max(0, i1), max(0, i2)
        i1, i2 = min(NX, i1), min(NX, i2)
        j1, j2 = max(0, j1), max(0, j2)
        j1, j2 = min(NY, j1), min(NY, j2)
        # Fill in the square
        outimage[j1:j2, i1:i2] += bright*slit_weight
        outweights[j1:j2, i1:i2] += slit_weight

# Save everything as different images in a single fits file:
# 1. The sum of the raw slits 
# 2. The weights
# 3. The slits normalized by the weights
if vrange is None:
    label = line_id + '-allvels'
else:
    label = line_id + vrange

fits.HDUList([
    fits.PrimaryHDU(),
    fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
    fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
    fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
    ]).writeto('new-slits-{}.fits'.format(label), clobber=True)

#+END_SRC


** Run spectral-map.py for the nii or ha spectra
#+BEGIN_SRC sh
python spectral-map.py ha 
#+END_SRC

#+BEGIN_SRC sh
python spectral-map.py nii 
#+END_SRC


#+BEGIN_SRC sh
redranges='+030+050 +010+030 -010+010'
# blueranges='-030-010 -050-030 -070-050'
# farblueranges='-090-070 -110-090 -130-110'
# for vrange in $redranges $blueranges $farblueranges; do
for vrange in $redranges; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050.fits[3]
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030.fits[3]
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010.fits[3]
#+END_SRC

Try three wide bands that cover the whole line
#+BEGIN_SRC sh
widebands='+000+060 -060+000 -120-060'
for vrange in $widebands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Some ranges further to the red
#+BEGIN_SRC sh
nearredranges='+050+070 +070+090 +090+110'
farredranges='+110+130 +130+150 +150+170'
for vrange in $nearredranges $farredranges ; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC


** Program to do multigridding of new spectral maps: multibin-map.py
:PROPERTIES:
:header-args: :tangle multibin-map.py :comments link
:ID:       EAE1FA1C-7D1B-484D-9B4A-FF42DE7D8594
:END:


#+BEGIN_SRC python
import sys
sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
from rebin_utils import downsample, oversample
from astropy.io import fits

nlist = [1, 2, 4, 8, 16, 32, 64]
mingoods = [2, 2, 2, 1, 1, 1, 2]

try: 
    infile = sys.argv[1]
except:
    print('Usage:', sys.argv[0], 'FITSFILE')
    sys.exit()

hdulist = fits.open(infile)
hdr = hdulist['scaled'].header
im = hdulist['scaled'].data
w = hdulist['weight'].data
m = w > 0.0

for n, mingood in zip(nlist, mingoods):
    im[~m] = 0.0
    outfile = infile.replace('.fits', '-bin{:03d}.fits'.format(n))
    print('Saving', outfile)
    # Save both the scaled image and the weights, but at the full resolution
    fits.HDUList([
        fits.PrimaryHDU(),
        fits.ImageHDU(data=oversample(im, n), header=hdr, name='scaled'),
        fits.ImageHDU(data=oversample(w, n), header=hdr, name='weight'),
    ]).writeto(outfile, clobber=True)
    # Now do the rebinning by a factor of two
    [im,], m, w = downsample([im,], m, weights=w, mingood=mingood)

#+END_SRC

** Perform the multigridding
#+BEGIN_SRC sh
python multibin-map.py new-slits-ha-allvels.fits
#+END_SRC

#+RESULTS:
: Saving new-slits-ha-allvels-bin001.fits
: Saving new-slits-ha-allvels-bin002.fits
: Saving new-slits-ha-allvels-bin004.fits
: Saving new-slits-ha-allvels-bin008.fits
: Saving new-slits-ha-allvels-bin016.fits
: Saving new-slits-ha-allvels-bin032.fits
: Saving new-slits-ha-allvels-bin064.fits

#+BEGIN_SRC sh
python multibin-map.py new-slits-nii-allvels.fits
#+END_SRC

#+RESULTS:
: Saving new-slits-nii-allvels-bin001.fits
: Saving new-slits-nii-allvels-bin002.fits
: Saving new-slits-nii-allvels-bin004.fits
: Saving new-slits-nii-allvels-bin008.fits
: Saving new-slits-nii-allvels-bin016.fits
: Saving new-slits-nii-allvels-bin032.fits
: Saving new-slits-nii-allvels-bin064.fits

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/new-slits-ha-allvels-bin064.fits
#+END_SRC

#+BEGIN_SRC sh
redranges='+030+050 +010+030 -010+010'
blueranges='-030-010 -050-030 -070-050'
farblueranges='-090-070 -110-090 -130-110'
for vrange in $redranges $blueranges $farblueranges; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

#+BEGIN_SRC sh
suff=bin004
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
widebands='+000+060 -060+000 -120-060'
for vrange in $widebands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC
#+BEGIN_SRC sh
nearredranges='+050+070 +070+090 +090+110'
farredranges='+110+130 +130+150 +150+170'
for vrange in $nearredranges $farredranges; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

** TODO Program to combine different grids: multibin-combine.py
:PROPERTIES:
:header-args: :tangle multibin-combine.py :comments link
:ID:       3796710F-B02D-47F2-9B7C-7FD0DEE62434
:END:
:LOGBOOK:
- Note taken on [2016-03-09 Wed 15:50] \\
  Reopened to clean up the masks
:END:

+ [2015-09-25 Fri] We set minweight = 0 for the coarsest grid so that the spatial coverage at that level does not depend on the line intensity, only on the arrangement of slits.  This is necessary so that all RGB channels have the same coverage when we combine them in a color image.
+ [2015-09-30 Wed] But this has the disadvantage that the high velocity channels where the intensity is very low often do not have enough signal, even in the coarsest bins - so we get noisy rubbish there
+ [2016-03-09 Wed] Now we have an extra optional argument, which we can set to 0.0 for core channels

#+BEGIN_SRC python
import sys
from astropy.io import fits
import numpy as np
sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
from rebin_utils import oversample
from skimage.morphology import square
from skimage.filters.rank import modal


def minify(a, n):
    return a[::n, ::n]


ELEMENT = square(3)
def cleanup_mask(mask, n):
    """Eliminate small islands in the mask"""
    m = minify(mask, n).astype(np.uint8)
    m = m & modal(m, ELEMENT)
    return oversample(m, n).astype(bool)


try: 
    prefix, minw_scale = sys.argv[1], float(sys.argv[2])
except:
    print('Usage:', sys.argv[0], 'FITSFILE_PREFIX MINIMUM_WEIGHT [COARSE_WEIGHT]')
    sys.exit()

try:
    minw_coarse = float(sys.argv[3])
except IndexError:
    minw_coarse = None

nlist = [1, 2, 4, 8, 16, 32]
minweights = [0.5, 1.0, 2.0, 4.0, 8.0, 8.0]
if minw_coarse is not None:
    minweights[-1] = minw_coarse
outim = np.zeros((2048, 2048))
for n, minw in reversed(list(zip(nlist, minweights))):
    fn = '{}-bin{:03d}.fits'.format(prefix, n)
    hdulist = fits.open(fn)
    im = hdulist['scaled'].data
    hdr = hdulist['scaled'].header
    w = hdulist['weight'].data
    m = cleanup_mask(w*im >= minw*minw_scale, n)
    outim[m] = im[m]
fits.PrimaryHDU(header=hdr, data=outim).writeto(prefix + '-multibin.fits', clobber=True)
#+END_SRC


** DONE Perform the combining
CLOSED: [2015-09-24 Thu 09:06]
#+BEGIN_SRC sh
python multibin-combine.py new-slits-ha-allvels 3e5
python multibin-combine.py new-slits-nii-allvels 2e5
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/new-slits-nii-allvels-multibin.fits
#+END_SRC

*** Wide bands
#+BEGIN_SRC sh
vrange=+000+060               # wide red
python multibin-combine.py new-slits-ha$vrange 3e5
python multibin-combine.py new-slits-nii$vrange 3e4
vrange=-060+000              # wide green
python multibin-combine.py new-slits-ha$vrange 3e4
python multibin-combine.py new-slits-nii$vrange 2e4
vrange=-120-060               # wide blue
python multibin-combine.py new-slits-ha$vrange 3e3
python multibin-combine.py new-slits-nii$vrange 2e3
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+000+060-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-060+000-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-120-060-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+000+060-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-060+000-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-120-060-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Line core V = -10 to +50 km/s
#+BEGIN_SRC sh
redranges='+030+050 +010+030 -010+010'
for vrange in $redranges; do
    python multibin-combine.py new-slits-ha$vrange 4e4 0.0
    python multibin-combine.py new-slits-nii$vrange 4e3 0.0
done
#+END_SRC


#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+030+050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+010+030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-010+010-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Blue flank: V = -70 to -10 km/s
#+BEGIN_SRC sh
blueranges='-030-010 -050-030 -070-050'
for vrange in $blueranges; do
    python multibin-combine.py new-slits-ha$vrange 3e3
    python multibin-combine.py new-slits-nii$vrange 2e3
done
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-030-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-050-030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-070-050-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-030-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-050-030-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-070-050-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


*** Far blue wing: V = -110 to -70 km/s  
We actually calculate out to -130, but we don't use it in the image
#+BEGIN_SRC sh
farblueranges='-090-070 -110-090 -130-110'
for vrange in $farblueranges; do
    python multibin-combine.py new-slits-ha$vrange 1000
    python multibin-combine.py new-slits-nii$vrange 1000
done
#+END_SRC

Instead we overlap with the blue flank above.  The red channel here is the blue channel there
#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-070-050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-090-070-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-110-090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-070-050-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-090-070-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-110-090-$suff.fits
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC


Or, we do use the furthest blue channel, so there is no overlap
#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-090-070-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-110-090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-130-110-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC



*** Near red flank: V = +50 to +110 km/s
#+BEGIN_SRC sh
nearredranges='+050+070 +070+090 +090+110'
for vrange in $nearredranges; do
    python multibin-combine.py new-slits-ha$vrange 3e3
    python multibin-combine.py new-slits-nii$vrange 1e3
done
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+090+110-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+070+090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+050+070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+090+110-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+070+090-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+050+070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

*** Far red wing: V = +110 to +170 km/s
#+BEGIN_SRC sh
farredranges='+110+130 +130+150 +150+170'
for vrange in $farredranges; do
    python multibin-combine.py new-slits-ha$vrange 900
    python multibin-combine.py new-slits-nii$vrange 900
done
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+150+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+130+150-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+110+130-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+150+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+130+150-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+110+130-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC




** [2016-03-08 Tue] Repeat but for semi-wide bands
+ The core of the line is fine with 20 km/s wide bands
+ But for the blue side, it would be good to cover the entire range in 3 bands, rather than 5
+ Currently it is
  + Core :: +030+050 +010+030 -010+010
  + Near blue :: -030-010 -050-030 -070-050
  + Far blue :: -090-070 -110-090
+ So we want to cover the range -10 -> -110, although up to -100 would probably do
  + That is 3 bands of 30
  + -040-010 -070-040 -100-070
+ Or we can extend the bluest band
  + -040-010 -070-040 -120-070


First generate blue maps 
#+BEGIN_SRC sh
bands='-040-010 -070-040 -120-070'
for vrange in $bands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Second, red maps (40 km/s wide bands)
#+BEGIN_SRC sh
bands='+050+090 +090+130 +130+170'
for vrange in $bands; do
    python spectral-map.py ha $vrange
    python spectral-map.py nii $vrange
done
#+END_SRC

Then do binning

#+BEGIN_SRC sh
bands='-040-010 -070-040 -120-070'
for vrange in $bands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC
#+BEGIN_SRC sh
bands='+050+090 +090+130 +130+170'
for vrange in $bands; do
    python multibin-map.py new-slits-ha$vrange.fits
    python multibin-map.py new-slits-nii$vrange.fits
done
#+END_SRC

And combine different bin levels

#+BEGIN_SRC sh
vrange=-040-010
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
vrange=-070-040
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
vrange=-120-070               
python multibin-combine.py new-slits-ha$vrange 1e3 0.0
python multibin-combine.py new-slits-nii$vrange 1e3 0.0
#+END_SRC

#+BEGIN_SRC sh
vrange=+050+090
python multibin-combine.py new-slits-ha$vrange 7e2 0.0
python multibin-combine.py new-slits-nii$vrange 3e2 0.0
vrange=+090+130
python multibin-combine.py new-slits-ha$vrange 6e2 0.0
python multibin-combine.py new-slits-nii$vrange 4e2 0.0
vrange=+130+170
python multibin-combine.py new-slits-ha$vrange 6e2 0.0
python multibin-combine.py new-slits-nii$vrange 4e2 0.0
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha-040-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha-070-040-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha-120-070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii-040-010-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii-070-040-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii-120-070-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-ha+130+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-ha+090+130-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-ha+050+090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

#+BEGIN_SRC sh
suff=multibin
xpaset -p ds9 rgb red
xpaset -p ds9 fits $PWD/new-slits-nii+130+170-$suff.fits
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/new-slits-nii+090+130-$suff.fits
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/new-slits-nii+050+090-$suff.fits
sleep 2
xpaset -p ds9 frame prev
xpaset -p ds9 match frame wcs
xpaset -p ds9 frame next
#+END_SRC

** DONE Calculate [N II]/Ha ratio and [N II] + Ha sum
CLOSED: [2015-09-23 Wed 13:41]
+ [2015-09-16 Wed] I suspect that much of the remaining issues with the spectra calibration are down to variations in throughput between [N II] and Ha
+ [X] We can use the O'Dell & Harris spectrophotometry to tie everything down
  + DS9 region file of the slits [[file:~/Work/RubinWFC3/Tsquared/odell-harris-slits.reg][odell-harris-slits.reg]]
  + Slit D North is the most useful since it is short and overlaps with the vertical 2010 slits
    + It has 6583/6563 = 1.1290/2.8905 = 0.39
    + Our slits there have a raw ratio of about 0.30
      + Correction factor of 1.3
    + But half the slits are obviously lower (what is different about these?)
  + Slit D NE overlaps with horizontal 2013-02 slits
    + It has 6583/6563 = 0.9779/2.8139 = 0.347
    + Our slits show a lot of variation along the length
    + Ranges from 0.25 to 0.35
      + Average correction factor = 1.16
  + Slit 27 W overlaps with horizontal 2013-02 slit
    + It has 6583/6563 = 1.2522/2.9002 = 0.432
    + We see some variation along the length
      + 0.33 at W end
      + 0.3 in middle
      + 0.2 at E end
    + Average correction factor = 1.44
    + This is hard to reconcile with the D north results
  + Slit 27 E
    + 1.0010/2.8700 = 0.35
    + The W end of this section overlaps with the E end of 2013-02 slits
      + where we have ratio = 0.17
      + Correction factor of 0.35/0.17 = 2.06 !!!
    + /but the OH slit is sampling a region where we have no data/
  + Slit D NW
    + Has its E end overlap with W end of 2013-02 slits
    + 1.3658/2.8894 = 0.473 so this is highest ratio yet
    + Our slits give 0.37 around there, and increasing westward
      + Correction factor ~= 0.473/0.37 = 1.28
  + Slit 12 W overlaps with our LL1 slits
    + Has ratio 0.2964/2.8906 = 0.10
    + Our slits have 0.1 there
      + Correction factor of unity?
    + But caution needed since brightest part of the 12 W slit is to the E where we have no data
  + Slit 9-mid overlaps with E end of our 2013-12 slits
    + It has ratio = 0.4899/2.8907 = 0.17
    + Our 2013-12 slits have 0.2 there
      + Correction factor = 0.85
  + Slit 9 W overlaps with middle of our 2013-12 slits
    + 0.4157/2.8907 = 0.14
    + Our 2013-12 slits have 0.313 there
      + Correction factor 0.45
      + This means there is a spurious spatial gradient in [N II]/Ha for the 2013-12 slits 
    + But the 2015 slits have ratio of 0.12 there
      + Correction factor 1.17
  + *Conclusions*
    + 

#+BEGIN_SRC python
from astropy.io import fits

ha = fits.open('new-slits-ha-allvels.fits')['scaled']
nii = fits.open('new-slits-nii-allvels.fits')['scaled']

ratio = nii.data/ha.data
sum_ = ha.data + 1.333*nii.data
nii.data = ratio
ha.data = sum_
nii.writeto('new-slits-nii-over-ha-allvels.fits', clobber=True)
ha.writeto('new-slits-nii-plus-ha-allvels.fits', clobber=True)

#+END_SRC

** Load the spectral map into ds9
This shows the scaled image in ds9
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/new-slits-nii-allvels.fits[3]
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/new-slits-nii-over-ha-allvels.fits
#+END_SRC


*** Revisited [2016-01-26 Tue]
:LOGBOOK:
CLOCK: [2016-01-26 Tue 09:20]--[2016-01-26 Tue 09:41] =>  0:21
:END:
+ Make a new DS9 app to show the maps
+ Copy the necessary files over to  hypatia
  + We needed =Bally-ACS/= and =wfi/= folders from =~/Work/OrionTreasury=
+ Restore the saved file [[file:velmaps-2015-10-16.bck]]
+ Where necessary load up the regions from [[file:blue-knots.reg]]




* Features seen in the isovelocity maps

** Point objects
+ 4410-139
  + Ha only
  + N of LL2
  + is it real?
  + blue shifted only
+ IX Ori - LL 2 - 
+ 4285-458
+ 


** The red bows
:LOGBOOK:
CLOCK: [2015-09-28 Mon 11:53]--[2015-09-29 Tue 09:16] => 21:23
:END:

*** Identification from imaging
I have marked 4 different bows in the region file [[file:red-bow-all.reg]]
+ Red Bow NE
  + This is the one that crosses LL2
+ Red Bow SW
  + This is the one that is just to E of the western "wall"
  + It is not so redshifted as the NE bow
+ Red Bow SE
  + This overlaps on the south wing of the SW bow
  + Best seen on horizontal slits
    + YY1000-2013-02-232 XX < 1250
    + YY0971-2013-02-237 XX < 1265
    + YY0955-2013-02-169 XX < 1254 - this is the strongest
    + YY0936-2013-02-165 XX < 1240 - on the S wing
  + Looks like peak is around V = +22 km/s
  + Also seen on far S end of LL2 vertical slits

+ Red Bow NW
  + This is on the W side of the western "wall"
  + This is identified from the isovel images - doesn't show up well on direct images

* T diagnostics from linewidths
+ We could repeat what we did for the Teresa Atlas Paper, but we only have one slit with [O III] spectrum
+ For the jet knots, assuming they are kinematically homogeneous, we should be able to measure the T from
+ Compact knot in slit spec166
  + FWHM in [N II] = 12.76 km/s
  + FWHM in Ha = 23.77 km/s
  + => thermal FWHM = sqrt((23.77**2 - 12.76**2) (14/13)) = 20.8 km/s
  + So basically 1e4 K, which is not surprising


* The big bowshock
+ There is a giant, possibly double, possibly triple bow
+ It's N wing crosses LL2, and is red-shifted
  + And has measured proper motion
+ The nose looks red-shifted too
+ It would be good to get proper motions of the nose



* Proper motions of the Orion West shocks 
+ [2015-08-26 Wed] Today I discovered that there is a new Massimo Robberto program that has re-observed the whole of Orion with the ACS F775W filter
+ And also various bits with the F130N and F139M WFC3 IR filters
+ This will allow us do to proper motion measurements of all the interesting shocks in our field
+ Relevant images are as follows:
  + JCOL02010 for ACS field W of LL2
  + JCOL09010 (ORIMOS-16) for ACS field just below that, containing the nose of the giant bowshock
  + JCOL03010 ACS includes LL2 and region immediately to W
  + ICOL22030 WFC3 IR image of region W of LL2
  + JCOL05010 ACS field of the big gap between trapezium and LL2
  + JCOL11010 ACS way S with filaments along extension of bright bar
+ Missing images

+ Older images that we might use
  + An [S II] WFPC2 image that covers the circular bubble to the S of LL2 plus the upper partial "nose" of the big bowshock: U8OC2604M from Bally's ACS program 9825
  + [X] We should actually get the entire set of these
    + [2015-08-27 Thu] Downloaded to =/fs/nil/other0/will/orion-bally-wfpc2-2004/=
  + There is a interesting bowshock seen in [S II] to the W of the end of HH269, but not quite as W as the flatter bow that we can see in Ha and NIR
    + RA: 05 34 59.81
    + Dec: -05 23 39.94
    + Image: U8OC1804M
  + This could be a candidate for the same flow as the big bowshock
  + We also need to look into possible correspondences with the molecular outflows from Orion S



* Old stuff on calibration
Most of the following has been superseded. 
** Dealing with the offset between image and spectrum
+ It seems that this is not as constant as I had hoped
  + In the [[id:8685D060-12A9-4E73-B069-11D5315ED8EB][vertical slits]] it varies from 52 to 60 pixels
  + And some slits do not have a reference star to use
+ One solution will be to compare the brightness profiles of the spectrum with that of the slit image
  + For the spectrum, we can sum in wavelength for the entire ha+nii range
  + For the image, we would sum a short width across the slit
+ Then we could either use the cross-correlation, or simple hunting, to find the best offset
+ At the same time, this would give the brightness factor between image and spec
  + We could use this to refine the brightness correction factors


*** Application to the vertical slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:ID:       0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B
:END:
#+name: vertical-image-and-fullspec
| image |    spec | islit | jshift |  fac |  bfac |
|-------+---------+-------+--------+------+-------|
|   202 | 203-204 | 233.6 |   52.5 |  3.9 | 1.143 |
|   124 | 125-127 | 235.5 |   54.5 |  2.7 | 1.431 |
|   206 | 207-208 | 234.6 |     54 |  4.4 | 1.136 |
|   128 | 129-130 | 237.5 |     57 |  4.4 | 2.688 |
|   133 | 134-135 | 239.4 |     58 |    5 | 1.608 |
|   210 | 211-212 | 236.4 |     55 |  4.4 | 1.021 |
|   137 | 138-139 | 241.3 |     60 |  2.8 | 1.550 |
|   214 | 215-216 | 238.4 |     55 |  4.1 | 1.067 |
|   145 | 146-147 | 244.3 |     58 |  2.0 | 5.181 |
|   248 | 249-250 | 254.9 |     68 |  5.4 | 2.400 |
|   219 | 220-221 | 240.0 |   57.5 | 4.35 |     1 |
|   157 | 158-159 | 252.2 |     65 |  7.0 | 6.757 |
|   236 | 237-238 | 247.0 |     63 |  4.2 | 1.122 |
|   240 | 241-242 | 249.5 |     65 |  3.1 | 1.073 |
|   244 | 245-246 | 251.6 |     64 |  2.7 | 1.147 |
|   252 | 253-254 | 258.2 |     69 |  5.4 | 1.678 |

+ Pixel positions of slits (islit in table above) also vary between positions, so I have had to measure all of these
  + They are FITS style 1-based indices
  + The slit width is about 4 pixels
  + But the slit center does not fall on an integer pixel
  + To be safe, we take the 5 pixels: [int(islit) - 3 : int(islit) + 3] 
+ First stab:
  + Read in the images and spectra, and overplot the profiles
  + There are 16 positions now, so we can use a 4 x 4 grid
  + The =bfac= factors are the inter-position image brightness correction factors, calculated [[id:D625BE5F-BE3F-477A-8059-4B0AFEFEED54][below]] - they multiply all the brightnesses
    + On the graphs, I print out =bright = 1/bfac=
    + [2015-08-25 Tue] I am modifying by hand the bfac for 248 from 2.222 to 2.4
      + There is no justification for this, other than that it looks too faint on the maps
  + The =fac= factors are the image-to-spectrum brightness factors - they multiply the image profile so that it matches the spectrum profile
    + So larger factors mean better spectra (compared to what is expected from the image)
    + The most common factor /should/ correspond to equal conditions between image and spectrum. But in general =fac= could be larger or smaller than this.
    + I am assuing that =fac = 4.4= is the default value, and dividing all of them by this when I print the info on the plot
      + There are 4 spectra that have the optimum value of =bfac=:
        + 206, 128, 210, 219
      + Most of the other values are lower
        + This make sense if conditions were deteriorating during the night
        + Then each spectrum is worse than its preceding image
      + But a few are higher, implying improvements since the image:
        + 133, 248, 157, 252
        + These tend to have high values of bfac

#+header: :var table=vertical-image-and-fullspec
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
sns.set_color_codes()

nspec = 12
ny = 512
figfile = 'image-spec-offsets.pdf'
yarray = np.arange(ny)
layout = {'left': 0.05, 'bottom': 0.07, 'right': 0.99, 'top': 0.95,
          'wspace': 0.02, 'hspace': 0.02}
fig, axgrid = plt.subplots(4, 4, sharex=True, sharey=True, gridspec_kw=layout)
tweak = 1.2
for (imid, specid, islit, jshift, factor, bfac), ax in zip(table, axgrid.flat):
    imfile = 'posiciones/spm{}-ardec.fits'.format(imid)
    specfile = 'spm{}h.fits'.format(specid)
    islit = int(float(islit))
    jshift = float(jshift)
    factor = float(factor)
    bfac = float(bfac)

    imhdu, = fits.open(imfile)
    spechdu, = fits.open(specfile)

    imhdu.data -= 1170.0  # remove bias
    improfile = imhdu.data[:, islit-3:islit+3].sum(axis=1)
    specprofile = spechdu.data.sum(axis=1)

    ax.plot(yarray+jshift, bfac*improfile/(1e4*tweak), label='image',
            c='r', lw=2, alpha=0.3)
    ax.plot(yarray, bfac*specprofile/(1e4*factor), label='spectrum',
            c='k', lw=0.6)

    text_pattern = 'pos #{} shift = {:.1f} factor = {:.2f} bright = {:.2f}'
    text = text_pattern.format(imid, jshift, factor/4.4, 1.0/bfac)
    ax.text(300, 0.1, text, ha='center', va='bottom', fontsize=7)

axgrid[0, 0].legend(fontsize='xx-small', loc='upper left')
axgrid[0, 0].set_xlim(0.0, 640)
axgrid[0, 0].set_ylim(0.0, 5.5)
axgrid[-1, 2].set_xlabel('pixel')
axgrid[1, 0].set_ylabel('intensity')
fig.suptitle('Alignment and flux calibration of vertical slits')
fig.set_size_inches(11, 8.5)
fig.savefig(figfile)


#+END_SRC

#+RESULTS:
[[file:/Users/will/Dropbox/SPMJAN10/reducciones/image-spec-offsets.pdf]]


*** Repeat for the horizontal slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:ID:       6CE33437-BC17-49AA-B048-5BACCBB8C99B
:END:

#+name: horizontal-image-and-fullspec
| image |    slit |  night | jslit | dj | ishift | fac | bright | bgrad |
|-------+---------+--------+-------+----+--------+-----+--------+-------|
|   165 | 166-167 | 160213 | 468.5 | 12 |     67 | 5.5 |  0.777 |   1.4 |
|   169 | 170-171 | 160213 | 468.5 | 12 |     65 | 5.3 |  0.744 |   1.4 |
|   237 | 238-239 | 160213 | 467.0 | 12 |     74 | 5.5 |  0.969 |   1.0 |
|   232 | 233-234 | 160213 | 468.5 | 12 |     75 | 5.8 |  1.000 |   1.0 |
|   226 | 227-228 | 160213 | 468.5 | 12 |     75 | 6.0 |  0.998 |     1 |
|   149 | 150-151 | 160213 | 468.0 | 12 |     70 | 5.0 |  0.825 |   1.7 |
|   154 | 155-156 | 160213 | 467.2 | 12 |     67 | 5.2 |  0.862 |   1.7 |
|   159 | 160-161 | 160213 | 467.5 | 12 |     67 | 5.4 |  0.818 |   1.7 |
|   033 | 034-035 | 150213 | 467.0 | 12 |     67 | 5.5 |  0.837 |   0.8 |
|   029 | 030-031 | 150213 | 465.2 |  6 |     76 | 6.0 |  0.847 |   0.8 |

+ [2015-08-21 Fri] I have measured the y-pixel position of the slit (=jslit=) on the images - it is roughly constant, but not quite
  + We have to be careful to use the "Image" coordinate, not the "Physical" one
+ The slit width is 150 micron for all exept =029= where it is 70 micron
  + This is reflected in the nominal pixel width of the slit, which is given in the =dj= column
  + The slit profile is not rectangular - looks more triangular, or perhaps an ellipse
+ The bias seems to have been removed, but there is a residual signal in the image+slits of 6 to 12 counts, which varies in J but not in I
  + At the J of the slit it looks to be about 9
+ It is hard to tell whether there is anything that should be removed from the spectra
  + But looking at the x-profiles of the line-free parts of the PV image, as compared with the Ha line, I think there is a residual bias of about 3
  + When multiplied by NY=1017, this gives 3051 as the value that should be subtracted from the y-summed profile
+ I have found a better way to extract the slit profile from the image:
  + Sum over a wide window that includes the /entire/ slit profile
  + But then subtract off the average of the two rows above and below this window, multiplied by the window width
  + This is equivalent to interpolating the bg underneath the slit profile
  + It seems to give better results than the previous method
+ [2015-08-22 Sat] The bright and bgrad columns can now be filled in from the calculation [[id:23506DE2-4D98-40C5-961F-4715BE7A1F55][down here]]
  + Note that *bright is the reciprocal of bfac*, which I used in the table for the vertical slits 
  + The bgrad is for a linear E-W gradient correction to the brightnesses
  + I rounded it to 1 decimal place, since it is not that well determined
+ [2015-08-25 Tue] I redid the calculation of the =bright= factors, see [[id:23506DE2-4D98-40C5-961F-4715BE7A1F55][down here]], so we are now using the =corrnorm= column of the last table
+ Also experimented with increasing bgrad from 1.5 to 1.7 for 149, 154, 159

#+header: :var table=horizontal-image-and-fullspec
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
sns.set_color_codes()

nspec = 10
nx = 625
figfile = 'image-spec-offsets.pdf'
xarray = np.arange(nx)
layout = {'left': 0.05, 'bottom': 0.07, 'right': 0.99, 'top': 0.95,
          'wspace': 0.02, 'hspace': 0.02}
fig, axgrid = plt.subplots(3, 4, sharex=True, sharey=True, gridspec_kw=layout)
tweak = 1.0
for (imid, specid, night, jslit, dj, ishift,
     factor, bright, bgrad), ax in zip(table, axgrid.flat):
    imfile = 'spm{:03d}_ardec.fits'.format(imid)
    specfile = '../{}/reducciones/spm{}_bcr.fits'.format(night, specid)
    jslit = int(float(jslit))
    dj = int(dj)
    ishift = float(ishift)
    factor = float(factor)
    bfac = 1./float(bright)

    imhdu, = fits.open(imfile)
    spechdu, = fits.open(specfile)

    imhdu.data -= 9.0  # remove residual bias
    spechdu.data -= 5.5
    # limits of slit (FWZI)
    j1, j2 = jslit-dj//2, jslit+dj//2
    improfile = imhdu.data[j1:j2, :].sum(axis=0)
    # take average profile either side of the slit
    offprofile = 0.5*(imhdu.data[j1-1, :] + imhdu.data[j2, :])
    # and subtract (multiplied by slit width) to get the pure slit profile
    improfile -= dj*offprofile
    # Now find the gradient correction
    NX = len(improfile)
    x = np.arange(NX)/NX - 0.5
    grad_corr = 1.0 - 1.24*(bgrad - 1.0)*x

    specprofile = spechdu.data.sum(axis=0)

    ax.plot(xarray-ishift, (12.0/dj)*bfac*grad_corr*improfile/(1e4*tweak),
            label='image', c='r', lw=2, alpha=0.3)
    ax.plot(xarray, bfac*grad_corr*specprofile/(1e4*factor),
            label='spectrum', c='k', lw=0.6)

    text_pattern = 'pos #{} shift = {:.1f} factor = {:.2f} bright = {:.2f}'
    text = text_pattern.format(imid, ishift, factor/5.5, 1.0/bfac)
    ax.text(300, 0.1, text, ha='center', va='bottom', fontsize=7)

axgrid[0, 0].legend(fontsize='xx-small', loc='upper left')
axgrid[0, 0].set_xlim(-80, 640)
axgrid[0, 0].set_ylim(0.0, 1.5)
axgrid[-1, 2].set_xlabel('pixel')
axgrid[1, 0].set_ylabel('intensity')
fig.suptitle('Alignment and flux calibration of horizontal slits')
fig.set_size_inches(11, 8.5)
fig.savefig(figfile)


#+END_SRC

#+RESULTS:
[[file:/Users/will/Dropbox/SPMFEB13/WesternShocks/image-spec-offsets.pdf]]




** Datasets that we will use

*** Odd slits that we don't want to forget
+ 2007 Jan
  + Some of the LL1 slits show blueshifted emission at their N end
    + spec060-oiii
    + spec055-ha
    + spec068-ha
    + spec073-ha
  + Unfortunately, most of the slits were put too far South to see this
  + The [O III] slits from 2013 Dec Orion S don't quite go far west enough to reach this, and the same is true of the Orion S slits from 2007
+ 2010 Jan
  + spm078 (Ha, [N II])
  + spm085 ([S II])
  + These are vertical slits to the W of LL2 that help fill in that region to the E of the N ends of the other vertical slits
  + They cross the N wing of the putative big bow
    + Clearly redshifted, helping establish continuity with wing seen in LL2 slits
    + Also we can measure the electron density
  + We also cross a bizarre blue-shited feature to WNW of LL2
    + Looks like a classical triangular bowshock shape in the PV diagram
+ 2013 Feb
  + spm024 (Ha, [N II])
  + This is a horizontal slit across LL2 (just N of star)
  + It shows that a blue emission layer stops just in front of the LL2 bow
+ 2013 Dec
  + There is one extra position just below LL2 - spm116
    + Unfortunately, it is low s/n
+ 2015 Feb
  + 0013 and 0003
  + More horizontal slits in the middle part
  + These are similar to the slits from Dec 2013
*** Dec 2013
+ These are in [[file:~/Dropbox/papers/LL-Objects/SPMDIC13/][file:~/Dropbox/papers/LL-Objects/SPMDIC13/]]
+ They are horizontal slits in between LL2 and Orion S
*** Feb 2015
+ These are in [[file:~/Dropbox/SPMFEB15/][file:~/Dropbox/SPMFEB15/]]
+ They are horizontal slits in between LL2 and Orion S with a new chip
*** Jan 2007 and Feb 2006
:PROPERTIES:
:ID:       CB720DCF-0A33-4C51-9A0B-932030BC0E45
:END:
+ These are the HH 505 observations in [[file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/][file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/]]
+ And also in [[file:~/Work/SPM2005/]] for the older ones
  + Not sure why the folder is called 2005 rather than 2006
  + With reduced versions of these in [[file:~/Work/SPM2007/Reduced/HH505/slits/SPMha/]]
+ They are mainly vertical, but there are a few horizontal slits
**** Original database for vertical slits
+ Taken from [[file:~/Work/SPM2007/Reduced/HH505/slits/reducciones/jw0.csv][jw0.csv]]
+ I have removed the following columns from the table because they were constants:
  + lamrest = 6562.82
  + lamscale = 0.04375213
  + d vel =  2
  + NX = 300
  + NY = 512
  + ufiddle = 0
  + fluxfiddle = 1
|         |         RA |        Dec | dataset | lam0 | helio corr | ypixscale | jcenter | True File           |
|---------+------------+------------+---------+------+------------+-----------+---------+---------------------|
| jw0e068 | -0.6828000 |  -15.91200 |       1 | 6557 |      -13.3 |      0.62 |     316 | spec2062-ha.fits    |
| jw0e043 | -0.4308000 | -0.7920000 |       2 | 6558 |     -21.53 |     0.623 |     182 | spec324-halpha.fits |
| jw0e024 | -0.2388000 |   5.579999 |       2 | 6558 |      -21.5 |     0.623 |     183 | spec319-halpha.fits |
| jw0e022 | -0.2243999 |  -38.23200 |       1 | 6557 |     -12.91 |      0.62 |     317 | spec2038-ha.fits    |
| jw0e004 | -0.0419999 | -0.2160000 |       2 | 6558 |     -20.92 |      0.62 |     200 | spec261-halpha.fits |
| jw0w012 |   0.116399 |   3.671999 |       2 | 6558 |     -21.03 |     0.622 |     196 | spec271-halpha.fits |
| jw0w020 |   0.202799 |   3.960000 |       2 | 6558 |     -21.09 |     0.621 |     193 | spec277-halpha.fits |
| jw0w040 |  0.4019999 |   6.335999 |       2 | 6558 |     -21.15 |     0.622 |     192 | spec282-halpha.fits |
| jw0w056 |  0.5604000 |   6.515999 |       2 | 6558 |     -21.21 |     0.622 |     191 | spec287-halpha.fits |
| jw0w062 |  0.6179999 |   6.551999 |       2 | 6558 |     -21.27 |     0.619 |     189 | spec292-halpha.fits |
| jw0w086 |  0.8628000 |   7.955999 |       2 | 6558 |     -21.32 |     0.621 |     189 | spec297-halpha.fits |
| jw0w092 |  0.9227999 |  -36.21600 |       1 | 6557 |     -12.97 |      0.62 |     316 | spec2042-ha.fits    |
| jw0w122 |   1.220399 |   5.543999 |       2 | 6558 |     -21.39 |     0.619 |     187 | spec304-halpha.fits |
| jw0w143 |   1.433999 |  -35.13600 |       1 | 6557 |     -13.04 |     0.622 |     191 | spec2046-ha.fits    |
| jw0w186 |   1.863599 |  -34.77600 |       1 | 6557 |      -13.1 |     0.621 |     316 | spec2050-ha.fits    |
| jw0w238 |   2.379599 |  -14.68800 |       1 | 6557 |     -13.18 |     0.619 |     316 | spec2054-ha.fits    |
| jw0w300 |   2.996399 |  -16.27200 |       1 | 6557 |     -13.24 |     0.619 |     316 | spec2058-ha.fits    |
| jw0w323 |   3.231599 |   3.887999 |       2 | 6558 |     -21.47 |     0.623 |     184 | spec312-halpha.fits |

+ They seem to be from two different sets:
  + The 20XX-ha ones from Jan 2007
    + There are also 2022, 2076, 2081 that aren't used here
    + 2022 is a horizontal slit
    + 2076 and 2081 are [O III] Orion S slits (why did we never use these?)
  + and the XXX-halpha ones from Feb 2006
    + Unfortunately, I don't have the spmXXX-ardec.fits files for those
    + [X] Write to Teresa and see if she has them
    + An example image+slit is pp260.fits
    + Now she has sent these - they are in [[file:~/Dropbox/papers/LL-Objects/feb2006/][file:~/Dropbox/papers/LL-Objects/feb2006/]]


*** Feb 2013
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:END:
:LOGBOOK:
CLOCK: [2015-08-22 Sat 17:29]--[2015-08-22 Sat 18:29] =>  1:00
:END:
+ These are in [[file:~/Dropbox/SPMFEB13/]]
  + Either in [[file:~/Dropbox/SPMFEB13/WesternShocks/]]
  + Or in one of the date-named folders
**** WCS values 
:PROPERTIES:
:ID:       F6ED03C3-EC32-4444-9746-4E3C2A15CD63
:END:
+ These are with a different chip, and with binning of 3x2
+ Here I calculate a similar table to what I did for the [[id:6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D][vertical slits]]
+ This time we have dy = 0.52 arcsec
+ The PA is within 0.5 deg of 90
  + But it does vary about 1 deg between the two nights
#+name: horizontal-all-parameters
#+header: :var intable=horizontal-image-and-fullspec
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

table = [['image', 'spectrum', 'grating',
          'RA0', 'Dec0', 'dy', 'PA',
          'airmass', 'weight', 'delta'], None]
for imid, specid, night, jslit, dj, ishift, fac, bright, bgrad in intable:
    fn = 'spm{:03d}_ardec.fits'.format(imid)
    hdu, = fits.open(fn)

    #
    # Find pixel scale along slit and position angle of slit
    #
    dRA_arcsec = hdu.header['CD1_1']*3600*np.cos(np.radians(hdu.header['CRVAL2']))
    dDEC_arcsec = hdu.header['CD2_1']*3600
    dy = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))
    grating = hdu.header['GRATING']
    airmass = hdu.header['AIRMASS']
    #
    # Find the RA and Dec of the spectral slit center
    #

    # Pixel coords of spectrum slit center on image (in FITS 1-based convention)
    # I *think* the shift along the slit goes the other way here
    i0, j0 = 0.5*(1 + hdu.header['NAXIS1']) + ishift, jslit

    # Convert to world coordinates
    wcs = WCS(hdu.header)
    # Crazy packing/unpacking required to use single scalar coords
    (RA0, Dec0), = wcs.all_pix2world([[i0, j0]], 1)

    # Test it by hand using small-patch-of-sky approximation
    c = 1./np.cos(np.radians(-5.42))
    RA1 = (hdu.header['CRVAL1']
           + c*hdu.header['CD1_1']*(i0 - hdu.header['CRPIX1'])
           + c*hdu.header['CD1_2']*(j0 - hdu.header['CRPIX2']))
    Dec1 = (hdu.header['CRVAL2']
            + hdu.header['CD2_1']*(i0 - hdu.header['CRPIX1'])
            + hdu.header['CD2_2']*(j0 - hdu.header['CRPIX2']))
    assert(abs(RA1 - RA0) < 1e-6 )
    assert(abs(Dec1 - Dec0) < 1e-6 )

    #
    # Find total weight factor, combining inter-image factor with the
    # image-to-spectrum factor
    #
    weight = (fac/5.5)*bright

    # Find linear E-W gradient to correct
    delta = -1.24*(bgrad - 1.0)

    table.append([imid, int(imid)+1, grating, 
                  '{:.5f}'.format(RA0),
                  '{:.5f}'.format(Dec0),
                  '{:.4f}'.format(dy), '{:.3f}'.format(PA),
                  '{:.2f}'.format(airmass),
                  '{:.2f}'.format(weight), '{:.2f}'.format(delta),
    ])
#+END_SRC

#+RESULTS: horizontal-all-parameters
| image | spectrum | grating |      RA0 |     Dec0 |     dy |     PA | airmass | weight | delta |
|-------+----------+---------+----------+----------+--------+--------+---------+--------+-------|
|   165 |      166 |      12 | 83.62409 | -5.44097 | 0.5248 | 90.496 |    2.05 |   0.78 | -0.50 |
|   169 |      170 |      13 | 83.62424 | -5.43831 | 0.5251 | 90.449 |    2.48 |   0.72 | -0.50 |
|   237 |      238 |      11 | 83.62752 | -5.43613 | 0.5249 | 90.421 |    1.25 |   0.97 | -0.00 |
|   232 |      233 |       9 | 83.62683 | -5.43216 | 0.5243 | 90.399 |    1.25 |   1.05 | -0.00 |
|   226 |      227 |      10 | 83.61872 | -5.42951 | 0.5252 | 90.462 |    1.28 |   1.09 | -0.00 |
|   149 |      150 |       4 | 83.63349 | -5.42399 | 0.5249 | 90.561 |    1.38 |   0.75 | -0.87 |
|   154 |      155 |       5 | 83.63366 | -5.42268 | 0.5247 | 90.579 |    1.51 |   0.81 | -0.87 |
|   159 |      160 |       9 | 83.63375 | -5.42026 | 0.5244 | 90.651 |    1.69 |   0.80 | -0.87 |
|    33 |       34 |      -4 | 83.62033 | -5.41655 | 0.5149 | 89.637 |    1.31 |   0.84 |  0.25 |
|    29 |       30 |      -4 | 83.61937 | -5.41543 | 0.5148 | 89.729 |    1.26 |   0.92 |  0.25 |


**** Inter-position brightness calibration
:PROPERTIES:
:ID:       23506DE2-4D98-40C5-961F-4715BE7A1F55
:END:
+ I have measured brightness in several parts of the image
  + Shown in table below, where *-ed columns are normalised to =226= which seems to be the best
+ There are problems with large-scale brightness gradients in some exposures
  + Particularly E-W
  + I have compared with =219= of the horizontal slits
  + =226= looks fine, but =149= has a clear spurious gradient - falling from W to E
  + =033= and =029= on the other hand have a gradient the other way
  + This is shown in the =W/E= column of the table, which shows the average ratio between the West and East normalizations
  + So we can divide the images into 3 groups:
    + Fine :: 237, 232, 226 (W/E ~= 1)
    + West bias :: 165, 169, 149, 154, 159 (W/E ~= 1.45)
    + East bias :: 033, 029 (W/E ~= 0.8)
| image |  NE |  NW |  SW |  SE |  *NE |  *NW |  *SW |  *SE | Mean          | W/E             |
|-------+-----+-----+-----+-----+------+------+------+------+---------------+-----------------|
|   165 | 507 | 435 | 434 | 160 | 0.69 | 0.87 | 0.82 | 0.54 | 0.73 +/- 0.07 | 1.39 +/- 0.13   |
|   169 | 470 | 426 | 405 | 149 | 0.64 | 0.85 | 0.76 | 0.50 | 0.69 +/- 0.08 | 1.42 +/- 0.10   |
|   237 | 685 | 485 | 491 | 267 | 0.94 | 0.97 | 0.93 | 0.89 | 0.93 +/- 0.02 | 1.04 +/- 6.5e-3 |
|   232 | 700 | 473 | 511 | 272 | 0.96 | 0.94 | 0.96 | 0.91 | 0.94 +/- 0.01 | 1.02 +/- 0.04   |
|   226 | 730 | 502 | 530 | 299 |    1 |    1 |    1 |    1 | 1             | 1               |
|   149 | 490 | 470 | 406 | 138 | 0.67 | 0.94 | 0.77 | 0.46 | 0.71 +/- 0.10 | 1.54 +/- 0.14   |
|   154 | 508 | 466 | 418 | 138 | 0.70 | 0.93 | 0.79 | 0.46 | 0.72 +/- 0.10 | 1.52 +/- 0.19   |
|   159 | 515 | 479 | 436 | 154 | 0.71 | 0.95 | 0.82 | 0.52 | 0.75 +/- 0.09 | 1.46 +/- 0.12   |
|   033 | 579 | 294 | 355 | 238 | 0.79 | 0.59 | 0.67 | 0.80 | 0.71 +/- 0.05 | 0.79 +/- 0.05   |
|   029 | 581 | 307 | 356 | 224 | 0.80 | 0.61 | 0.67 | 0.75 | 0.71 +/- 0.04 | 0.83 +/- 0.07   |
#+TBLFM: $6=$-4/730;f2::$7=$-4/502;f2::$8=$-4/530;f2::$9=$-4/299;f2::$10=vmeane($-4..$-1);f2::$11=vmeane([$7/$6, $8/$9]);f2

+ So to correct the brightness gradients, we use the following:
  + For =149=, we have brightness the same brightness as 226 in the W side, but 0.5 times the brightness in the E side
  + So we will try multiplying by a linear function =(1 + delta*(i - 0.5*NX)/NX)=
  + For this case, we want (1 + 0.5 \delta)/(1 - 0.5 \delta) = 0.5 (remember that i increases from W to E)
    + => 1 + 0.5 \delta = 0.5 - 0.25 \delta => 0.5 = -0.75 \delta => \delta = -2/3
    + This is for a case W/E = 1.54 and it should scale with (W/E - 1)
    + So we get \delta = -1.24 (W/E - 1)
+ The columns "Mean" and "W/E" get copied to columns =bfac= and =bgrad= respectively in the [[id:6CE33437-BC17-49AA-B048-5BACCBB8C99B][table above]]
+ [2015-08-25 Tue] I was not satisfied with the brightness normalizations
  + Some slits, notably 149, 154, 159 seem to be too bright in the combined image
  + So I have remeasured the brightness in a central point (the bright clump just to the W of the nose of the giant bowshock)
  + This gives slightly higher normalizations for those slits
  + *BUT* we also need to account for the affect of the \delta correction on the reference point
    + X0 = NX/2 = 312
    + From the table, the Xpix values of the reference point can be smaller or larger than that
    + So there is a further correction factor dcorr = 1 + \delta (Xpix - X0)/NX, which we have to /multiply/ the brightness norms by
    + I copied the delta values from the table [[id:F6ED03C3-EC32-4444-9746-4E3C2A15CD63][here]]
  + The result is that the corrections are closer to unity for nearly all the slits

| image | bright | Xpix |  norm | delta | dcorr | corrnorm |        |
|-------+--------+------+-------+-------+-------+----------+--------|
|   165 |    677 |  344 | 0.798 | -0.50 | 0.974 |    0.777 | 2719.5 |
|   169 |    646 |  341 | 0.762 | -0.50 | 0.977 |    0.744 |  2604. |
|   237 |    822 |  328 | 0.969 | -0.00 | 1.000 |    0.969 | 3391.5 |
|   232 |    848 |  334 |     1 | -0.00 | 1.000 |    1.000 |  3500. |
|   226 |    846 |  389 | 0.998 | -0.00 | 1.000 |    0.998 |  3493. |
|   149 |    673 |  284 | 0.794 | -0.87 | 1.039 |    0.825 | 2887.5 |
|   154 |    700 |  280 | 0.825 | -0.87 | 1.045 |    0.862 |  3017. |
|   159 |    663 |  279 | 0.782 | -0.87 | 1.046 |    0.818 |  2863. |
|   033 |    694 |  370 | 0.818 |  0.25 | 1.023 |    0.837 | 2929.5 |
|   029 |    697 |  386 | 0.822 |  0.25 | 1.030 |    0.847 | 2964.5 |
#+TBLFM: $4=$2/848;f3::$6=1 + $-1 ($3 - 312)/625 ;f3::$7=$-3 $-1; f3::$8=3500 $-1
*** Jan 2010
:LOGBOOK:
CLOCK: [2015-08-16 Sun 18:29]--[2015-08-16 Sun 19:04] =>  0:35
:END:
+ Copied files to [[file:~/Dropbox/SPMJAN10/reducciones/][~/Dropbox/SPMJAN10/reducciones/]]
+ Looking at which ones to use to see if I agree with Tere
**** WCS values and per-slit weighting
:PROPERTIES:
:ID:       6BFD88F6-71FD-48D3-B8E4-5FF55A3B3D9D
:END:
+ Alba's coordinates seem to be for the center of the slit in the image+slit
+ dWav = 0.043752133846283 Ang (2 km/s)
+ dy = 0.6229 arcsec (see table below)
  + range is 0.6211 to 0.6249
+ PA does vary from slit to slit: 3.13 to 3.18
+ In both cases, over 512 pixels, the variation in PA and dy correspond to only a couple of pixels
+ Now we gather all the needed information into the following table
  + We calculate the (RA0, Dec0) of the slit center (taking into account the =jshift= values)
  + We calculate the pixel scale and PA of the slit
  + We calculate a total weight by multiplying together the inter-position and the image-to-spectrum values

#+name: vertical-all-parameters
#+header: :var intable=vertical-image-and-fullspec
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

table = [['image', 'spectrum', 'RA0', 'Dec0', 'dy', 'PA', 'weight'], None]
for imid, specid, islit, jshift, fac, bfac in intable:
    fn = 'spm{}-ardec.fits'.format(imid)
    hdu, = fits.open(fn)

    #
    # Find pixel scale along slit and position angle of slit
    #
    dRA_arcsec = hdu.header['CD1_2']*3600*np.cos(np.radians(hdu.header['CRVAL2']))
    dDEC_arcsec = hdu.header['CD2_2']*3600
    dy = np.hypot(dRA_arcsec, dDEC_arcsec)
    PA = np.degrees(np.arctan2(dRA_arcsec, dDEC_arcsec))

    #
    # Find the RA and Dec of the spectral slit center
    #

    # Pixel coords of spectrum slit center on image (in FITS 1-based convention)
    i0, j0 = islit, 0.5*(1 + hdu.header['NAXIS2']) - jshift

    # Convert to world coordinates
    wcs = WCS(hdu.header)
    # Crazy packing/unpacking required to use single scalar coords
    (RA0, Dec0), = wcs.all_pix2world([[i0, j0]], 1)

    # Test it by hand using small-patch-of-sky approximation
    c = 1./np.cos(np.radians(-5.42))
    RA1 = (hdu.header['CRVAL1']
           + c*hdu.header['CD1_1']*(i0 - hdu.header['CRPIX1'])
           + c*hdu.header['CD1_2']*(j0 - hdu.header['CRPIX2']))
    Dec1 = (hdu.header['CRVAL2']
            + hdu.header['CD2_1']*(i0 - hdu.header['CRPIX1'])
            + hdu.header['CD2_2']*(j0 - hdu.header['CRPIX2']))
    assert(abs(RA1 - RA0) < 1e-6 )
    assert(abs(Dec1 - Dec0) < 1e-6 )

    #
    # Find total weight factor, combining inter-image factor with the
    # image-to-spectrum factor
    #
    weight = (fac/4.4)/bfac

    table.append([imid, int(imid)+1,
                  '{:.5f}'.format(RA0),
                  '{:.5f}'.format(Dec0),
                  '{:.4f}'.format(dy), '{:.3f}'.format(PA),
                  '{:.4f}'.format(weight),
    ])
#+END_SRC

#+RESULTS: vertical-all-parameters
| image | spectrum |      RA0 |     Dec0 |     dy |    PA | weight |        |
|-------+----------+----------+----------+--------+-------+--------+--------|
|   202 |      203 | 83.62012 | -5.42575 | 0.6246 | 3.132 | 0.7755 | 3877.5 |
|   124 |      125 | 83.61775 | -5.42765 | 0.6222 | 3.379 | 0.4288 |  2144. |
|   206 |      207 | 83.61646 | -5.42573 | 0.6227 | 3.300 | 0.8803 | 4401.5 |
|   128 |      129 | 83.61513 | -5.42787 | 0.6231 | 3.322 | 0.3720 |  1860. |
|   133 |      134 | 83.61537 | -5.42226 | 0.6231 | 3.259 | 0.7067 | 3533.5 |
|   210 |      211 | 83.61386 | -5.42573 | 0.6229 | 3.283 | 0.9794 |  4897. |
|   137 |      138 | 83.61278 | -5.42226 | 0.6232 | 3.270 | 0.4106 |  2053. |
|   214 |      215 | 83.61140 | -5.42547 | 0.6247 | 3.132 | 0.8733 | 4366.5 |
|   145 |      146 | 83.61005 | -5.42080 | 0.6218 | 3.358 | 0.0877 |  438.5 |
|   248 |      249 | 83.60913 | -5.42673 | 0.6231 | 3.218 | 0.5523 | 2761.5 |
|   219 |      220 | 83.60811 | -5.42615 | 0.6227 | 3.331 | 0.9886 |  4943. |
|   157 |      158 | 83.60713 | -5.42289 | 0.6211 | 3.373 | 0.2354 |  1177. |
|   236 |      237 | 83.60653 | -5.42631 | 0.6233 | 3.220 | 0.8508 |  4254. |
|   240 |      241 | 83.60476 | -5.42649 | 0.6236 | 3.256 | 0.6566 |  3283. |
|   244 |      245 | 83.60297 | -5.42626 | 0.6249 | 3.201 | 0.5350 |  2675. |
|   252 |      253 | 83.60148 | -5.42675 | 0.6229 | 3.335 | 0.7314 |  3657. |
#+TBLFM: $8=5000 $-1


***** Offset along slit                                            :noexport:
:PROPERTIES:
:ID:       8685D060-12A9-4E73-B069-11D5315ED8EB
:END:
+ spm124
  + Star position is y = 270.5
  + Same star position in spec125-ha is y = 325
  + Shift of 325 - 270.5 = 54.5 pixels
+ spm137
  + Star position is y = 291
  + In spec138-ha it is y = 351
  + Shift of = 351 - 291 = 60

| spm124 | 270.5 | spec125 |   325 | 54.5 |
| spm202 |   359 | spec203 | 411.5 | 52.5 |
| spm206 |   104 | spec207 |   158 |   54 |
| spm137 |   291 | spec138 |   351 |   60 |
| spm219 | 320.5 | spec220 |   378 | 57.5 |
#+TBLFM: $5=$4 - $2

+ Unfortunately, the offset varies from spectrum to spectrum, which is odd
+ [2015-08-18 Tue] This is now calculated more rigorously [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][above]]

**** Which to use
***** Positions in Alba's set that are acceptable
:PROPERTIES:
:ID:       D625BE5F-BE3F-477A-8059-4B0AFEFEED54
:END:
202, 124, 206, 133(+), 210, 137, 214, 248(+), 219, 236, 240, 244, 252

|  ID |      |  Norm | Inverse | Bright |  Norm | Inverse |
|-----+------+-------+---------+--------+-------+---------|
| 202 | 2083 | 0.875 |   1.143 |   2087 | 0.939 |   1.065 |
| 124 | 1900 | 0.699 |   1.431 |   1879 | 0.726 |   1.377 |
| 206 | 2089 | 0.880 |   1.136 |   2101 | 0.953 |   1.049 |
| 128 | 1558 | 0.372 |   2.688 |    nan |   nan |     nan |
| 133 | 1819 | 0.622 |   1.608 |   1780 | 0.624 |   1.603 |
| 210 | 2192 | 0.979 |   1.021 |   2141 | 0.994 |   1.006 |
| 137 | 1843 | 0.645 |   1.550 |   1913 | 0.760 |   1.316 |
| 214 | 2148 | 0.937 |   1.067 |   2125 | 0.977 |   1.024 |
| 145 | 1372 | 0.193 |   5.181 |    nan |   nan |     nan |
| 248 | 1640 | 0.450 |   2.222 |   1615 | 0.455 |   2.198 |
| 219 | 2214 |     1 |       1 |   2124 | 0.976 |   1.025 |
| 157 | 1324 | 0.148 |   6.757 |    nan |   nan |     nan |
| 236 | 2100 | 0.891 |   1.122 |   2070 | 0.921 |   1.086 |
| 240 | 2143 | 0.932 |   1.073 |   2147 |     1 |       1 |
| 244 | 2080 | 0.872 |   1.147 |   2017 | 0.867 |   1.153 |
| 252 | 1792 | 0.596 |   1.678 |   1792 | 0.637 |   1.570 |
#+TBLFM: $3=($-1 - 1170)/(2214 - 1170);f3::$4=1/$-1;f3::$6=($-1 - 1170)/(2147 - 1170);f3::$7=1/$-1;f3

+ The Inverse column /used/ to agree closely with Alba's values
+ But now it does not, because I realised that the radec images have not had the bias subtracted!
+ [2015-08-17 Mon] Dones it again to include more positions - new version is in columns 2 to 4
+ Note that values from this table are used [[id:0B8D02D8-4C57-48A1-8F17-6AD60BFA1A7B][above]] to calculate the slit normalizations

***** Positions in Alba's set that are bad
128(+), 101, 145, 157, 173
****** Rehabilitation of some of these positions
+ From my experience with the image-spectrum calibration, there is often a big difference between the quality of the image and that of hte spectrum
+ So we shouldn't rule out a position, just based on a poor image
+ Worth saving:
  + 128 :: slots in right next to 133
  + 145 :: goes just before 248
  + 157 :: goes before 236
+ Still terrible: 101 (no spectrum), 173 (just bad)
***** Positions over to the NE
spm078, spm085
***** Other positions omitted ny Alba
+ spm142 - no spectrum
+ spm150 - ha spec exists, but looks weak and Tere says no
+ spm154 - no spectrum
+ spm161 - same as 150 but even worse
+ spm224 - has sii spec but no ha
+ spm231 - no spectrum
**** Message from Teresa [2010-02-18 Thu]
: Acabo de terminar las reducciones de las observaciones de Enero. Al
: final nos quedamos con 16 posiciones, eliminé 7 posiciones
: porque las observé con muchas nubes por lo que no obtuve buenos
: resultados, lo bueno fué que en la siguiente noche pude obtener
: estas posiciones o cercanas a ellas. De cualquier manera las reduje
: por si decidimos incluirlas.
: 
: Las reducciones estan en: /fs/tungol/home0/LEEDS/teresa/SPMENE10/reducciones
: 
: incluyo también la bitacora en pdf. Las posiciones que no tomé en
: cuenta para hacer los mapas fueron:
: 
: No incluidas        Slit cercana o casi en la misma posición que la anterior
: spm128                   spm133 (se ve mucho mejor que spm128)
: spm231                   spm248
: spm150                   spm224
: spm157                   spm236
: spm173                   spm252
: spm161
: spm129                   spm133
: 
: Hice la astrometría, las imagen+slit corregidas están en el directorio
: llamado "posiciones" adentro del direcotorio "reducciones"
: También hice dos posiciones al Este de la región observada. Están la
: oeste de HH 505, las observé en Halpha y [S II]:
: spm078 (image+slit), spm085 (image+slit). Podemos obtener la densidad
: en estas posiciones.
: 
: Para la posición de spm219 tomé los espectros en Ha (spm220,221),
: [SII] (spm225,226) y [OIII] (spm228,229)
: Los espectros corregidos en longitud de onda los puse en:
: 
: /fs/tungol/home0/LEEDS/teresa/SPMENE10/observaciones/SPM{ha,nii,siis,siil,oiii}
: 
: Después de hacer todo el trabajo hice el primer intento de los mapas
: de momentos de Halpha y [NII] :D a ver que te parecen,
: todos los archivos  estan en
: /fs/tungol/home0/LEEDS/teresa/SPMENE10/observaciones:
: 
: {ha,nii}_{-100-040,-060+000,+000+060,+060+140,-020+040).wisomom-sum-fake.fits
: 
: haciendo un smooth:
: 
: {ha,nii}_{-100-040,-060+000,+000+060,+060+140,-020+040).wisomom-sum-smooth2d.fits
: 
: Hice también en rangos de 20 km/s para poder hacer los mapas a color
: (no me quedarón también como a ti!)
: que son los que anexo a este email.

** Making spectral maps
+ The plan is to start with a fine orthogonal RA-dec grid
  + Place all the slits onto there by looping over slit pixels and painting all the grid pixels that fall in each
  + Leave grid pixels transparent where no slit falls
+ Then do the multi-resolution thing
  + As in [[id:E1B9B2C8-1CDE-407B-B9FE-4E31144F328C][Rebinning the maps]] in orion tsquared notes
  + Which makes use of [[file:~/Work/RubinWFC3/Tsquared/rebin_utils.py][file:~/Work/RubinWFC3/Tsquared/rebin_utils.py]]
+ This should give a map with all the holes filled in at lower resolution
+ To start with we will work with the original spectra that I already have
  + Later, we should switch to the bg-subtracted and brightness-corrected ones that Alba has
*** Define the output grid
+ 1 arcsec is
  + 2.778e-4 deg declination
  + 2.765e-4 deg RA
+ We will try a grid with 0.5 arcsec pixels that is 1024 x 1024, which should comfortably enclose all of the slits
+ AR reference of the horizontal slits is 83.6158 +/- 0.0019
  + AR range of vertical slits is 83.6016 to 83.6205: 68 cos(-5.4150) = 67.7 arcsec
+ Dec reference of vertical slits is -5.4150 +/- 0.0006
  + Dec range of horizontal slits is -5.4409 to -5.4155 = 91.44 arcsec
  + Actually Dec value of the vertical slits is a bit lower now that I have taken into account the image-spectrum shift 
+ So we use
  + CRPIX1 = CRPIX2 = 256.5
  + CRVAL1 = 83.61, CRVAL2 = -5.423
  + CDELT1 = -0.5/3600, CDELT2 = 0.5/3600
  + PC1_1 = 1.0, PC1_2 = 0.0
  + PC2_1 = 0.0, PC2_2 = 1.0
+ Note that the WCS matrix should be given in arcdegrees - the translation to degrees of RA is done automatically (and it doesn't matter much anyway, since we are near the equator)

*** Test with the velocity-integrated emission
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:ID:       23C29E96-4471-454E-A463-D365731119C0
:END:
:LOGBOOK:
- Note taken on [2015-08-25 Tue 11:41] \\
  That did not help at all - we definitely need to rehabilitate slit 248
- Note taken on [2015-08-25 Tue 11:03] \\
  Added the noisy slit 145 to the list of vertical ones to drop.  I am not convinced that this will work out, since with 248 and 145 gone there is a big gap.  It may be possible to rehabilitate 248 with a bit of work - it will probably need its brightness increasing
:END:

Some positions are a bit problematic - try missing them out: 
#+name: positions-to-drop
+ 145


#+name: create-slit-map
#+header: :var ignore=positions-to-drop
#+header: :var vtab=vertical-all-parameters
#+header: :var vmin=-1000 vmax=1000 label="sum"
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

#
# First set up WCS for the output image
#

NX, NY = 1024, 1024
dRA, dDec = -0.5/3600., 0.5/3600.
RA0, Dec0 = 83.61, -5.423
w = WCS(naxis=2)
w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
w.wcs.cdelt = [dRA, dDec]
w.wcs.crval = [RA0, Dec0]
w.wcs.ctype = ['RA---TAN', 'DEC--TAN']

outimage = np.zeros((NY, NX))
outweights = np.zeros((NY, NX))

# Create world coord arrays for output image
II, JJ = np.meshgrid(np.arange(NX), np.arange(NY))
RA, Dec = w.all_pix2world(II, JJ, 0)

slit_width = 2.0                # width in arcsec of 150 micron slit

light_speed = 2.99792458e5
wavrest = 6562.7910
heliocentric_correction = 0.0   # I need to find this
vmin, vmax = float(vmin), float(vmax)
for imid, specid, ra0, dec0, dy, PA, weight in vtab:
    if int(imid) in ignore:
        continue  # drop some positions
    # Unpack floats from strings in table row
    ra0, dec0, dy, PA, weight = [float(_) for _ in (ra0, dec0, dy, PA, weight)]
    # Open H alpha slit spectrum
    spechdu, = fits.open('spec{}-ha.fits'.format(specid))

    # Create velocity array from header
    nwav, k0, wav0, dwav = [spechdu.header[kwd+'1']
                            for kwd in ('NAXIS', 'CRPIX', 'CRVAL', 'CDELT')]
    wavs = wav0 + (np.arange(nwav) - k0 + 1)*dwav
    vels = heliocentric_correction + light_speed*(wavs - wavrest)/wavrest
    # Find indices corresponding to velocity limits
    k1 = (vels < vmin).sum()
    k2 = (vels <= vmax).sum()
    print('Velocities used', vels[k1:k2])

    # Sum spectrum over all wavelengths
    profile = spechdu.data[:, k1:k2].sum(axis=1)

    # Transform output grid coords into slit frame offsets in arcsec
    # XX, YY are intermediate offset coordinates along RA, Dec axes
    XX = 3600*(RA - ra0)*np.cos(np.radians(Dec))
    YY = 3600*(Dec - dec0)
    # Precalculate geometric factors for rotation to slit frame
    c, s = np.cos(np.radians(PA)), np.sin(np.radians(PA))
    # X is ordinate perpendicular to slit
    X = XX*c - YY*s
    # Y is ordinate along slit
    Y = YY*c - XX*s

    # Mask for all output pixels that fall in the slit
    slitmask = abs(X) <= 0.5*slit_width
    # cycle over all slit y pixels
    for j, intensity in enumerate(profile):
        # Offset from slit center
        y = (j - 255.5)*dy
        # Mask for output pixels that fall in this slit pixel
        pixmask = slitmask & (abs(Y - y) <= 0.5*dy)
        # Fill in the output intensity and weight arrays
        outimage[pixmask] += intensity
        outweights[pixmask] += weight

# Save everything as different images in a single fits file:
# 1. The sum of the raw slits 
# 2. The weights
# 3. The slits normalized by the weights
fits.HDUList([
    fits.PrimaryHDU(),
    fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
    fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
    fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
    ]).writeto('all-vert-{}.fits'.format(label), clobber=True)


#+END_SRC

#+RESULTS: create-slit-map
#+begin_example
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
Velocities used [-264.5365553  -262.53793006 -260.53930481 -258.54067957 -256.54205433
 -254.54342909 -252.54480385 -250.54617861 -248.54755336 -246.54892812
 -244.55030288 -242.55167764 -240.5530524  -238.55442716 -236.55580191
 -234.55717667 -232.55855143 -230.55992619 -228.56130095 -226.56267571
 -224.56405046 -222.56542522 -220.56679998 -218.56817474 -216.5695495
 -214.57092426 -212.57229901 -210.57367377 -208.57504853 -206.57642329
 -204.57779805 -202.57917281 -200.58054756 -198.58192232 -196.58329708
 -194.58467184 -192.5860466  -190.58742136 -188.58879611 -186.59017087
 -184.59154563 -182.59292039 -180.59429515 -178.59566991 -176.59704466
 -174.59841942 -172.59979418 -170.60116894 -168.6025437  -166.60391845
 -164.60529321 -162.60666797 -160.60804273 -158.60941749 -156.61079225
 -154.612167   -152.61354176 -150.61491652 -148.61629128 -146.61766604
 -144.6190408  -142.62041555 -140.62179031 -138.62316507 -136.62453983
 -134.62591459 -132.62728935 -130.6286641  -128.63003886 -126.63141362
 -124.63278838 -122.63416314 -120.6355379  -118.63691265 -116.63828741
 -114.63966217 -112.64103693 -110.64241169 -108.64378645 -106.6451612
 -104.64653596 -102.64791072 -100.64928548  -98.65066024  -96.652035
  -94.65340975  -92.65478451  -90.65615927  -88.65753403  -86.65890879
  -84.66028355  -82.6616583   -80.66303306  -78.66440782  -76.66578258
  -74.66715734  -72.6685321   -70.66990685  -68.67128161  -66.67265637
  -64.67403113  -62.67540589  -60.67678065  -58.6781554   -56.67953016
  -54.68090492  -52.68227968  -50.68365444  -48.6850292   -46.68640395
  -44.68777871  -42.68915347  -40.69052823  -38.69190299  -36.69327775
  -34.6946525   -32.69602726  -30.69740202  -28.69877678  -26.70015154
  -24.7015263   -22.70290105  -20.70427581  -18.70565057  -16.70702533
  -14.70840009  -12.70977484  -10.7111496    -8.71252436   -6.71389912
   -4.71527388   -2.71664864   -0.71802339    1.28060185    3.27922709
    5.27785233    7.27647757    9.27510281   11.27372806   13.2723533
   15.27097854   17.26960378   19.26822902   21.26685426   23.26547951
   25.26410475   27.26272999   29.26135523   31.25998047   33.25860571
   35.25723096   37.2558562    39.25448144   41.25310668   43.25173192
   45.25035716   47.24898241   49.24760765   51.24623289   53.24485813
   55.24348337   57.24210861   59.24073386   61.2393591    63.23798434
   65.23660958   67.23523482   69.23386006   71.23248531   73.23111055
   75.22973579   77.22836103   79.22698627   81.22561151   83.22423676
   85.222862     87.22148724   89.22011248   91.21873772   93.21736296
   95.21598821   97.21461345   99.21323869  101.21186393  103.21048917
  105.20911441  107.20773966  109.2063649   111.20499014  113.20361538
  115.20224062  117.20086586  119.19949111  121.19811635  123.19674159
  125.19536683  127.19399207  129.19261731  131.19124256  133.1898678
  135.18849304  137.18711828  139.18574352  141.18436877  143.18299401
  145.18161925  147.18024449  149.17886973  151.17749497  153.17612022
  155.17474546  157.1733707   159.17199594  161.17062118  163.16924642
  165.16787167  167.16649691  169.16512215  171.16374739  173.16237263
  175.16099787  177.15962312  179.15824836  181.1568736   183.15549884
  185.15412408  187.15274932  189.15137457  191.14999981  193.14862505
  195.14725029  197.14587553  199.14450077  201.14312602  203.14175126
  205.1403765   207.13900174  209.13762698  211.13625222  213.13487747
  215.13350271  217.13212795  219.13075319  221.12937843  223.12800367
  225.12662892  227.12525416  229.1238794   231.12250464  233.12112988
  235.11975512  237.11838037  239.11700561  241.11563085  243.11425609
  245.11288133  247.11150657  249.11013182  251.10875706  253.1073823
  255.10600754  257.10463278  259.10325802  261.10188327  263.10050851
  265.09913375  267.09775899  269.09638423  271.09500947  273.09363472
  275.09225996  277.0908852   279.08951044  281.08813568  283.08676092
  285.08538617  287.08401141  289.08263665  291.08126189  293.07988713
  295.07851238  297.07713762  299.07576286  301.0743881   303.07301334
  305.07163858  307.07026383  309.06888907  311.06751431  313.06613955
  315.06476479  317.06339003  319.06201528  321.06064052  323.05926576
  325.057891    327.05651624  329.05514148  331.05376673  333.05239197]
#+end_example

#+RESULTS:

+ The first image in the file is what can be used to combine with more data, for instance the horizontal slits
+ The third image is what should be used in the rebinning process (together with the second image, the weights)

This shows the scaled image in ds9
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-sum.fits[3]
#+END_SRC


*** Repeat the spectral map for the horizontal slits
:PROPERTIES:
:dir:      ~/Dropbox/SPMFEB13/WesternShocks
:ID:       60833550-A462-4F18-86DE-895625FF3E7A
:END:
+ We can't use the same program as for the vertical slits because the table has extra columns
  + In particular, it has the \delta parameter to account for the linear brightness correction along the slit
+ Also, the spectra are organised differently (wavelength along y-axis)
+ So we need to copy and modify the program
+ [3/3] Other changes to the program:
  + [X] Remove hardcoding of slit length in pixels (now NY)
  + [X] Correct for \delta factor
    + We should actually apply this to the weights, which would no longer be constant for the entire slit
    + Except, that I don't understand the reason for the gradient correction
    + But I have done it like that anyhow
  + [X] change sign of offset along slit

#+name: create-horizontal-slit-map
#+header: :var htab=horizontal-all-parameters
#+header: :var vmin=-1000 vmax=1000 label="sum"
#+BEGIN_SRC python
import numpy as np
from astropy.io import fits
from astropy.wcs import WCS

#
# First set up WCS for the output image
#

NX, NY = 1024, 1024
dRA, dDec = -0.5/3600., 0.5/3600.
RA0, Dec0 = 83.61, -5.423
w = WCS(naxis=2)
w.wcs.crpix = [0.5*(1 + NX), 0.5*(1 + NY)]
w.wcs.cdelt = [dRA, dDec]
w.wcs.crval = [RA0, Dec0]
w.wcs.ctype = ['RA---TAN', 'DEC--TAN']

outimage = np.zeros((NY, NX))
outweights = np.zeros((NY, NX))

# Create world coord arrays for output image
II, JJ = np.meshgrid(np.arange(NX), np.arange(NY))
RA, Dec = w.all_pix2world(II, JJ, 0)

slit_width = 2.0                # width in arcsec of 150 micron slit

light_speed = 2.99792458e5
wavrest = 6562.7910
heliocentric_correction = 0.0   # I need to find this
vmin, vmax = float(vmin), float(vmax)
for imid, specid, _, ra0, dec0, dy, PA, _, weight, delta in htab:
    # Unpack floats from strings in table row
    ra0, dec0, dy, PA, weight, delta = [float(_) for _ in (ra0, dec0, dy, PA, weight, delta)]
    # Open H alpha slit spectrum
    spechdu, = fits.open('spec{:03d}-ha.fits'.format(specid))

    # Create velocity array from header
    nwav, k0, wav0, dwav = [spechdu.header[kwd+'2']
                            for kwd in ('NAXIS', 'CRPIX', 'CRVAL', 'CDELT')]
    wavs = wav0 + (np.arange(nwav) - k0 + 1)*dwav
    vels = heliocentric_correction + light_speed*(wavs - wavrest)/wavrest
    # Find indices corresponding to velocity limits
    k1 = (vels < vmin).sum()
    k2 = (vels <= vmax).sum()
    # print('Velocities used', vels[k1:k2])

    # Sum spectrum over all wavelengths
    profile = spechdu.data[k1:k2, :].sum(axis=0)

    NY = spechdu.header['NAXIS1']
    yy = np.arange(NY)/NY - 0.5
    grad_corr = 1.0 + delta*yy


    # Transform output grid coords into slit frame offsets in arcsec
    # XX, YY are intermediate offset coordinates along RA, Dec axes
    XX = 3600*(RA - ra0)*np.cos(np.radians(Dec))
    YY = 3600*(Dec - dec0)
    # Precalculate geometric factors for rotation to slit frame
    c, s = np.cos(np.radians(PA)), np.sin(np.radians(PA))
    # X is ordinate perpendicular to slit
    X = XX*c - YY*s
    # Y is ordinate along slit
    Y = -(YY*c - XX*s)

    # Mask for all output pixels that fall in the slit
    slitmask = abs(X) <= 0.5*slit_width
    # cycle over all slit y pixels
    for j, (intensity, gcorr) in enumerate(zip(profile, grad_corr)):
        # Offset from slit center
        y = (j - 0.5*(NY-1))*dy
        # Mask for output pixels that fall in this slit pixel
        pixmask = slitmask & (abs(Y - y) <= 0.5*dy)
        # Fill in the output intensity and weight arrays
        outimage[pixmask] += intensity
        outweights[pixmask] += weight/gcorr

# Save everything as different images in a single fits file:
# 1. The sum of the raw slits 
# 2. The weights
# 3. The slits normalized by the weights
fits.HDUList([
    fits.PrimaryHDU(),
    fits.ImageHDU(header=w.to_header(), data=outimage, name='slits'),
    fits.ImageHDU(header=w.to_header(), data=outweights, name='weight'),
    fits.ImageHDU(header=w.to_header(), data=outimage/outweights, name='scaled'),
    ]).writeto('all-horiz-{}.fits'.format(label), clobber=True)


#+END_SRC

#+RESULTS: create-horizontal-slit-map

This shows the scaled image in ds9
#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-horiz-sum.fits[3]
#+END_SRC


*** TODO Correction for heliocentric velocity
+ [2015-08-23 Sun] I haven't done this yet
+ I have it in a table for the 2013 observations, but need to calculate it for the others
+ Plan is to base on what I did before:
  + For Keck spectra [[id:1772B088-D07A-4228-95D4-14F9C3529EC1][here]]
  + And for HST [[id:5D00EFD4-5F66-4075-B89D-1AFCF3A73B70][here]]

*** Try to use different velocity ranges
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:END:

+ It would be more efficient to do these all at the sane time, but for the time being I will do them separately
+ Although the noisiest slit looked fine on the integrated maps, it makes a mess of the velocity channels where the emission is faint

#+name: noisy-slits
+ 145

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-blue.fits[3]
#+END_SRC

+ Try some blue wing 20 km/s channels

+ And some line core channels
#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30.fits[3]
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50.fits[3]
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70.fits[3]
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-r30.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 50000
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-r10.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 15000
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b10.fits[3]
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 6000
#+END_SRC


#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30-bin016.fits['scaled']
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50-bin016.fits['scaled']
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70-bin016.fits['scaled']
#+END_SRC


+ Display the multigrid smoothed channel maps
#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-b30-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-b50-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b70-multibin.fits
xpaset -p ds9 scale linear
#+END_SRC

#+BEGIN_SRC sh
xpaset -p ds9 rgb new
xpaset -p ds9 fits $PWD/all-vert-r30-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 50000
xpaset -p ds9 rgb green
xpaset -p ds9 fits $PWD/all-vert-r10-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 15000
xpaset -p ds9 rgb blue
xpaset -p ds9 fits $PWD/all-vert-b10-multibin.fits
xpaset -p ds9 scale linear
xpaset -p ds9 scale limits 0 6000
#+END_SRC




*** Combine both the horizontal and vertical slits
:PROPERTIES:
:dir:      ~/Dropbox/OrionWest
:END:

#+BEGIN_SRC python
from astropy.io import fits
scale = 1.8
horiz = fits.open('../SPMFEB13/WesternShocks/all-horiz-sum.fits')
vert = fits.open('../SPMJAN10/reducciones/all-vert-sum.fits')
horiz['slits'].data += vert['slits'].data/scale
horiz['weight'].data += vert['weight'].data
horiz['scaled'].data = horiz['slits'].data/horiz['weight'].data
horiz.writeto('all-slits-sum.fits', clobber=True)
#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum.fits[3]
#+END_SRC


+ Note that we have to explicitly set the working directory for this to work
  + It is not enough that =dir= is set for this subtree
#+RESULTS:
: Saving all-slits-sum-bin001.fits
: Saving all-slits-sum-bin002.fits
: Saving all-slits-sum-bin004.fits
: Saving all-slits-sum-bin008.fits
: Saving all-slits-sum-bin016.fits
: Saving all-slits-sum-bin032.fits


#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum-bin032.fits['scaled']
#+END_SRC


Now we do the multiresolution maps for the combined data.  For the moment, just the spectrally integrated emission

#+name: just-integrated
+ sum

We need to extend the largest pixels used up to 32x32 in order to fill in all the big gaps between the horizontal slits 
#+name: minweights-extended
|   1 |   2 |   4 |   8 |  16 |  32 |
| 2.0 | 2.0 | 2.0 | 2.0 | 2.0 | 4.0 |

We can use the =imscale= parameter to adjust the resolution of the map.  If =imscale= is larger then we need a higher total flux for a pixel to be accepted, so we will end up with larger pixels 

#+RESULTS:
: .+..+..+..+..+..+..+..+..+..+..+..+.
: Channel sum
: Binning 32 - pixels used 217088
: Binning 16 - pixels used 183296
: Binning 8 - pixels used 76224
: Binning 4 - pixels used 6448
: Binning 2 - pixels used 16
: Binning 1 - pixels used 0

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-slits-sum-multibin.fits
#+END_SRC

** The multigrid smoothing method
:PROPERTIES:
:dir:      ~/Dropbox/SPMJAN10/reducciones
:END:

#+name: multi-smooth
#+BEGIN_SRC python
import sys
sys.path.append('/Users/will/Work/RubinWFC3/Tsquared')
from rebin_utils import downsample, oversample
from astropy.io import fits

nlist = [1, 2, 4, 8, 16, 32]

infile = 'all-{}-{}.fits'.format(slits, label)

hdulist = fits.open(infile)
hdr = hdulist['scaled'].header
im = hdulist['scaled'].data
w = hdulist['weight'].data
m = w > 0.0

for n in nlist:
    im[~m] = 0.0
    outfile = infile.replace('.fits', '-bin{:03d}.fits'.format(n))
    print('Saving', outfile)
    # Save both the scaled image and the weights, but at the full resolution
    fits.HDUList([
        fits.PrimaryHDU(),
        fits.ImageHDU(data=oversample(im, n), header=hdr, name='scaled'),
        fits.ImageHDU(data=oversample(w, n), header=hdr, name='weight'),
    ]).writeto(outfile, clobber=True)
    # Now do the rebinning by a factor of two
    [im,], m, w = downsample([im,], m, weights=w)

#+END_SRC

#+RESULTS: multi-smooth
: Saving all-vert-sum-bin001.fits
: Saving all-vert-sum-bin002.fits
: Saving all-vert-sum-bin004.fits
: Saving all-vert-sum-bin008.fits
: Saving all-vert-sum-bin016.fits
: Saving all-vert-sum-bin032.fits

#+BEGIN_SRC sh
xpaset -p ds9 fits $PWD/all-vert-sum-bin016.fits['scaled']
#+END_SRC

+ Unfortunately, the weights increase a lot with the binning - more than they ought to.
+ The problem is that the pixels at the finest grid levels are not independent, since many of them come from the same pixel of the slit spectrum
+ However, the algorithm does not know this and so adds them up when it rebins to the next coarser grid
+ This will be a problem if we want to combine the different levels and impose a minimum weight
  + An easy solution would be to have the minimum weight vary per level

#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
nlist = [1, 2, 4, 8, 16]
minweights = [0.5, 1.0, 2.0, 2.0, 2.0, 2.0]
outim = np.zeros((1024, 1024))
for n, minw in reversed(list(zip(nlist, minweights))):
    fn = 'all-vert-sum-bin{:03d}.fits'.format(n)
    hdulist = fits.open(fn)
    im = hdulist['scaled'].data
    hdr = hdulist['scaled'].header
    w = hdulist['weight'].data
    m = w*im >= minw*1e5
    outim[m] = im[m]
fits.PrimaryHDU(header=hdr, data=outim).writeto('all-vert-sum-multibin.fits', clobber=True)
#+END_SRC


And here is a version for the velocity channels

#+name: vel-channels
+ r30
+ r10
+ b10
+ b30
+ b50
+ b70


#+name: minweights-standard
|   1 |   2 |   4 |   8 |  16 |
| 0.5 | 1.0 | 2.0 | 2.0 | 2.0 |

#+name: multigrid-combine
#+header: :var labels=vel-channels slits="vert" wtab=minweights-standard imscale=1000
#+BEGIN_SRC python
from astropy.io import fits
import numpy as np
nlist, minweights = wtab
outim = np.zeros((1024, 1024))
for label in labels:
    print('.+.'*12)
    print('Channel', label)
    for n, minw in reversed(list(zip(nlist, minweights))):
        fn = 'all-{}-{}-bin{:03d}.fits'.format(slits, label, n)
        hdulist = fits.open(fn)
        im = hdulist['scaled'].data
        hdr = hdulist['scaled'].header
        w = hdulist['weight'].data
        m = w*im >= minw*imscale
        print('Binning', n, '- pixels used', m.sum())
        outim[m] = im[m]
    fits.PrimaryHDU(header=hdr, data=outim).writeto(
        'all-{}-{}-multibin.fits'.format(slits, label), clobber=True)
#+END_SRC

#+RESULTS: multigrid-combine
#+begin_example
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel r30
Binning 16 - pixels used 101120
Binning 8 - pixels used 86400
Binning 4 - pixels used 62144
Binning 2 - pixels used 44500
Binning 1 - pixels used 35532
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel r10
Binning 16 - pixels used 100608
Binning 8 - pixels used 86144
Binning 4 - pixels used 61968
Binning 2 - pixels used 44408
Binning 1 - pixels used 35471
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b10
Binning 16 - pixels used 99840
Binning 8 - pixels used 82112
Binning 4 - pixels used 39872
Binning 2 - pixels used 21452
Binning 1 - pixels used 6119
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b30
Binning 16 - pixels used 98560
Binning 8 - pixels used 72832
Binning 4 - pixels used 22928
Binning 2 - pixels used 8888
Binning 1 - pixels used 2342
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b50
Binning 16 - pixels used 98048
Binning 8 - pixels used 69888
Binning 4 - pixels used 20272
Binning 2 - pixels used 7752
Binning 1 - pixels used 3025
.+..+..+..+..+..+..+..+..+..+..+..+.
Channel b70
Binning 16 - pixels used 95744
Binning 8 - pixels used 61568
Binning 4 - pixels used 12800
Binning 2 - pixels used 3424
Binning 1 - pixels used 1135
#+end_example


** Coordinates of the slits
+ Data received from Alba [2015-08-11 Tue]

*** Description from Alba
: Todos los datos están en:
: /fs/posgrado01/other0/albafm/WesternShocks/3.CuboWS/0.Datos
: Diferencio entre especros e imagenes y luego entre los del 2010 (verticales) y
: 2013 (horizontales)
: Todos los espectros tienen la sustraccion del continuo (*nc*) y los del 2010
: además tiene el factor de calidad (aplicado entre ellos y a todos los de esa
: campaña de observacion, son *cc*fits)
: 
: Por ultimo te adjunto tabla las coordenadas de cada posicion de las rendijas.



*** Brightness correction factors
+ The 2010 data in =3.CuboWS/0.Datos= are =.nc.cc.= have already had this applied
+ The prior stage (just =.nc.=) is in =2.Datos2010/1.PreparandoDatos/1.SustraccionContinuo=
+ The factors are in [[file:/ssh:nil:/fs/posgrado01/other0/albafm/WesternShocks/2.Datos2010/1.PreparandoDatos/2.IgualandoCalidad/intensidades.dat][intensidades.dat]]
  + Transposed version of this table below
  + The factors multiply the observed intensities
+ The 2013 data don't seem to have any brightness correction

| Imagen | I. original | I. corregida |  Factor |
|--------+-------------+--------------+---------|
|    101 |     2149.52 |      2180.37 | 1.01435 |
|    124 |     1936.37 |      2180.37 | 1.12601 |
|    128 |     1567.50 |      2180.37 | 1.39099 |
|    133 |     1814.61 |      2180.37 | 1.20156 |
|    137 |     1939.18 |      2180.37 | 1.12438 |
|    145 |     1361.85 |      2180.37 | 1.60103 |
|    157 |     1323.03 |      2180.37 | 1.64801 |
|    173 |     1249.18 |      2180.37 | 1.74544 |
|    202 |     2170.67 |      2180.37 | 1.00447 |
|    206 |     2169.70 |      2180.37 | 1.00492 |
|    210 |     2211.48 |      2180.37 | 0.98594 |
|    214 |     2231.37 |      2180.37 | 0.97715 |
|    219 |     2226.34 |      2180.37 | 0.97935 |
|    236 |     2184.94 |      2180.37 | 0.99791 |
|    240 |     2186.48 |      2180.37 | 0.99720 |
|    244 |     2150.31 |      2180.37 | 1.01398 |
|    248 |     1632.71 |      2180.37 | 1.33543 |
|    252 |     1816.34 |      2180.37 | 1.20042 |

*** HORIZONTALES 2013

#+name: horizontal-slits
| imagen | Espectro |                 AR |                DEC |
|--------+----------+--------------------+--------------------|
| spm165 | spec166  |            83.6141 |            -5.4409 |
| spm169 | spec170  |            83.6146 |            -5.4382 |
| spm237 | spec238  |            83.6166 |            -5.4361 |
| spm232 | spec233  |            83.6157 |            -5.4321 |
| spm226 | spec227  |            83.6076 |            -5.4294 |
| spm149 | spec150  |            83.6231 |            -5.4239 |
| spm154 | spec155  |            83.6237 |            -5.4226 |
| spm159 | spec160  |            83.6238 |            -5.4201 |
| spm033 | spec034  |            83.6107 |            -5.4165 |
| spm029 | spec030  |            83.6084 |            -5.4155 |
|--------+----------+--------------------+--------------------|
|        |          | 83.6158 +/- 0.0019 | -5.4275 +/- 0.0029 |
#+TBLFM: @12$3..@12$4=vmeane(@I..@II);f4

					
					
*** VERTICALES 2010
+ From the region file [[file:/ssh:nil:/fs/posgrado01/other0/albafm/WesternShocks/3.CuboWS/1.Posiciones/pos_todas.reg][pos_todas.reg]] it looks like the PA = 3.03 deg

#+name: vertical-slits
| imagen | Espectro |                 AR |                DEC |  Factor |
|--------+----------+--------------------+--------------------+---------|
| spm252 | spec253  |            83.6016 |            -5.4149 | 1.20042 |
| spm173 | spec174  |            83.6020 |            -5.4108 | 1.74544 |
| spm244 | spec245  |            83.6031 |            -5.4152 | 1.01398 |
| spm240 | spec241  |            83.6053 |            -5.4153 | 0.99720 |
| spm236 | spec237  |            83.6071 |            -5.4155 | 0.99791 |
| spm157 | spec158  |            83.6078 |            -5.4118 | 1.64801 |
| spm219 | spec220  |            83.6087 |            -5.4163 | 0.97935 |
| spm248 | spec249  |            83.6091 |            -5.4150 | 1.33543 |
| spm145 | spec146  |            83.6106 |            -5.4109 | 1.60103 |
| spm214 | spec215  |            83.6119 |            -5.4160 | 0.97715 |
| spm137 | spec138  |            83.6133 |            -5.4120 | 1.12438 |
| spm210 | spec211  |            83.6143 |            -5.4163 | 0.98594 |
| spm101 | spec102  |            83.6149 |            -5.4177 | 1.01435 |
| spm128 | spec129  |            83.6156 |            -5.4181 | 1.39099 |
| spm133 | spec134  |            83.6159 |            -5.4123 | 1.20156 |
| spm206 | spec207  |            83.6171 |            -5.4165 | 1.00492 |
| spm124 | spec125  |            83.6184 |            -5.4183 | 1.12601 |
| spm202 | spec203  |            83.6205 |            -5.4167 | 1.00447 |
|--------+----------+--------------------+--------------------+---------|
|        |          | 83.6110 +/- 0.0014 | -5.4150 +/- 0.0006 |         |
#+TBLFM: @20$3..@20$4=vmeane(@I..@II);f4


* Modifying org export to include header arguments                 :noexport:
Based on http://kitchingroup.cheme.cmu.edu/blog/2014/09/22/Showing-what-data-went-into-a-code-block-on-export/


** This is all copied from John Kitchin's page
Here is how we can get a list of the table-names indicating their name or that they are results (results are enclosed in ()).

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'table
  (lambda (element)     
    (or (org-element-property :name element) (org-element-property :results element))))
#+END_SRC

#+RESULTS:
- rgb-limits-nii-core
- rgb-limits-ha-core
- rgb-limits-ha-wide-blue
- rgb-limits-nii-wide-blue
- rgb-limits-ha-near-red
- rgb-limits-ha-wide-red
- rgb-limits-nii-wide-red
- ("")
- ("observational-parameters")
- ("more-observational-parameters")
- vertical-image-and-fullspec
- horizontal-image-and-fullspec
- ("horizontal-all-parameters")
- ("vertical-all-parameters")
- minweights-extended
- minweights-standard
- horizontal-slits
- vertical-slits

Similarly, here is the list of parameters for each block.

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (element)     
    (org-element-property :parameters element)))
#+END_SRC

#+RESULTS:
- :results verbatim
- :return figfile :results file
- :eval no :tangle fov-with-slits.py
- :eval no
- :tangle clean_ajustes_data.py :eval no
- :results verbatim
- :return outtab
- :results file :return figfile
- :results verbatim
- :results output verbatim
- :results output verbatim
- :tangle no
- :exports code :results verbatim
- :return outtab
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :exports code :results verbatim
- :results silent
- :results silent
- :results verbatim
- :results verbatim
- :results silent
- :exports code
- :results output verbatim
- :results verbatim
- :results silent
- :results verbatim
- :results silent
- :results silent :var DS9="ds9"
- :tangle display-vel-spectra.sh
- :tangle test-sh-args.sh
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results verbatim
- :results silent
- :results silent
- :return outtab
- :results output
- :exports code :results verbatim
- :exports code :results verbatim
- :results silent
- :results silent
- :results silent
- :results silent
- :results verbatim
- :results verbatim
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results silent
- :results list
- :results list
- :results list
- :results list


** My attempt to extend it to '#+header:' elements
#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (element)
  (org-element-property :header element)))
#+END_SRC

#+RESULTS:
- (":var SPECIES=\"nii\" SUFFIX=\"core\" STRETCH=\"linear\"" ":var LIMTAB=rgb-limits-nii-core" ":var RANGES=\"+030+050 +010+030 -010+010\"")
- (":var table=vertical-image-and-fullspec")
- (":var table=horizontal-image-and-fullspec")
- (":var intable=horizontal-image-and-fullspec")
- (":var intable=vertical-image-and-fullspec")
- (":var vmin=-1000 vmax=1000 label=\"sum\"" ":var vtab=vertical-all-parameters" ":var ignore=positions-to-drop")
- (":var vmin=-1000 vmax=1000 label=\"sum\"" ":var htab=horizontal-all-parameters")
- (":var labels=vel-channels slits=\"vert\" wtab=minweights-standard imscale=1000")



** And to named plain lists
#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'plain-list
  (lambda (element)     
    (or (org-element-property :name element) (org-element-property :results element))))
#+END_SRC

#+RESULTS:
- positions-to-drop
- noisy-slits
- just-integrated
- vel-channels
- ("")
- ("")
- ("")
- ("")

  
** Now my version of Kitchin's output filters

#+BEGIN_SRC emacs-lisp
(defun ox-mrkup-filter-table (text back-end info)
  (let ((tblname (pop tblnames)))
    (message "tblname is \"%s\"" tblname)
    ; pop does not remove nil from the list, so we do it here.
    (when (null tblname) (setq tblnames (cdr tblnames)))
    (cond
     ((listp tblname)  ; from results
      (concat (format "<br><pre class=\"example\">Results table name: %s</pre>" (car tblname)) text))
     ((null tblname)   ; no name
      text)
     (t ; everything else
      (concat (format "<br><pre class=\"example\">Table name: %s</pre>" tblname) text)))))

(defun ox-mrkup-filter-plain-list (text back-end info)
  (let ((listname (pop listnames)))
    (message "listname is \"%s\"" listname)
    ; pop does not remove nil from the list, so we do it here.
    (when (null listname) (setq listnames (cdr listnames)))
    (cond
     ((null listname)   ; no name
      text)
     (t ; everything else
      (concat (format "<br><pre class=\"example\">List name: %s</pre>" listname) text)))))

(defun ox-mrkup-filter-src-block (text back-end info)
  (let ((params (pop src-params))
        (hparams (pop hdr-params))
        (lang (pop src-langs)))
    (when (null params) (setq src-params (cdr src-params)))
    (when (null hparams) (setq hdr-params (cdr hdr-params)))
    (if params  
        (concat (format "<pre class=\"example\">Language = %s\nParameters = %s\nHeader = %s</pre>" lang params hparams) text)
      text)))

;; preprocess to get table names, src parameters and languages.
(let ((tblnames (org-element-map (org-element-parse-buffer) 'table
                  (lambda (element)     
                    (or (org-element-property :name element)                    
                        (org-element-property :results element)))))

      (listnames (org-element-map (org-element-parse-buffer) 'plain-list
                  (lambda (element)     
                    (org-element-property :name element))))

      (src-params (org-element-map (org-element-parse-buffer) 'src-block
                    (lambda (element)     
                      (org-element-property :parameters element))))

      (hdr-params (org-element-map (org-element-parse-buffer) 'src-block
                    (lambda (element)     
                      (org-element-property :header element))))

      (src-langs (org-element-map (org-element-parse-buffer) 'src-block
                   (lambda (element)     
                     (org-element-property :language element))))

      ;; register the filters
      (org-export-filter-table-functions '(ox-mrkup-filter-table))
;;      (org-export-filter-plain-list-functions '(ox-mrkup-filter-plain-list))
      (org-export-filter-src-block-functions '(ox-mrkup-filter-src-block)))

  ;; and export the result
  (browse-url (org-export-to-file 'html "alba-orion-west.html")))
#+END_SRC

#+RESULTS:
: #<process open alba-orion-west.html>

